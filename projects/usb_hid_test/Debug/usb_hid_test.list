
usb_hid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000808c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b0  080082b0  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b8  080082b8  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080082c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000114  080083d4  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  080083d4  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a8b  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000363b  00000000  00000000  00034c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00038250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8a  00000000  00000000  000392f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a33  00000000  00000000  00039f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016252  00000000  00000000  000629b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb46d  00000000  00000000  00078c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042d0  00000000  00000000  00164074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00168344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000114 	.word	0x20000114
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081fc 	.word	0x080081fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000118 	.word	0x20000118
 80001c4:	080081fc 	.word	0x080081fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b32      	ldr	r3, [pc, #200]	; (80005a4 <MX_GPIO_Init+0xe0>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <MX_GPIO_Init+0xe0>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_GPIO_Init+0xe0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_GPIO_Init+0xe0>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a2b      	ldr	r2, [pc, #172]	; (80005a4 <MX_GPIO_Init+0xe0>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xe0>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xe0>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fd2d 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <MX_GPIO_Init+0xe4>)
 800055e:	f000 fb75 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000562:	2320      	movs	r3, #32
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fb66 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_Yellow_Pin;
 8000580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	2301      	movs	r3, #1
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_Yellow_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xe4>)
 8000596:	f000 fb59 	bl	8000c4c <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	; 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000800 	.word	0x48000800

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f99a 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f810 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ff84 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8de 	bl	800077c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005c0:	f007 f84c 	bl	800765c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, data, 2);
 80005c4:	2202      	movs	r2, #2
 80005c6:	4902      	ldr	r1, [pc, #8]	; (80005d0 <main+0x24>)
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <main+0x28>)
 80005ca:	f005 fb9d 	bl	8005d08 <USBD_CUSTOM_HID_SendReport>
 80005ce:	e7f9      	b.n	80005c4 <main+0x18>
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200001c0 	.word	0x200001c0

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fddc 	bl	80081a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f001 fe95 	bl	800232c <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f848 	bl	800069c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f001 fe70 	bl	80022f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xc0>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xc0>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000620:	2314      	movs	r3, #20
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fecf 	bl	80023f8 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000660:	f000 f81c 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2101      	movs	r1, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fa97 	bl	8002bb0 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000688:	f000 f808 	bl	800069c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f002 ff9e 	bl	80035cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	; 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	; 0x58
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f930 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <OTG_FS_IRQHandler+0x10>)
 800074a:	f000 fd94 	bl	8001276 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000069c 	.word	0x2000069c

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_USART2_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007c0:	f003 f8e6 	bl	8003990 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f7ff ff67 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000130 	.word	0x20000130
 80007d8:	40004400 	.word	0x40004400

080007dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0ac      	sub	sp, #176	; 0xb0
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2288      	movs	r2, #136	; 0x88
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f007 fcd1 	bl	80081a4 <memset>
  if(uartHandle->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_UART_MspInit+0xb0>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d13b      	bne.n	8000884 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fbed 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000824:	f7ff ff3a 	bl	800069c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_UART_MspInit+0xb4>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082c:	4a18      	ldr	r2, [pc, #96]	; (8000890 <HAL_UART_MspInit+0xb4>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000832:	6593      	str	r3, [r2, #88]	; 0x58
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_UART_MspInit+0xb4>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_UART_MspInit+0xb4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_UART_MspInit+0xb4>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_UART_MspInit+0xb4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000858:	230c      	movs	r3, #12
 800085a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000870:	2307      	movs	r3, #7
 8000872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f000 f9e4 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000884:	bf00      	nop
 8000886:	37b0      	adds	r7, #176	; 0xb0
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40004400 	.word	0x40004400
 8000890:	40021000 	.word	0x40021000

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ff5e 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f007 fc77 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fe71 	bl	80005ac <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80008d8:	080082c0 	.word	0x080082c0
  ldr r2, =_sbss
 80008dc:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80008e0:	20000bc4 	.word	0x20000bc4

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_Init+0x3c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_Init+0x3c>)
 80008f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f962 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f80f 	bl	8000928 <HAL_InitTick>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	e001      	b.n	800091a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000916:	f7ff fec7 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091a:	79fb      	ldrb	r3, [r7, #7]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_InitTick+0x6c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d023      	beq.n	8000984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_InitTick+0x70>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_InitTick+0x6c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f96d 	bl	8000c32 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d809      	bhi.n	8000978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f937 	bl	8000bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_InitTick+0x74>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e007      	b.n	8000988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e004      	b.n	8000988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e001      	b.n	8000988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000000c 	.word	0x2000000c
 8000998:	20000004 	.word	0x20000004
 800099c:	20000008 	.word	0x20000008

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200001b8 	.word	0x200001b8

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000000c 	.word	0x2000000c

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <__NVIC_EnableIRQ+0x38>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff29 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff3e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff8e 	bl	8000b1c <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff31 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa2 	bl	8000b84 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e17f      	b.n	8000f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8171 	beq.w	8000f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d118      	bne.n	8000d2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80ac 	beq.w	8000f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e16:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x242>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x338>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x23e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_GPIO_Init+0x33c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x23a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x340>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x236>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x344>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x232>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x348>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x22e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x34c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x22a>
 8000e72:	2306      	movs	r3, #6
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea0:	4937      	ldr	r1, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f47f ae78 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48001000 	.word	0x48001000
 8000f94:	48001400 	.word	0x48001400
 8000f98:	48001800 	.word	0x48001800
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b08f      	sub	sp, #60	; 0x3c
 8000fd4:	af0a      	add	r7, sp, #40	; 0x28
 8000fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e116      	b.n	8001210 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d106      	bne.n	8001002 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f006 fca1 	bl	8007944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f003 faaa 	bl	800457a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	687e      	ldr	r6, [r7, #4]
 800102e:	466d      	mov	r5, sp
 8001030:	f106 0410 	add.w	r4, r6, #16
 8001034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001040:	e885 0003 	stmia.w	r5, {r0, r1}
 8001044:	1d33      	adds	r3, r6, #4
 8001046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f003 f9bc 	bl	80043c6 <USB_CoreInit>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0d7      	b.n	8001210 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fa98 	bl	800459c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e04a      	b.n	8001108 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	333d      	adds	r3, #61	; 0x3d
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	333c      	adds	r3, #60	; 0x3c
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	b298      	uxth	r0, r3
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3356      	adds	r3, #86	; 0x56
 80010ae:	4602      	mov	r2, r0
 80010b0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3344      	adds	r3, #68	; 0x44
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3348      	adds	r3, #72	; 0x48
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	334c      	adds	r3, #76	; 0x4c
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	3301      	adds	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3af      	bcc.n	8001072 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e044      	b.n	80011a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	3301      	adds	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3b5      	bcc.n	8001118 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	687e      	ldr	r6, [r7, #4]
 80011b4:	466d      	mov	r5, sp
 80011b6:	f106 0410 	add.w	r4, r6, #16
 80011ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ca:	1d33      	adds	r3, r6, #4
 80011cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f003 fa30 	bl	8004634 <USB_DevInit>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e014      	b.n	8001210 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f001 f852 	bl	80022a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f004 f9de 	bl	80055ca <USB_DevDisconnect>

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001218 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_PCD_Start+0x1c>
 8001230:	2302      	movs	r3, #2
 8001232:	e01c      	b.n	800126e <HAL_PCD_Start+0x56>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f97f 	bl	8004558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f004 f992 	bl	8005588 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b08d      	sub	sp, #52	; 0x34
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fa50 	bl	8005732 <USB_GetMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 847e 	bne.w	8001b96 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 f9b4 	bl	800560c <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8474 	beq.w	8001b94 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 f9a1 	bl	800560c <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d107      	bne.n	80012e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f002 0202 	and.w	r2, r2, #2
 80012e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f98f 	bl	800560c <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d161      	bne.n	80013bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 020f 	and.w	r2, r3, #15
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	0c5b      	lsrs	r3, r3, #17
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	2b02      	cmp	r3, #2
 8001332:	d124      	bne.n	800137e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d035      	beq.n	80013ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	6a38      	ldr	r0, [r7, #32]
 8001354:	f003 ffc6 	bl	80052e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001364:	441a      	add	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001376:	441a      	add	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	e016      	b.n	80013ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	0c5b      	lsrs	r3, r3, #17
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	2b06      	cmp	r3, #6
 8001388:	d110      	bne.n	80013ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	6a38      	ldr	r0, [r7, #32]
 8001396:	f003 ffa5 	bl	80052e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a6:	441a      	add	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0210 	orr.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 f923 	bl	800560c <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013d0:	f040 80a7 	bne.w	8001522 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 f928 	bl	8005632 <USB_ReadDevAllOutEpInterrupt>
 80013e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013e4:	e099      	b.n	800151a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 808e 	beq.w	800150e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 f94c 	bl	800569a <USB_ReadDevOutEPInterrupt>
 8001402:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00c      	beq.n	8001428 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800141a:	461a      	mov	r2, r3
 800141c:	2301      	movs	r3, #1
 800141e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fe66 	bl	80020f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2308      	movs	r3, #8
 8001442:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fea2 	bl	8002190 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2310      	movs	r3, #16
 8001466:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d109      	bne.n	8001492 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800148c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001490:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	3304      	adds	r3, #4
 80014a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	78db      	ldrb	r3, [r3, #3]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d108      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2200      	movs	r2, #0
 80014b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f006 fb95 	bl	8007bec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ce:	461a      	mov	r2, r3
 80014d0:	2302      	movs	r3, #2
 80014d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ea:	461a      	mov	r2, r3
 80014ec:	2320      	movs	r3, #32
 80014ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f af62 	bne.w	80013e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f870 	bl	800560c <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001536:	f040 80a4 	bne.w	8001682 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f891 	bl	8005666 <USB_ReadDevAllInEpInterrupt>
 8001544:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800154a:	e096      	b.n	800167a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 808b 	beq.w	800166e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f8b7 	bl	80056d6 <USB_ReadDevInEPInterrupt>
 8001568:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	2201      	movs	r2, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	69f9      	ldr	r1, [r7, #28]
 8001590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001594:	4013      	ands	r3, r2
 8001596:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a4:	461a      	mov	r2, r3
 80015a6:	2301      	movs	r3, #1
 80015a8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f006 fa86 	bl	8007ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2308      	movs	r3, #8
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2310      	movs	r3, #16
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001616:	6a38      	ldr	r0, [r7, #32]
 8001618:	f003 f94e 	bl	80048b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	3338      	adds	r3, #56	; 0x38
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2200      	movs	r2, #0
 800163c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f006 fae3 	bl	8007c10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001656:	461a      	mov	r2, r3
 8001658:	2302      	movs	r3, #2
 800165a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fcba 	bl	8001fe2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f af65 	bne.w	800154c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 ffc0 	bl	800560c <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001696:	d122      	bne.n	80016de <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f006 fd03 	bl	80080cc <HAL_PCDEx_LPM_Callback>
 80016c6:	e002      	b.n	80016ce <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f006 fa67 	bl	8007b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 ff92 	bl	800560c <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016f2:	d112      	bne.n	800171a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f006 fa23 	bl	8007b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001718:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 ff74 	bl	800560c <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800172a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800172e:	d121      	bne.n	8001774 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800173e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d111      	bne.n	800176e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	f003 020f 	and.w	r2, r3, #15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001764:	2101      	movs	r1, #1
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f006 fcb0 	bl	80080cc <HAL_PCDEx_LPM_Callback>
 800176c:	e002      	b.n	8001774 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f006 f9ee 	bl	8007b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 ff47 	bl	800560c <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001788:	f040 80b5 	bne.w	80018f6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2110      	movs	r1, #16
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f886 	bl	80048b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	e046      	b.n	8001840 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017be:	461a      	mov	r2, r3
 80017c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	0151      	lsls	r1, r2, #5
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	440a      	add	r2, r1
 80017dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f2:	461a      	mov	r2, r3
 80017f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	0151      	lsls	r1, r2, #5
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	440a      	add	r2, r1
 8001810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001818:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	0151      	lsls	r1, r2, #5
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	440a      	add	r2, r1
 8001830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001838:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d3b3      	bcc.n	80017b2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001858:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800185c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188c:	f043 030b 	orr.w	r3, r3, #11
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	e015      	b.n	80018c0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f043 030b 	orr.w	r3, r3, #11
 80018be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f003 ff57 	bl	8005794 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fe86 	bl	800560c <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190a:	d124      	bne.n	8001956 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f003 ff1c 	bl	800574e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f849 	bl	80049b2 <USB_GetDevSpeed>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	f001 facc 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8001930:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4620      	mov	r0, r4
 800193c:	f002 fd70 	bl	8004420 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f006 f8e6 	bl	8007b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001954:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fe56 	bl	800560c <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d10a      	bne.n	8001980 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f006 f8c3 	bl	8007af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f002 0208 	and.w	r2, r2, #8
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fe41 	bl	800560c <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001990:	2b80      	cmp	r3, #128	; 0x80
 8001992:	d122      	bne.n	80019da <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e014      	b.n	80019d0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d105      	bne.n	80019ca <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fadb 	bl	8001f80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3e5      	bcc.n	80019a6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fe14 	bl	800560c <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ee:	d13b      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f0:	2301      	movs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e02b      	b.n	8001a4e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3340      	adds	r3, #64	; 0x40
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d115      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da12      	bge.n	8001a48 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	333f      	adds	r3, #63	; 0x3f
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa9c 	bl	8001f80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3ce      	bcc.n	80019f6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fdcd 	bl	800560c <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a7c:	d155      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7e:	2301      	movs	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e045      	b.n	8001b10 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d12e      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da2b      	bge.n	8001b0a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001abe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d121      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6053      	str	r3, [r2, #4]
            break;
 8001b08:	e007      	b.n	8001b1a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3b4      	bcc.n	8001a84 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fd6c 	bl	800560c <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3e:	d10a      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f006 f877 	bl	8007c34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fd56 	bl	800560c <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d115      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f006 f867 	bl	8007c50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e000      	b.n	8001b96 <HAL_PCD_IRQHandler+0x920>
      return;
 8001b94:	bf00      	nop
    }
  }
}
 8001b96:	3734      	adds	r7, #52	; 0x34
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}

08001b9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_SetAddress+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e013      	b.n	8001bde <HAL_PCD_SetAddress+0x42>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fcb4 	bl	800553c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	70fb      	strb	r3, [r7, #3]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	803b      	strh	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da0f      	bge.n	8001c2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3338      	adds	r3, #56	; 0x38
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
 8001c2a:	e00f      	b.n	8001c4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c58:	883a      	ldrh	r2, [r7, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	78ba      	ldrb	r2, [r7, #2]
 8001c62:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c76:	78bb      	ldrb	r3, [r7, #2]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d102      	bne.n	8001c82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_PCD_EP_Open+0xaa>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e00e      	b.n	8001cae <HAL_PCD_EP_Open+0xc8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fea6 	bl	80049f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cac:	7afb      	ldrb	r3, [r7, #11]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da0f      	bge.n	8001cea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3338      	adds	r3, #56	; 0x38
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00f      	b.n	8001d0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_Close+0x6e>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_Close+0x8c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fee4 	bl	8004b00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	460b      	mov	r3, r1
 8001d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 ff8a 	bl	8004cb8 <USB_EPStartXfer>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	3338      	adds	r3, #56	; 0x38
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2201      	movs	r2, #1
 8001dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6979      	ldr	r1, [r7, #20]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 ff59 	bl	8004cb8 <USB_EPStartXfer>

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d901      	bls.n	8001e2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e04e      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da0f      	bge.n	8001e56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3338      	adds	r3, #56	; 0x38
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	705a      	strb	r2, [r3, #1]
 8001e54:	e00d      	b.n	8001e72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_EP_SetStall+0x82>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e01c      	b.n	8001ecc <HAL_PCD_EP_SetStall+0xbc>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fa77 	bl	8005394 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f003 fc69 	bl	8005794 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d901      	bls.n	8001ef2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e042      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da0f      	bge.n	8001f1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3338      	adds	r3, #56	; 0x38
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00f      	b.n	8001f3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_EP_ClrStall+0x86>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e00e      	b.n	8001f78 <HAL_PCD_EP_ClrStall+0xa4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fa81 	bl	8005470 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0c      	bge.n	8001fae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3338      	adds	r3, #56	; 0x38
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e00c      	b.n	8001fc8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68f9      	ldr	r1, [r7, #12]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 f8a4 	bl	800511c <USB_EPStopXfer>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d901      	bls.n	800201a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e067      	b.n	80020ea <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	429a      	cmp	r2, r3
 800202e:	d902      	bls.n	8002036 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3303      	adds	r3, #3
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203e:	e026      	b.n	800208e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	429a      	cmp	r2, r3
 8002054:	d902      	bls.n	800205c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3303      	adds	r3, #3
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	b29b      	uxth	r3, r3
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f003 f8fd 	bl	8005270 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	441a      	add	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	441a      	add	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d809      	bhi.n	80020b8 <PCD_WriteEmptyTxFifo+0xd6>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d203      	bcs.n	80020b8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1c3      	bne.n	8002040 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d811      	bhi.n	80020e8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	2201      	movs	r2, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	43db      	mvns	r3, r3
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020e4:	4013      	ands	r3, r2
 80020e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <PCD_EP_OutXfrComplete_int+0x98>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d124      	bne.n	8002174 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	e01a      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002160:	461a      	mov	r2, r3
 8002162:	2320      	movs	r3, #32
 8002164:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f005 fc8d 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
 8002172:	e005      	b.n	8002180 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f005 fc86 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	4f54310a 	.word	0x4f54310a

08002190 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <PCD_EP_OutSetupPacket_int+0x64>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d90e      	bls.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f005 fc3f 	bl	8007a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	4f54300a 	.word	0x4f54300a

080021f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
 8002204:	4613      	mov	r3, r2
 8002206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002216:	883b      	ldrh	r3, [r7, #0]
 8002218:	0419      	lsls	r1, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	430a      	orrs	r2, r1
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
 8002224:	e028      	b.n	8002278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e00d      	b.n	8002256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	3340      	adds	r3, #64	; 0x40
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	3b01      	subs	r3, #1
 800225c:	429a      	cmp	r2, r3
 800225e:	d3ec      	bcc.n	800223a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002260:	883b      	ldrh	r3, [r7, #0]
 8002262:	0418      	lsls	r0, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	3b01      	subs	r3, #1
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	4302      	orrs	r2, r0
 8002270:	3340      	adds	r3, #64	; 0x40
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	f043 0303 	orr.w	r3, r3, #3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_PWREx_GetVoltageRange+0x18>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40007000 	.word	0x40007000

0800232c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233a:	d130      	bne.n	800239e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002348:	d038      	beq.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2232      	movs	r2, #50	; 0x32
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9b      	lsrs	r3, r3, #18
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002370:	e002      	b.n	8002378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b01      	subs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d102      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f2      	bne.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002398:	d110      	bne.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e00f      	b.n	80023be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d007      	beq.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b4:	4a05      	ldr	r2, [pc, #20]	; (80023cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000
 80023d0:	20000004 	.word	0x20000004
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e6:	6053      	str	r3, [r2, #4]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40007000 	.word	0x40007000

080023f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3ca      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b97      	ldr	r3, [pc, #604]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80e4 	beq.w	80025f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_RCC_OscConfig+0x4a>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f040 808b 	bne.w	8002550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 8087 	bne.w	8002550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002442:	4b89      	ldr	r3, [pc, #548]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e3a2      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_RCC_OscConfig+0x7c>
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	e005      	b.n	8002480 <HAL_RCC_OscConfig+0x88>
 8002474:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	4293      	cmp	r3, r2
 8002482:	d223      	bcs.n	80024cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fd55 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e383      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	4b73      	ldr	r3, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a72      	ldr	r2, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	496d      	ldr	r1, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b6:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	4968      	ldr	r1, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
 80024ca:	e025      	b.n	8002518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4960      	ldr	r1, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ea:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	495b      	ldr	r1, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fd15 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e343      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002518:	f000 fc4a 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	4950      	ldr	r1, [pc, #320]	; (800266c <HAL_RCC_OscConfig+0x274>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_RCC_OscConfig+0x278>)
 8002536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_RCC_OscConfig+0x27c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f9f3 	bl	8000928 <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d052      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	e327      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002564:	f7fe fa30 	bl	80009c8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256c:	f7fe fa2c 	bl	80009c8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e310      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257e:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a36      	ldr	r2, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4931      	ldr	r1, [pc, #196]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	492c      	ldr	r1, [pc, #176]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e01a      	b.n	80025f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ca:	f7fe f9fd 	bl	80009c8 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d2:	f7fe f9f9 	bl	80009c8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2dd      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x1da>
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d074      	beq.n	80026ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b08      	cmp	r3, #8
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x21a>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d10e      	bne.n	800262a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d064      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d160      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e2ba      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x24a>
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e026      	b.n	8002690 <HAL_RCC_OscConfig+0x298>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264a:	d115      	bne.n	8002678 <HAL_RCC_OscConfig+0x280>
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 8002652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCC_OscConfig+0x270>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x298>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	08008268 	.word	0x08008268
 8002670:	20000004 	.word	0x20000004
 8002674:	20000008 	.word	0x20000008
 8002678:	4ba0      	ldr	r3, [pc, #640]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a9f      	ldr	r2, [pc, #636]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a9c      	ldr	r2, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe f996 	bl	80009c8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe f992 	bl	80009c8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e276      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2a8>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe f982 	bl	80009c8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe f97e 	bl	80009c8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e262      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d0>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d060      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x310>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d119      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d116      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x328>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e23f      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4973      	ldr	r1, [pc, #460]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	e040      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d023      	beq.n	8002786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6e      	ldr	r2, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe f93d 	bl	80009c8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe f939 	bl	80009c8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e21d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	495f      	ldr	r1, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e018      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe f919 	bl	80009c8 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe f915 	bl	80009c8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1f9      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03c      	beq.n	800283e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe f8f4 	bl	80009c8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe f8f0 	bl	80009c8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1d4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ef      	beq.n	80027e4 <HAL_RCC_OscConfig+0x3ec>
 8002804:	e01b      	b.n	800283e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe f8d7 	bl	80009c8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281e:	f7fe f8d3 	bl	80009c8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1b7      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ef      	bne.n	800281e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a6 	beq.w	8002998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10d      	bne.n	8002878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d118      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002890:	f7fe f89a 	bl	80009c8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe f896 	bl	80009c8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e17a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x508>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d8>
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	e029      	b.n	8002924 <HAL_RCC_OscConfig+0x52c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d115      	bne.n	8002904 <HAL_RCC_OscConfig+0x50c>
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_RCC_OscConfig+0x504>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x52c>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	4b9c      	ldr	r3, [pc, #624]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a9b      	ldr	r2, [pc, #620]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	4b98      	ldr	r3, [pc, #608]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	4a97      	ldr	r2, [pc, #604]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe f84c 	bl	80009c8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe f848 	bl	80009c8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e12a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294a:	4b8b      	ldr	r3, [pc, #556]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ed      	beq.n	8002934 <HAL_RCC_OscConfig+0x53c>
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe f835 	bl	80009c8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe f831 	bl	80009c8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e113      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002978:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ed      	bne.n	8002962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002986:	7ffb      	ldrb	r3, [r7, #31]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4a79      	ldr	r2, [pc, #484]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80fe 	beq.w	8002b9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80d0 	bne.w	8002b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ac:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d130      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	3b01      	subs	r3, #1
 80029cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d127      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ec:	2a07      	cmp	r2, #7
 80029ee:	bf14      	ite	ne
 80029f0:	2201      	movne	r2, #1
 80029f2:	2200      	moveq	r2, #0
 80029f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d113      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d06e      	beq.n	8002b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d069      	beq.n	8002afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0ad      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a4b      	ldr	r2, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a50:	f7fd ffba 	bl	80009c8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fd ffb6 	bl	80009c8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e09a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCC_OscConfig+0x784>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a90:	0212      	lsls	r2, r2, #8
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0552      	lsls	r2, r2, #21
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aa4:	0852      	lsrs	r2, r2, #1
 8002aa6:	3a01      	subs	r2, #1
 8002aa8:	0652      	lsls	r2, r2, #25
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab0:	0912      	lsrs	r2, r2, #4
 8002ab2:	0452      	lsls	r2, r2, #17
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4930      	ldr	r1, [pc, #192]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002abc:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2d      	ldr	r2, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad4:	f7fd ff78 	bl	80009c8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fd ff74 	bl	80009c8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e058      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afa:	e050      	b.n	8002b9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e04f      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d148      	bne.n	8002b9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b24:	f7fd ff50 	bl	80009c8 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fd ff4c 	bl	80009c8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e030      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x734>
 8002b4a:	e028      	b.n	8002b9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d023      	beq.n	8002b9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_RCC_OscConfig+0x780>)
 8002b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fd ff33 	bl	80009c8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b64:	e00c      	b.n	8002b80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fd ff2f 	bl	80009c8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d905      	bls.n	8002b80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e013      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_OscConfig+0x7b0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ec      	bne.n	8002b66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x7b0>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4905      	ldr	r1, [pc, #20]	; (8002ba8 <HAL_RCC_OscConfig+0x7b0>)
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_OscConfig+0x7b4>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
 8002b98:	e001      	b.n	8002b9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	feeefffc 	.word	0xfeeefffc

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0e7      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b75      	ldr	r3, [pc, #468]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4970      	ldr	r1, [pc, #448]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0cf      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d908      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4960      	ldr	r1, [pc, #384]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04c      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d121      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0a6      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d115      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e09a      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c66:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08e      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e086      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4943      	ldr	r1, [pc, #268]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c98:	f7fd fe96 	bl	80009c8 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fd fe92 	bl	80009c8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e06e      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d208      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	492b      	ldr	r1, [pc, #172]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d210      	bcs.n	8002d26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 0207 	bic.w	r2, r3, #7
 8002d0c:	4923      	ldr	r1, [pc, #140]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_ClockConfig+0x1ec>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e036      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4918      	ldr	r1, [pc, #96]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4910      	ldr	r1, [pc, #64]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d64:	f000 f824 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	490b      	ldr	r1, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1f4>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1fc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fdcd 	bl	8000928 <HAL_InitTick>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d92:	7afb      	ldrb	r3, [r7, #11]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08008268 	.word	0x08008268
 8002da8:	20000004 	.word	0x20000004
 8002dac:	20000008 	.word	0x20000008

08002db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d121      	bne.n	8002e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d11e      	bne.n	8002e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e005      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10d      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d102      	bne.n	8002e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e004      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d134      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d003      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0xac>
 8002e54:	e005      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	e002      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	617b      	str	r3, [r7, #20]
      break;
 8002e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	3301      	adds	r3, #1
 8002e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	fb03 f202 	mul.w	r2, r3, r2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	0e5b      	lsrs	r3, r3, #25
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08008280 	.word	0x08008280
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	007a1200 	.word	0x007a1200

08002ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ee4:	f7ff fff0 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4904      	ldr	r1, [pc, #16]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08008278 	.word	0x08008278

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f10:	f7ff ffda 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0adb      	lsrs	r3, r3, #11
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08008278 	.word	0x08008278

08002f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f50:	f7ff f9de 	bl	8002310 <HAL_PWREx_GetVoltageRange>
 8002f54:	6178      	str	r0, [r7, #20]
 8002f56:	e014      	b.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f70:	f7ff f9ce 	bl	8002310 <HAL_PWREx_GetVoltageRange>
 8002f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f88:	d10b      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d919      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2ba0      	cmp	r3, #160	; 0xa0
 8002f94:	d902      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f96:	2302      	movs	r3, #2
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e013      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e010      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d902      	bls.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa8:	2303      	movs	r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e00a      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d102      	bne.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e004      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d101      	bne.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 0207 	bic.w	r2, r3, #7
 8002fcc:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003000:	2300      	movs	r3, #0
 8003002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003004:	2300      	movs	r3, #0
 8003006:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	2b00      	cmp	r3, #0
 8003012:	d041      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301c:	d02a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800301e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003022:	d824      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800302a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800302e:	d81e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003038:	d010      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800303a:	e018      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800303c:	4b86      	ldr	r3, [pc, #536]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a85      	ldr	r2, [pc, #532]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003048:	e015      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f000 facb 	bl	80035ec <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800305a:	e00c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3320      	adds	r3, #32
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fbb6 	bl	80037d4 <RCCEx_PLLSAI2_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	74fb      	strb	r3, [r7, #19]
      break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800307c:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308a:	4973      	ldr	r1, [pc, #460]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d041      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ac:	d02a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b2:	d824      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030be:	d81e      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d010      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ca:	e018      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030cc:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a61      	ldr	r2, [pc, #388]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d8:	e015      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fa83 	bl	80035ec <RCCEx_PLLSAI1_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ea:	e00c      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3320      	adds	r3, #32
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb6e 	bl	80037d4 <RCCEx_PLLSAI2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030fc:	e003      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	74fb      	strb	r3, [r7, #19]
      break;
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800310c:	4b52      	ldr	r3, [pc, #328]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311a:	494f      	ldr	r1, [pc, #316]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a0 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b41      	ldr	r3, [pc, #260]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	4a40      	ldr	r2, [pc, #256]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	; 0x58
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003168:	2301      	movs	r3, #1
 800316a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3a      	ldr	r2, [pc, #232]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003178:	f7fd fc26 	bl	80009c8 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fd fc22 	bl	80009c8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	74fb      	strb	r3, [r7, #19]
        break;
 8003192:	e005      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ef      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d15c      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d019      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fd fbe1 	bl	80009c8 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003208:	e00b      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fd fbdd 	bl	80009c8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d902      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	74fb      	strb	r3, [r7, #19]
            break;
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ec      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
 8003254:	e006      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003264:	7c7b      	ldrb	r3, [r7, #17]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326a:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a9d      	ldr	r2, [pc, #628]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003282:	4b98      	ldr	r3, [pc, #608]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 0203 	bic.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	4994      	ldr	r1, [pc, #592]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a4:	4b8f      	ldr	r3, [pc, #572]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 020c 	bic.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	498c      	ldr	r1, [pc, #560]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c6:	4b87      	ldr	r3, [pc, #540]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4983      	ldr	r1, [pc, #524]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e8:	4b7e      	ldr	r3, [pc, #504]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	497b      	ldr	r1, [pc, #492]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800330a:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	4972      	ldr	r1, [pc, #456]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332c:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	496a      	ldr	r1, [pc, #424]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	4961      	ldr	r1, [pc, #388]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003370:	4b5c      	ldr	r3, [pc, #368]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	4959      	ldr	r1, [pc, #356]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	4950      	ldr	r1, [pc, #320]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	4948      	ldr	r1, [pc, #288]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	493f      	ldr	r1, [pc, #252]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d028      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f8:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	4937      	ldr	r1, [pc, #220]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d106      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
 8003424:	e011      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f8d8 	bl	80035ec <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	491f      	ldr	r1, [pc, #124]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003480:	60d3      	str	r3, [r2, #12]
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f8a9 	bl	80035ec <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02b      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d2:	d109      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a02      	ldr	r2, [pc, #8]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034de:	60d3      	str	r3, [r2, #12]
 80034e0:	e014      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f877 	bl	80035ec <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003526:	4928      	ldr	r1, [pc, #160]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003536:	d10d      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2102      	movs	r1, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f854 	bl	80035ec <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d014      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3320      	adds	r3, #32
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f935 	bl	80037d4 <RCCEx_PLLSAI2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003592:	490d      	ldr	r1, [pc, #52]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b6:	4904      	ldr	r1, [pc, #16]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035be:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000

080035cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000

080035ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035fa:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003606:	4b72      	ldr	r3, [pc, #456]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0203 	and.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d10d      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
       ||
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800361e:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
       ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d047      	beq.n	80036c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	e044      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d018      	beq.n	8003672 <RCCEx_PLLSAI1_Config+0x86>
 8003640:	2b03      	cmp	r3, #3
 8003642:	d825      	bhi.n	8003690 <RCCEx_PLLSAI1_Config+0xa4>
 8003644:	2b01      	cmp	r3, #1
 8003646:	d002      	beq.n	800364e <RCCEx_PLLSAI1_Config+0x62>
 8003648:	2b02      	cmp	r3, #2
 800364a:	d009      	beq.n	8003660 <RCCEx_PLLSAI1_Config+0x74>
 800364c:	e020      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800364e:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11d      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365e:	e01a      	b.n	8003696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003660:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003670:	e013      	b.n	800369a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003672:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800368e:	e006      	b.n	800369e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e004      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800369e:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036a6:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	430b      	orrs	r3, r1
 80036bc:	4944      	ldr	r1, [pc, #272]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d17d      	bne.n	80037c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036c8:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d4:	f7fd f978 	bl	80009c8 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036da:	e009      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036dc:	f7fd f974 	bl	80009c8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	73fb      	strb	r3, [r7, #15]
        break;
 80036ee:	e005      	b.n	80036fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ef      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d160      	bne.n	80037c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003708:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6892      	ldr	r2, [r2, #8]
 8003718:	0211      	lsls	r1, r2, #8
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68d2      	ldr	r2, [r2, #12]
 800371e:	0912      	lsrs	r2, r2, #4
 8003720:	0452      	lsls	r2, r2, #17
 8003722:	430a      	orrs	r2, r1
 8003724:	492a      	ldr	r1, [pc, #168]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	610b      	str	r3, [r1, #16]
 800372a:	e027      	b.n	800377c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d112      	bne.n	8003758 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800373a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6892      	ldr	r2, [r2, #8]
 8003742:	0211      	lsls	r1, r2, #8
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6912      	ldr	r2, [r2, #16]
 8003748:	0852      	lsrs	r2, r2, #1
 800374a:	3a01      	subs	r2, #1
 800374c:	0552      	lsls	r2, r2, #21
 800374e:	430a      	orrs	r2, r1
 8003750:	491f      	ldr	r1, [pc, #124]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	610b      	str	r3, [r1, #16]
 8003756:	e011      	b.n	800377c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	0211      	lsls	r1, r2, #8
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6952      	ldr	r2, [r2, #20]
 800376e:	0852      	lsrs	r2, r2, #1
 8003770:	3a01      	subs	r2, #1
 8003772:	0652      	lsls	r2, r2, #25
 8003774:	430a      	orrs	r2, r1
 8003776:	4916      	ldr	r1, [pc, #88]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd f91e 	bl	80009c8 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378e:	e009      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003790:	f7fd f91a 	bl	80009c8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	73fb      	strb	r3, [r7, #15]
          break;
 80037a2:	e005      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	4904      	ldr	r1, [pc, #16]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000

080037d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d10d      	bne.n	800381a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
       ||
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
       ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d047      	beq.n	80038aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e044      	b.n	80038aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d018      	beq.n	800385a <RCCEx_PLLSAI2_Config+0x86>
 8003828:	2b03      	cmp	r3, #3
 800382a:	d825      	bhi.n	8003878 <RCCEx_PLLSAI2_Config+0xa4>
 800382c:	2b01      	cmp	r3, #1
 800382e:	d002      	beq.n	8003836 <RCCEx_PLLSAI2_Config+0x62>
 8003830:	2b02      	cmp	r3, #2
 8003832:	d009      	beq.n	8003848 <RCCEx_PLLSAI2_Config+0x74>
 8003834:	e020      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003836:	4b55      	ldr	r3, [pc, #340]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11d      	bne.n	800387e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003846:	e01a      	b.n	800387e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d116      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e013      	b.n	8003882 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800385a:	4b4c      	ldr	r3, [pc, #304]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003866:	4b49      	ldr	r3, [pc, #292]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003876:	e006      	b.n	8003886 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
      break;
 800387c:	e004      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003886:	bf00      	nop
    }

    if(status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388e:	4b3f      	ldr	r3, [pc, #252]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	430b      	orrs	r3, r1
 80038a4:	4939      	ldr	r1, [pc, #228]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d167      	bne.n	8003980 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a35      	ldr	r2, [pc, #212]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fd f884 	bl	80009c8 <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038c2:	e009      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c4:	f7fd f880 	bl	80009c8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	73fb      	strb	r3, [r7, #15]
        break;
 80038d6:	e005      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ef      	bne.n	80038c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d14a      	bne.n	8003980 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d111      	bne.n	8003914 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6892      	ldr	r2, [r2, #8]
 8003900:	0211      	lsls	r1, r2, #8
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68d2      	ldr	r2, [r2, #12]
 8003906:	0912      	lsrs	r2, r2, #4
 8003908:	0452      	lsls	r2, r2, #17
 800390a:	430a      	orrs	r2, r1
 800390c:	491f      	ldr	r1, [pc, #124]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	614b      	str	r3, [r1, #20]
 8003912:	e011      	b.n	8003938 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003914:	4b1d      	ldr	r3, [pc, #116]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800391c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6892      	ldr	r2, [r2, #8]
 8003924:	0211      	lsls	r1, r2, #8
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6912      	ldr	r2, [r2, #16]
 800392a:	0852      	lsrs	r2, r2, #1
 800392c:	3a01      	subs	r2, #1
 800392e:	0652      	lsls	r2, r2, #25
 8003930:	430a      	orrs	r2, r1
 8003932:	4916      	ldr	r1, [pc, #88]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	4313      	orrs	r3, r2
 8003936:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a13      	ldr	r2, [pc, #76]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd f840 	bl	80009c8 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800394a:	e009      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800394c:	f7fd f83c 	bl	80009c8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	73fb      	strb	r3, [r7, #15]
          break;
 800395e:	e005      	b.n	800396c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4904      	ldr	r1, [pc, #16]	; (800398c <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	4313      	orrs	r3, r2
 800397e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e040      	b.n	8003a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fc ff12 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fae0 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f825 	bl	8003a2c <UART_SetConfig>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e01b      	b.n	8003a24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb5f 	bl	80040e0 <UART_CheckIdleState>
 8003a22:	4603      	mov	r3, r0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b08a      	sub	sp, #40	; 0x28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4ba4      	ldr	r3, [pc, #656]	; (8003cec <UART_SetConfig+0x2c0>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a99      	ldr	r2, [pc, #612]	; (8003cf0 <UART_SetConfig+0x2c4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	4313      	orrs	r3, r2
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a90      	ldr	r2, [pc, #576]	; (8003cf4 <UART_SetConfig+0x2c8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d126      	bne.n	8003b04 <UART_SetConfig+0xd8>
 8003ab6:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d81b      	bhi.n	8003afc <UART_SetConfig+0xd0>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <UART_SetConfig+0xa0>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af5 	.word	0x08003af5
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e116      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e112      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e10e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e10a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e106      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <UART_SetConfig+0x2d0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d138      	bne.n	8003b80 <UART_SetConfig+0x154>
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d82d      	bhi.n	8003b78 <UART_SetConfig+0x14c>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0xf8>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b79 	.word	0x08003b79
 8003b2c:	08003b79 	.word	0x08003b79
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e0d8      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e0d4      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e0d0      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e0cc      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e0c8      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <UART_SetConfig+0x2d4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d125      	bne.n	8003bd6 <UART_SetConfig+0x1aa>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b94:	2b30      	cmp	r3, #48	; 0x30
 8003b96:	d016      	beq.n	8003bc6 <UART_SetConfig+0x19a>
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d818      	bhi.n	8003bce <UART_SetConfig+0x1a2>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d00a      	beq.n	8003bb6 <UART_SetConfig+0x18a>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d814      	bhi.n	8003bce <UART_SetConfig+0x1a2>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <UART_SetConfig+0x182>
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d008      	beq.n	8003bbe <UART_SetConfig+0x192>
 8003bac:	e00f      	b.n	8003bce <UART_SetConfig+0x1a2>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb4:	e0ad      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbc:	e0a9      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc4:	e0a5      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bcc:	e0a1      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e09d      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <UART_SetConfig+0x2d8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <UART_SetConfig+0x200>
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bea:	2bc0      	cmp	r3, #192	; 0xc0
 8003bec:	d016      	beq.n	8003c1c <UART_SetConfig+0x1f0>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d818      	bhi.n	8003c24 <UART_SetConfig+0x1f8>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d00a      	beq.n	8003c0c <UART_SetConfig+0x1e0>
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d814      	bhi.n	8003c24 <UART_SetConfig+0x1f8>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1d8>
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d008      	beq.n	8003c14 <UART_SetConfig+0x1e8>
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x1f8>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e082      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e07e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e07a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e076      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e072      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <UART_SetConfig+0x2dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12a      	bne.n	8003c8c <UART_SetConfig+0x260>
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c44:	d01a      	beq.n	8003c7c <UART_SetConfig+0x250>
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0x258>
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c50:	d00c      	beq.n	8003c6c <UART_SetConfig+0x240>
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d815      	bhi.n	8003c84 <UART_SetConfig+0x258>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <UART_SetConfig+0x238>
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d008      	beq.n	8003c74 <UART_SetConfig+0x248>
 8003c62:	e00f      	b.n	8003c84 <UART_SetConfig+0x258>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e052      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e04e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7a:	e04a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e046      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e042      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <UART_SetConfig+0x2c4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d13a      	bne.n	8003d0c <UART_SetConfig+0x2e0>
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <UART_SetConfig+0x2cc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca4:	d01a      	beq.n	8003cdc <UART_SetConfig+0x2b0>
 8003ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003caa:	d81b      	bhi.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb0:	d00c      	beq.n	8003ccc <UART_SetConfig+0x2a0>
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb6:	d815      	bhi.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <UART_SetConfig+0x298>
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc0:	d008      	beq.n	8003cd4 <UART_SetConfig+0x2a8>
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x2b8>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e022      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd2:	e01e      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cda:	e01a      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e016      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e012      	b.n	8003d12 <UART_SetConfig+0x2e6>
 8003cec:	efff69f3 	.word	0xefff69f3
 8003cf0:	40008000 	.word	0x40008000
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40004400 	.word	0x40004400
 8003d00:	40004800 	.word	0x40004800
 8003d04:	40004c00 	.word	0x40004c00
 8003d08:	40005000 	.word	0x40005000
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a9f      	ldr	r2, [pc, #636]	; (8003f94 <UART_SetConfig+0x568>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d17a      	bne.n	8003e12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d824      	bhi.n	8003d6e <UART_SetConfig+0x342>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0x300>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d5f 	.word	0x08003d5f
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d50:	f7ff f8c6 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8003d54:	61f8      	str	r0, [r7, #28]
        break;
 8003d56:	e010      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d58:	4b8f      	ldr	r3, [pc, #572]	; (8003f98 <UART_SetConfig+0x56c>)
 8003d5a:	61fb      	str	r3, [r7, #28]
        break;
 8003d5c:	e00d      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7ff f827 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8003d62:	61f8      	str	r0, [r7, #28]
        break;
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6a:	61fb      	str	r3, [r7, #28]
        break;
 8003d6c:	e005      	b.n	8003d7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80fb 	beq.w	8003f78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d305      	bcc.n	8003d9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d903      	bls.n	8003da6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da4:	e0e8      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2200      	movs	r2, #0
 8003daa:	461c      	mov	r4, r3
 8003dac:	4615      	mov	r5, r2
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	022b      	lsls	r3, r5, #8
 8003db8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dbc:	0222      	lsls	r2, r4, #8
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	6849      	ldr	r1, [r1, #4]
 8003dc2:	0849      	lsrs	r1, r1, #1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4681      	mov	r9, r0
 8003dca:	eb12 0a08 	adds.w	sl, r2, r8
 8003dce:	eb43 0b09 	adc.w	fp, r3, r9
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de0:	4650      	mov	r0, sl
 8003de2:	4659      	mov	r1, fp
 8003de4:	f7fc f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df6:	d308      	bcc.n	8003e0a <UART_SetConfig+0x3de>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d204      	bcs.n	8003e0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e0b6      	b.n	8003f78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e10:	e0b2      	b.n	8003f78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d15e      	bne.n	8003eda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d828      	bhi.n	8003e76 <UART_SetConfig+0x44a>
 8003e24:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <UART_SetConfig+0x400>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7ff f846 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8003e54:	61f8      	str	r0, [r7, #28]
        break;
 8003e56:	e014      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff f858 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <UART_SetConfig+0x56c>)
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe ffa3 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8003e6a:	61f8      	str	r0, [r7, #28]
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d077      	beq.n	8003f78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	d916      	bls.n	8003ed2 <UART_SetConfig+0x4a6>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d212      	bcs.n	8003ed2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f023 030f 	bic.w	r3, r3, #15
 8003eb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	8afb      	ldrh	r3, [r7, #22]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	8afa      	ldrh	r2, [r7, #22]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e052      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ed8:	e04e      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d827      	bhi.n	8003f32 <UART_SetConfig+0x506>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <UART_SetConfig+0x4bc>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe ffe8 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8003f10:	61f8      	str	r0, [r7, #28]
        break;
 8003f12:	e014      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fe fffa 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
        break;
 8003f1a:	e010      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <UART_SetConfig+0x56c>)
 8003f1e:	61fb      	str	r3, [r7, #28]
        break;
 8003f20:	e00d      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe ff45 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8003f26:	61f8      	str	r0, [r7, #28]
        break;
 8003f28:	e009      	b.n	8003f3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	61fb      	str	r3, [r7, #28]
        break;
 8003f30:	e005      	b.n	8003f3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	085a      	lsrs	r2, r3, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d909      	bls.n	8003f72 <UART_SetConfig+0x546>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d205      	bcs.n	8003f72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e002      	b.n	8003f78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f92:	bf00      	nop
 8003f94:	40008000 	.word	0x40008000
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b098      	sub	sp, #96	; 0x60
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fc fc6a 	bl	80009c8 <HAL_GetTick>
 80040f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d12e      	bne.n	8004162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f88c 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800412c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004132:	653b      	str	r3, [r7, #80]	; 0x50
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	647b      	str	r3, [r7, #68]	; 0x44
 800413e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800414a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e062      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d149      	bne.n	8004204 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f856 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03c      	beq.n	8004204 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	623b      	str	r3, [r7, #32]
   return(result);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
 80041aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041dc:	61fa      	str	r2, [r7, #28]
 80041de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e011      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3758      	adds	r7, #88	; 0x58
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	e049      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d045      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc fbbd 	bl	80009c8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x30>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e048      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d031      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b08      	cmp	r3, #8
 800427e:	d110      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f838 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2208      	movs	r2, #8
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e029      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d111      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f81e 	bl	80042fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0a6      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fe:	b480      	push	{r7}
 8004300:	b095      	sub	sp, #84	; 0x54
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	643b      	str	r3, [r7, #64]	; 0x40
 8004326:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800432a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	61fb      	str	r3, [r7, #28]
   return(result);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	60bb      	str	r3, [r7, #8]
   return(result);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f023 0310 	bic.w	r3, r3, #16
 8004388:	647b      	str	r3, [r7, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043ba:	bf00      	nop
 80043bc:	3754      	adds	r7, #84	; 0x54
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c6:	b084      	sub	sp, #16
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	f107 001c 	add.w	r0, r7, #28
 80043d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 fa1d 	bl	8005824 <USB_CoreReset>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80043ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004400:	e005      	b.n	800440e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441a:	b004      	add	sp, #16
 800441c:	4770      	bx	lr
	...

08004420 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d165      	bne.n	8004500 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a3e      	ldr	r2, [pc, #248]	; (8004530 <USB_SetTurnaroundTime+0x110>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <USB_SetTurnaroundTime+0x2a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a3d      	ldr	r2, [pc, #244]	; (8004534 <USB_SetTurnaroundTime+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d202      	bcs.n	800444a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004444:	230f      	movs	r3, #15
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e05c      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4a39      	ldr	r2, [pc, #228]	; (8004534 <USB_SetTurnaroundTime+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d306      	bcc.n	8004460 <USB_SetTurnaroundTime+0x40>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a38      	ldr	r2, [pc, #224]	; (8004538 <USB_SetTurnaroundTime+0x118>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d202      	bcs.n	8004460 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800445a:	230e      	movs	r3, #14
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e051      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a35      	ldr	r2, [pc, #212]	; (8004538 <USB_SetTurnaroundTime+0x118>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d306      	bcc.n	8004476 <USB_SetTurnaroundTime+0x56>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <USB_SetTurnaroundTime+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d202      	bcs.n	8004476 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004470:	230d      	movs	r3, #13
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e046      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4a30      	ldr	r2, [pc, #192]	; (800453c <USB_SetTurnaroundTime+0x11c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d306      	bcc.n	800448c <USB_SetTurnaroundTime+0x6c>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <USB_SetTurnaroundTime+0x120>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d802      	bhi.n	800448c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004486:	230c      	movs	r3, #12
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e03b      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <USB_SetTurnaroundTime+0x120>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d906      	bls.n	80044a2 <USB_SetTurnaroundTime+0x82>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <USB_SetTurnaroundTime+0x124>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d802      	bhi.n	80044a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800449c:	230b      	movs	r3, #11
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e030      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <USB_SetTurnaroundTime+0x124>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d906      	bls.n	80044b8 <USB_SetTurnaroundTime+0x98>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <USB_SetTurnaroundTime+0x128>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d802      	bhi.n	80044b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044b2:	230a      	movs	r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e025      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a23      	ldr	r2, [pc, #140]	; (8004548 <USB_SetTurnaroundTime+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d906      	bls.n	80044ce <USB_SetTurnaroundTime+0xae>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <USB_SetTurnaroundTime+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d202      	bcs.n	80044ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044c8:	2309      	movs	r3, #9
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e01a      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a1e      	ldr	r2, [pc, #120]	; (800454c <USB_SetTurnaroundTime+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d306      	bcc.n	80044e4 <USB_SetTurnaroundTime+0xc4>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <USB_SetTurnaroundTime+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d802      	bhi.n	80044e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044de:	2308      	movs	r3, #8
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e00f      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <USB_SetTurnaroundTime+0x130>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d906      	bls.n	80044fa <USB_SetTurnaroundTime+0xda>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a19      	ldr	r2, [pc, #100]	; (8004554 <USB_SetTurnaroundTime+0x134>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d202      	bcs.n	80044fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044f4:	2307      	movs	r3, #7
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e004      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044fa:	2306      	movs	r3, #6
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e001      	b.n	8004504 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004500:	2309      	movs	r3, #9
 8004502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	00d8acbf 	.word	0x00d8acbf
 8004534:	00e4e1c0 	.word	0x00e4e1c0
 8004538:	00f42400 	.word	0x00f42400
 800453c:	01067380 	.word	0x01067380
 8004540:	011a499f 	.word	0x011a499f
 8004544:	01312cff 	.word	0x01312cff
 8004548:	014ca43f 	.word	0x014ca43f
 800454c:	016e3600 	.word	0x016e3600
 8004550:	01a6ab1f 	.word	0x01a6ab1f
 8004554:	01e84800 	.word	0x01e84800

08004558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d115      	bne.n	80045ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ca:	2001      	movs	r0, #1
 80045cc:	f7fc fa08 	bl	80009e0 <HAL_Delay>
      ms++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f001 f8ab 	bl	8005732 <USB_GetMode>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d01e      	beq.n	8004620 <USB_SetCurrentMode+0x84>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b31      	cmp	r3, #49	; 0x31
 80045e6:	d9f0      	bls.n	80045ca <USB_SetCurrentMode+0x2e>
 80045e8:	e01a      	b.n	8004620 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d115      	bne.n	800461c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7fc f9ef 	bl	80009e0 <HAL_Delay>
      ms++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 f892 	bl	8005732 <USB_GetMode>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <USB_SetCurrentMode+0x84>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b31      	cmp	r3, #49	; 0x31
 8004618:	d9f0      	bls.n	80045fc <USB_SetCurrentMode+0x60>
 800461a:	e001      	b.n	8004620 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e005      	b.n	800462c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b32      	cmp	r3, #50	; 0x32
 8004624:	d101      	bne.n	800462a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004634:	b084      	sub	sp, #16
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e009      	b.n	8004668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3340      	adds	r3, #64	; 0x40
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3301      	adds	r3, #1
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0e      	cmp	r3, #14
 800466c:	d9f2      	bls.n	8004654 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11c      	bne.n	80046ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e005      	b.n	80046ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c0:	461a      	mov	r2, r3
 80046c2:	2300      	movs	r3, #0
 80046c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046c6:	2103      	movs	r1, #3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f959 	bl	8004980 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046ce:	2110      	movs	r1, #16
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f8f1 	bl	80048b8 <USB_FlushTxFifo>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f91d 	bl	8004920 <USB_FlushRxFifo>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	461a      	mov	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	461a      	mov	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e043      	b.n	80047a2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004730:	d118      	bne.n	8004764 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	461a      	mov	r2, r3
 8004746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e013      	b.n	8004776 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	461a      	mov	r2, r3
 800475c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e008      	b.n	8004776 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	461a      	mov	r2, r3
 8004796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800479a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	3301      	adds	r3, #1
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d3b7      	bcc.n	800471a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e043      	b.n	8004838 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c6:	d118      	bne.n	80047fa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e013      	b.n	800480c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e008      	b.n	800480c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	461a      	mov	r2, r3
 800482c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d3b7      	bcc.n	80047b0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004852:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004860:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <USB_DevInit+0x280>)
 8004874:	4313      	orrs	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f043 0208 	orr.w	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d107      	bne.n	80048a2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ae:	b004      	add	sp, #16
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	803c3800 	.word	0x803c3800

080048b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <USB_FlushTxFifo+0x64>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e01b      	b.n	8004910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	daf2      	bge.n	80048c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	019b      	lsls	r3, r3, #6
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <USB_FlushTxFifo+0x64>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e006      	b.n	8004910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d0f0      	beq.n	80048f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	00030d40 	.word	0x00030d40

08004920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a11      	ldr	r2, [pc, #68]	; (800497c <USB_FlushRxFifo+0x5c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e018      	b.n	8004970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	daf2      	bge.n	800492c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2210      	movs	r2, #16
 800494e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <USB_FlushRxFifo+0x5c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e006      	b.n	8004970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d0f0      	beq.n	8004950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	00030d40 	.word	0x00030d40

08004980 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b087      	sub	sp, #28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0306 	and.w	r3, r3, #6
 80049ca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d002      	beq.n	80049d8 <USB_GetDevSpeed+0x26>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d102      	bne.n	80049de <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049d8:	2302      	movs	r3, #2
 80049da:	75fb      	strb	r3, [r7, #23]
 80049dc:	e001      	b.n	80049e2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80049de:	230f      	movs	r3, #15
 80049e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d13a      	bne.n	8004a82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	68f9      	ldr	r1, [r7, #12]
 8004a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d155      	bne.n	8004af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	791b      	ldrb	r3, [r3, #4]
 8004a5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	059b      	lsls	r3, r3, #22
 8004a66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e036      	b.n	8004af0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	2101      	movs	r1, #1
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11a      	bne.n	8004af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d161      	bne.n	8004be0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	d11f      	bne.n	8004b74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b94:	4013      	ands	r3, r2
 8004b96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	0159      	lsls	r1, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	440b      	add	r3, r1
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <USB_DeactivateEndpoint+0x1b0>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
 8004bde:	e060      	b.n	8004ca2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf6:	d11f      	bne.n	8004c38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	43db      	mvns	r3, r3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <USB_DeactivateEndpoint+0x1b4>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	ec337800 	.word	0xec337800
 8004cb4:	eff37800 	.word	0xeff37800

08004cb8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	f040 8128 	bne.w	8004f26 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d132      	bne.n	8004d44 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	0cdb      	lsrs	r3, r3, #19
 8004d3e:	04db      	lsls	r3, r3, #19
 8004d40:	6113      	str	r3, [r2, #16]
 8004d42:	e092      	b.n	8004e6a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	0cdb      	lsrs	r3, r3, #19
 8004d60:	04db      	lsls	r3, r3, #19
 8004d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d86:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d11a      	bne.n	8004dc4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d903      	bls.n	8004da2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc0:	6113      	str	r3, [r2, #16]
 8004dc2:	e01b      	b.n	8004dfc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6919      	ldr	r1, [r3, #16]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	440b      	add	r3, r1
 8004ddc:	1e59      	subs	r1, r3, #1
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004de8:	4b8d      	ldr	r3, [pc, #564]	; (8005020 <USB_EPStartXfer+0x368>)
 8004dea:	400b      	ands	r3, r1
 8004dec:	6939      	ldr	r1, [r7, #16]
 8004dee:	0148      	lsls	r0, r1, #5
 8004df0:	6979      	ldr	r1, [r7, #20]
 8004df2:	4401      	add	r1, r0
 8004df4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e12:	6939      	ldr	r1, [r7, #16]
 8004e14:	0148      	lsls	r0, r1, #5
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	4401      	add	r1, r0
 8004e1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d11f      	bne.n	8004e6a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e68:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e88:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d015      	beq.n	8004ebe <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8139 	beq.w	800510e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	634b      	str	r3, [r1, #52]	; 0x34
 8004ebc:	e127      	b.n	800510e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d110      	bne.n	8004ef0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00f      	b.n	8004f10 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68d9      	ldr	r1, [r3, #12]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9a6 	bl	8005270 <USB_WritePacket>
 8004f24:	e0f3      	b.n	800510e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f40:	0cdb      	lsrs	r3, r3, #19
 8004f42:	04db      	lsls	r3, r3, #19
 8004f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f68:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d12f      	bne.n	8004fd0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9e:	6939      	ldr	r1, [r7, #16]
 8004fa0:	0148      	lsls	r0, r1, #5
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	4401      	add	r1, r0
 8004fa6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004faa:	4313      	orrs	r3, r2
 8004fac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fcc:	6113      	str	r3, [r2, #16]
 8004fce:	e061      	b.n	8005094 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d125      	bne.n	8005024 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	0148      	lsls	r0, r1, #5
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	4401      	add	r1, r0
 8004ff6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501c:	6113      	str	r3, [r2, #16]
 800501e:	e039      	b.n	8005094 <USB_EPStartXfer+0x3dc>
 8005020:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4413      	add	r3, r2
 800502e:	1e5a      	subs	r2, r3, #1
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	89fa      	ldrh	r2, [r7, #14]
 8005040:	fb03 f202 	mul.w	r2, r3, r2
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	89fb      	ldrh	r3, [r7, #14]
 8005058:	04d9      	lsls	r1, r3, #19
 800505a:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <USB_EPStartXfer+0x460>)
 800505c:	400b      	ands	r3, r1
 800505e:	6939      	ldr	r1, [r7, #16]
 8005060:	0148      	lsls	r0, r1, #5
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	4401      	add	r1, r0
 8005066:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800506a:	4313      	orrs	r3, r2
 800506c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005084:	6939      	ldr	r1, [r7, #16]
 8005086:	0148      	lsls	r0, r1, #5
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	4401      	add	r1, r0
 800508c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005090:	4313      	orrs	r3, r2
 8005092:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	791b      	ldrb	r3, [r3, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d128      	bne.n	80050ee <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e00f      	b.n	80050ee <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005108:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800510c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	1ff80000 	.word	0x1ff80000

0800511c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d14a      	bne.n	80051d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005152:	f040 8086 	bne.w	8005262 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005178:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d902      	bls.n	80051b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
          break;
 80051b2:	e056      	b.n	8005262 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051cc:	d0e7      	beq.n	800519e <USB_EPStopXfer+0x82>
 80051ce:	e048      	b.n	8005262 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e8:	d13b      	bne.n	8005262 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800520c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005230:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f242 7210 	movw	r2, #10000	; 0x2710
 800523e:	4293      	cmp	r3, r2
 8005240:	d902      	bls.n	8005248 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
          break;
 8005246:	e00c      	b.n	8005262 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005260:	d0e7      	beq.n	8005232 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	460b      	mov	r3, r1
 8005280:	71fb      	strb	r3, [r7, #7]
 8005282:	4613      	mov	r3, r2
 8005284:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	3303      	adds	r3, #3
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e018      	b.n	80052ce <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	031a      	lsls	r2, r3, #12
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a8:	461a      	mov	r2, r3
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6013      	str	r3, [r2, #0]
    pSrc++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3e2      	bcc.n	800529c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3724      	adds	r7, #36	; 0x24
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b08b      	sub	sp, #44	; 0x2c
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	e014      	b.n	800533a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	601a      	str	r2, [r3, #0]
    pDest++;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	3301      	adds	r3, #1
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	3301      	adds	r3, #1
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	3301      	adds	r3, #1
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d3e6      	bcc.n	8005310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005342:	8bfb      	ldrh	r3, [r7, #30]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01e      	beq.n	8005386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005352:	461a      	mov	r2, r3
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	701a      	strb	r2, [r3, #0]
      i++;
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	3301      	adds	r3, #1
 8005372:	623b      	str	r3, [r7, #32]
      pDest++;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	3301      	adds	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800537a:	8bfb      	ldrh	r3, [r7, #30]
 800537c:	3b01      	subs	r3, #1
 800537e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ea      	bne.n	800535c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005388:	4618      	mov	r0, r3
 800538a:	372c      	adds	r7, #44	; 0x2c
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d12c      	bne.n	800540a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	db12      	blt.n	80053e8 <USB_EPSetStall+0x54>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00f      	beq.n	80053e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e02b      	b.n	8005462 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	db12      	blt.n	8005442 <USB_EPSetStall+0xae>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005440:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	440a      	add	r2, r1
 8005458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005460:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d128      	bne.n	80054de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	791b      	ldrb	r3, [r3, #4]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d003      	beq.n	80054bc <USB_EPClearStall+0x4c>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	791b      	ldrb	r3, [r3, #4]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d138      	bne.n	800552e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e027      	b.n	800552e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	791b      	ldrb	r3, [r3, #4]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d003      	beq.n	800550e <USB_EPClearStall+0x9e>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	791b      	ldrb	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d10f      	bne.n	800552e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800555e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b6:	f023 0302 	bic.w	r3, r3, #2
 80055ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055e4:	f023 0303 	bic.w	r3, r3, #3
 80055e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4013      	ands	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005624:	68fb      	ldr	r3, [r7, #12]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	0c1b      	lsrs	r3, r3, #16
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	b29b      	uxth	r3, r3
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c8:	68bb      	ldr	r3, [r7, #8]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b087      	sub	sp, #28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	01db      	lsls	r3, r3, #7
 8005708:	b2db      	uxtb	r3, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4013      	ands	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005724:	68bb      	ldr	r3, [r7, #8]
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0301 	and.w	r3, r3, #1
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	333c      	adds	r3, #60	; 0x3c
 80057a6:	3304      	adds	r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <USB_EP0_OutStart+0x8c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d90a      	bls.n	80057ca <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c4:	d101      	bne.n	80057ca <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e024      	b.n	8005814 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f8:	f043 0318 	orr.w	r3, r3, #24
 80057fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005810:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	4f54300a 	.word	0x4f54300a

08005824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <USB_CoreReset+0x64>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e01b      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	daf2      	bge.n	8005830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f043 0201 	orr.w	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <USB_CoreReset+0x64>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d0f0      	beq.n	800585a <USB_CoreReset+0x36>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	00030d40 	.word	0x00030d40

0800588c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005898:	2018      	movs	r0, #24
 800589a:	f002 fc65 	bl	8008168 <USBD_static_malloc>
 800589e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	32b0      	adds	r2, #176	; 0xb0
 80058b0:	2100      	movs	r1, #0
 80058b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e08a      	b.n	80059d0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	32b0      	adds	r2, #176	; 0xb0
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	32b0      	adds	r2, #176	; 0xb0
 80058d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7c1b      	ldrb	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11b      	bne.n	800591e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <USBD_CUSTOM_HID_Init+0x14c>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f003 020f 	and.w	r2, r3, #15
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	3326      	adds	r3, #38	; 0x26
 80058fc:	2205      	movs	r2, #5
 80058fe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <USBD_CUSTOM_HID_Init+0x150>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005918:	2205      	movs	r2, #5
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e01a      	b.n	8005954 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <USBD_CUSTOM_HID_Init+0x14c>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	3326      	adds	r3, #38	; 0x26
 8005934:	2201      	movs	r2, #1
 8005936:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <USBD_CUSTOM_HID_Init+0x150>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f003 020f 	and.w	r2, r3, #15
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005950:	2201      	movs	r2, #1
 8005952:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <USBD_CUSTOM_HID_Init+0x14c>)
 8005956:	7819      	ldrb	r1, [r3, #0]
 8005958:	2302      	movs	r3, #2
 800595a:	2203      	movs	r2, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f002 fa03 	bl	8007d68 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <USBD_CUSTOM_HID_Init+0x14c>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 020f 	and.w	r2, r3, #15
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	2201      	movs	r2, #1
 800597a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <USBD_CUSTOM_HID_Init+0x150>)
 800597e:	7819      	ldrb	r1, [r3, #0]
 8005980:	2302      	movs	r3, #2
 8005982:	2203      	movs	r2, #3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 f9ef 	bl	8007d68 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <USBD_CUSTOM_HID_Init+0x150>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059a2:	2201      	movs	r2, #1
 80059a4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	33b0      	adds	r3, #176	; 0xb0
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <USBD_CUSTOM_HID_Init+0x150>)
 80059c2:	7819      	ldrb	r1, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	2302      	movs	r3, #2
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f002 fb47 	bl	800805c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	2000008a 	.word	0x2000008a
 80059dc:	2000008b 	.word	0x2000008b

080059e0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80059ec:	4b37      	ldr	r3, [pc, #220]	; (8005acc <USBD_CUSTOM_HID_DeInit+0xec>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f002 f9f6 	bl	8007de4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80059f8:	4b34      	ldr	r3, [pc, #208]	; (8005acc <USBD_CUSTOM_HID_DeInit+0xec>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3324      	adds	r3, #36	; 0x24
 8005a0e:	2200      	movs	r2, #0
 8005a10:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <USBD_CUSTOM_HID_DeInit+0xec>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	3326      	adds	r3, #38	; 0x26
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f002 f9d6 	bl	8007de4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32b0      	adds	r2, #176	; 0xb0
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01f      	beq.n	8005ac2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	33b0      	adds	r3, #176	; 0xb0
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32b0      	adds	r2, #176	; 0xb0
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f002 fb6d 	bl	8008184 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32b0      	adds	r2, #176	; 0xb0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2000008a 	.word	0x2000008a
 8005ad0:	2000008b 	.word	0x2000008b

08005ad4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	32b0      	adds	r2, #176	; 0xb0
 8005ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e0f8      	b.n	8005cfa <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d056      	beq.n	8005bc2 <USBD_CUSTOM_HID_Setup+0xee>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	f040 80e8 	bne.w	8005cea <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	3b02      	subs	r3, #2
 8005b20:	2b09      	cmp	r3, #9
 8005b22:	d846      	bhi.n	8005bb2 <USBD_CUSTOM_HID_Setup+0xde>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <USBD_CUSTOM_HID_Setup+0x58>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b63 	.word	0x08005b63
 8005b34:	08005bb3 	.word	0x08005bb3
 8005b38:	08005bb3 	.word	0x08005bb3
 8005b3c:	08005bb3 	.word	0x08005bb3
 8005b40:	08005bb3 	.word	0x08005bb3
 8005b44:	08005bb3 	.word	0x08005bb3
 8005b48:	08005b95 	.word	0x08005b95
 8005b4c:	08005b73 	.word	0x08005b73
 8005b50:	08005b55 	.word	0x08005b55
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	885b      	ldrh	r3, [r3, #2]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]
          break;
 8005b60:	e02e      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2201      	movs	r2, #1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 fcf6 	bl	800755c <USBD_CtlSendData>
          break;
 8005b70:	e026      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	885b      	ldrh	r3, [r3, #2]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	609a      	str	r2, [r3, #8]
          break;
 8005b82:	e01d      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3308      	adds	r3, #8
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fce5 	bl	800755c <USBD_CtlSendData>
          break;
 8005b92:	e015      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2201      	movs	r2, #1
 8005b98:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005b9a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	88db      	ldrh	r3, [r3, #6]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	bf28      	it	cs
 8005ba4:	2302      	movcs	r3, #2
 8005ba6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 fd02 	bl	80075b4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005bb0:	e006      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fc60 	bl	800747a <USBD_CtlError>
          ret = USBD_FAIL;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bbe:	bf00      	nop
      }
      break;
 8005bc0:	e09a      	b.n	8005cf8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b0b      	cmp	r3, #11
 8005bc8:	f200 8086 	bhi.w	8005cd8 <USBD_CUSTOM_HID_Setup+0x204>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <USBD_CUSTOM_HID_Setup+0x100>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005ce7 	.word	0x08005ce7
 8005bdc:	08005cd9 	.word	0x08005cd9
 8005be0:	08005cd9 	.word	0x08005cd9
 8005be4:	08005cd9 	.word	0x08005cd9
 8005be8:	08005cd9 	.word	0x08005cd9
 8005bec:	08005c2f 	.word	0x08005c2f
 8005bf0:	08005cd9 	.word	0x08005cd9
 8005bf4:	08005cd9 	.word	0x08005cd9
 8005bf8:	08005cd9 	.word	0x08005cd9
 8005bfc:	08005c87 	.word	0x08005c87
 8005c00:	08005cb1 	.word	0x08005cb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d107      	bne.n	8005c20 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c10:	f107 030e 	add.w	r3, r7, #14
 8005c14:	2202      	movs	r2, #2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fc9f 	bl	800755c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c1e:	e063      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fc29 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2c:	e05c      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	885b      	ldrh	r3, [r3, #2]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b22      	cmp	r3, #34	; 0x22
 8005c38:	d110      	bne.n	8005c5c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	88db      	ldrh	r3, [r3, #6]
 8005c3e:	2b18      	cmp	r3, #24
 8005c40:	bf28      	it	cs
 8005c42:	2318      	movcs	r3, #24
 8005c44:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	33b0      	adds	r3, #176	; 0xb0
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e00d      	b.n	8005c78 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b21      	cmp	r3, #33	; 0x21
 8005c66:	d107      	bne.n	8005c78 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005c68:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <USBD_CUSTOM_HID_Setup+0x230>)
 8005c6a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	88db      	ldrh	r3, [r3, #6]
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	bf28      	it	cs
 8005c74:	2309      	movcs	r3, #9
 8005c76:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c78:	8bfb      	ldrh	r3, [r7, #30]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 fc6c 	bl	800755c <USBD_CtlSendData>
          break;
 8005c84:	e030      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d107      	bne.n	8005ca2 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	330c      	adds	r3, #12
 8005c96:	2201      	movs	r2, #1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fc5e 	bl	800755c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ca0:	e022      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fbe8 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	e01b      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d106      	bne.n	8005cca <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cc8:	e00e      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fbd4 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd6:	e007      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fbcd 	bl	800747a <USBD_CtlError>
          ret = USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ce4:	e000      	b.n	8005ce8 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005ce6:	bf00      	nop
      }
      break;
 8005ce8:	e006      	b.n	8005cf8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fbc4 	bl	800747a <USBD_CtlError>
      ret = USBD_FAIL;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf6:	bf00      	nop
  }
  return (uint8_t)ret;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000074 	.word	0x20000074

08005d08 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	32b0      	adds	r2, #176	; 0xb0
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e017      	b.n	8005d60 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d110      	bne.n	8005d5e <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	7d1b      	ldrb	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2201      	movs	r2, #1
 8005d48:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005d4c:	7819      	ldrb	r1, [r3, #0]
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f002 f94a 	bl	8007fec <USBD_LL_Transmit>
 8005d58:	e001      	b.n	8005d5e <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	2000008a 	.word	0x2000008a

08005d6c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d74:	2181      	movs	r1, #129	; 0x81
 8005d76:	4815      	ldr	r0, [pc, #84]	; (8005dcc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005d78:	f000 fd1d 	bl	80067b6 <USBD_GetEpDesc>
 8005d7c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4812      	ldr	r0, [pc, #72]	; (8005dcc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005d82:	f000 fd18 	bl	80067b6 <USBD_GetEpDesc>
 8005d86:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f042 0202 	orr.w	r2, r2, #2
 8005d96:	711a      	strb	r2, [r3, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f042 0202 	orr.w	r2, r2, #2
 8005db0:	711a      	strb	r2, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2201      	movs	r2, #1
 8005dba:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2229      	movs	r2, #41	; 0x29
 8005dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005dc2:	4b02      	ldr	r3, [pc, #8]	; (8005dcc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000048 	.word	0x20000048

08005dd0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005dd8:	2181      	movs	r1, #129	; 0x81
 8005dda:	4815      	ldr	r0, [pc, #84]	; (8005e30 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005ddc:	f000 fceb 	bl	80067b6 <USBD_GetEpDesc>
 8005de0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005de2:	2101      	movs	r1, #1
 8005de4:	4812      	ldr	r0, [pc, #72]	; (8005e30 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005de6:	f000 fce6 	bl	80067b6 <USBD_GetEpDesc>
 8005dea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f042 0202 	orr.w	r2, r2, #2
 8005dfa:	711a      	strb	r2, [r3, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2205      	movs	r2, #5
 8005e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f042 0202 	orr.w	r2, r2, #2
 8005e14:	711a      	strb	r2, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2229      	movs	r2, #41	; 0x29
 8005e24:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005e26:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000048 	.word	0x20000048

08005e34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005e3c:	2181      	movs	r1, #129	; 0x81
 8005e3e:	4815      	ldr	r0, [pc, #84]	; (8005e94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005e40:	f000 fcb9 	bl	80067b6 <USBD_GetEpDesc>
 8005e44:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005e46:	2101      	movs	r1, #1
 8005e48:	4812      	ldr	r0, [pc, #72]	; (8005e94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005e4a:	f000 fcb4 	bl	80067b6 <USBD_GetEpDesc>
 8005e4e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f042 0202 	orr.w	r2, r2, #2
 8005e5e:	711a      	strb	r2, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f042 0202 	orr.w	r2, r2, #2
 8005e78:	711a      	strb	r2, [r3, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2201      	movs	r2, #1
 8005e82:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2229      	movs	r2, #41	; 0x29
 8005e88:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005e8a:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000048 	.word	0x20000048

08005e98 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32b0      	adds	r2, #176	; 0xb0
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32b0      	adds	r2, #176	; 0xb0
 8005eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e017      	b.n	8005f16 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	32b0      	adds	r2, #176	; 0xb0
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	33b0      	adds	r3, #176	; 0xb0
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	7810      	ldrb	r0, [r2, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	7852      	ldrb	r2, [r2, #1]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32b0      	adds	r2, #176	; 0xb0
 8005f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e00f      	b.n	8005f5e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	32b0      	adds	r2, #176	; 0xb0
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005f50:	7819      	ldrb	r1, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	2302      	movs	r3, #2
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f002 f880 	bl	800805c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	2000008b 	.word	0x2000008b

08005f6c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	32b0      	adds	r2, #176	; 0xb0
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e016      	b.n	8005fbc <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d111      	bne.n	8005fba <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	33b0      	adds	r3, #176	; 0xb0
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	7810      	ldrb	r0, [r2, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	7852      	ldrb	r2, [r2, #1]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	220a      	movs	r2, #10
 8005fd0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005fd2:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000080 	.word	0x20000080

08005fe4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e009      	b.n	800600c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	33b0      	adds	r3, #176	; 0xb0
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	e01f      	b.n	8006070 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 fe01 	bl	8007c6c <USBD_LL_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e025      	b.n	80060dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	32ae      	adds	r2, #174	; 0xae
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	; 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f107 020e 	add.w	r2, r7, #14
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	4602      	mov	r2, r0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fe09 	bl	8007d04 <USBD_LL_Start>
 80060f2:	4603      	mov	r3, r0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006104:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	4611      	mov	r1, r2
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f938 	bl	8007406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d01a      	beq.n	80061f0 <USBD_LL_SetupStage+0x72>
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d822      	bhi.n	8006204 <USBD_LL_SetupStage+0x86>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <USBD_LL_SetupStage+0x4a>
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d00a      	beq.n	80061dc <USBD_LL_SetupStage+0x5e>
 80061c6:	e01d      	b.n	8006204 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb65 	bl	80068a0 <USBD_StdDevReq>
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
      break;
 80061da:	e020      	b.n	800621e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fbcd 	bl	8006984 <USBD_StdItfReq>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	e016      	b.n	800621e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc2f 	bl	8006a5c <USBD_StdEPReq>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
      break;
 8006202:	e00c      	b.n	800621e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800620a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800620e:	b2db      	uxtb	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fe1c 	bl	8007e50 <USBD_LL_StallEP>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
      break;
 800621c:	bf00      	nop
  }

  return ret;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	460b      	mov	r3, r1
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d16e      	bne.n	800631e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624e:	2b03      	cmp	r3, #3
 8006250:	f040 8098 	bne.w	8006384 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d913      	bls.n	8006288 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4293      	cmp	r3, r2
 8006278:	bf28      	it	cs
 800627a:	4613      	movcs	r3, r2
 800627c:	461a      	mov	r2, r3
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 f9b4 	bl	80075ee <USBD_CtlContinueRx>
 8006286:	e07d      	b.n	8006384 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2b02      	cmp	r3, #2
 8006294:	d014      	beq.n	80062c0 <USBD_LL_DataOutStage+0x98>
 8006296:	2b02      	cmp	r3, #2
 8006298:	d81d      	bhi.n	80062d6 <USBD_LL_DataOutStage+0xae>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <USBD_LL_DataOutStage+0x7c>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d003      	beq.n	80062aa <USBD_LL_DataOutStage+0x82>
 80062a2:	e018      	b.n	80062d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	75bb      	strb	r3, [r7, #22]
            break;
 80062a8:	e018      	b.n	80062dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	4619      	mov	r1, r3
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fa64 	bl	8006782 <USBD_CoreFindIF>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75bb      	strb	r3, [r7, #22]
            break;
 80062be:	e00d      	b.n	80062dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4619      	mov	r1, r3
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fa66 	bl	800679c <USBD_CoreFindEP>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75bb      	strb	r3, [r7, #22]
            break;
 80062d4:	e002      	b.n	80062dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75bb      	strb	r3, [r7, #22]
            break;
 80062da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80062dc:	7dbb      	ldrb	r3, [r7, #22]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d119      	bne.n	8006316 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d113      	bne.n	8006316 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80062ee:	7dba      	ldrb	r2, [r7, #22]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	32ae      	adds	r2, #174	; 0xae
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062fe:	7dba      	ldrb	r2, [r7, #22]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006306:	7dba      	ldrb	r2, [r7, #22]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	32ae      	adds	r2, #174	; 0xae
 800630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f001 f97a 	bl	8007610 <USBD_CtlSendStatus>
 800631c:	e032      	b.n	8006384 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fa37 	bl	800679c <USBD_CoreFindEP>
 800632e:	4603      	mov	r3, r0
 8006330:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006332:	7dbb      	ldrb	r3, [r7, #22]
 8006334:	2bff      	cmp	r3, #255	; 0xff
 8006336:	d025      	beq.n	8006384 <USBD_LL_DataOutStage+0x15c>
 8006338:	7dbb      	ldrb	r3, [r7, #22]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d122      	bne.n	8006384 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b03      	cmp	r3, #3
 8006348:	d117      	bne.n	800637a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800634a:	7dba      	ldrb	r2, [r7, #22]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	32ae      	adds	r2, #174	; 0xae
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00f      	beq.n	800637a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800635a:	7dba      	ldrb	r2, [r7, #22]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006362:	7dba      	ldrb	r2, [r7, #22]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	32ae      	adds	r2, #174	; 0xae
 8006368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	7afa      	ldrb	r2, [r7, #11]
 8006370:	4611      	mov	r1, r2
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	4798      	blx	r3
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	e000      	b.n	8006386 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	460b      	mov	r3, r1
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d16f      	bne.n	8006482 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3314      	adds	r3, #20
 80063a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d15a      	bne.n	8006468 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d914      	bls.n	80063e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f001 f8dc 	bl	8007592 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063da:	2300      	movs	r3, #0
 80063dc:	2200      	movs	r2, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 fe3b 	bl	800805c <USBD_LL_PrepareReceive>
 80063e6:	e03f      	b.n	8006468 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d11c      	bne.n	800642e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d316      	bcc.n	800642e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800640a:	429a      	cmp	r2, r3
 800640c:	d20f      	bcs.n	800642e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 f8bd 	bl	8007592 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f001 fe18 	bl	800805c <USBD_LL_PrepareReceive>
 800642c:	e01c      	b.n	8006468 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d10f      	bne.n	800645a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f001 fcf7 	bl	8007e50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f001 f8e7 	bl	8007636 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03a      	beq.n	80064e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fe42 	bl	80060fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006480:	e032      	b.n	80064e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4619      	mov	r1, r3
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f985 	bl	800679c <USBD_CoreFindEP>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2bff      	cmp	r3, #255	; 0xff
 800649a:	d025      	beq.n	80064e8 <USBD_LL_DataInStage+0x15a>
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d122      	bne.n	80064e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d11c      	bne.n	80064e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064ae:	7dfa      	ldrb	r2, [r7, #23]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	32ae      	adds	r2, #174	; 0xae
 80064b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d014      	beq.n	80064e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064be:	7dfa      	ldrb	r2, [r7, #23]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064c6:	7dfa      	ldrb	r2, [r7, #23]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	32ae      	adds	r2, #174	; 0xae
 80064cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	7afa      	ldrb	r2, [r7, #11]
 80064d4:	4611      	mov	r1, r2
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
 80064e6:	e000      	b.n	80064ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d014      	beq.n	8006558 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	4611      	mov	r1, r2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006558:	2340      	movs	r3, #64	; 0x40
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fc02 	bl	8007d68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2240      	movs	r2, #64	; 0x40
 8006570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	2200      	movs	r2, #0
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 fbf4 	bl	8007d68 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2240      	movs	r2, #64	; 0x40
 800658a:	621a      	str	r2, [r3, #32]

  return ret;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d006      	beq.n	80065d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d106      	bne.n	8006610 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d110      	bne.n	8006654 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	32ae      	adds	r2, #174	; 0xae
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	e01c      	b.n	80066ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d115      	bne.n	80066b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	32ae      	adds	r2, #174	; 0xae
 8006696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	32ae      	adds	r2, #174	; 0xae
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	4611      	mov	r1, r2
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	32ae      	adds	r2, #174	; 0xae
 80066d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e01c      	b.n	800671e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d115      	bne.n	800671c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32ae      	adds	r2, #174	; 0xae
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	32ae      	adds	r2, #174	; 0xae
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	4611      	mov	r1, r2
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	4611      	mov	r1, r2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800678e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	885b      	ldrh	r3, [r3, #2]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	429a      	cmp	r2, r3
 80067dc:	d920      	bls.n	8006820 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80067e6:	e013      	b.n	8006810 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80067e8:	f107 030a 	add.w	r3, r7, #10
 80067ec:	4619      	mov	r1, r3
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	f000 f81b 	bl	800682a <USBD_GetNextDesc>
 80067f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	d108      	bne.n	8006810 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	789b      	ldrb	r3, [r3, #2]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	429a      	cmp	r2, r3
 800680a:	d008      	beq.n	800681e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	885b      	ldrh	r3, [r3, #2]
 8006814:	b29a      	uxth	r2, r3
 8006816:	897b      	ldrh	r3, [r7, #10]
 8006818:	429a      	cmp	r2, r3
 800681a:	d8e5      	bhi.n	80067e8 <USBD_GetEpDesc+0x32>
 800681c:	e000      	b.n	8006820 <USBD_GetEpDesc+0x6a>
          break;
 800681e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006820:	693b      	ldr	r3, [r7, #16]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	4413      	add	r3, r2
 8006844:	b29a      	uxth	r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3301      	adds	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006882:	8a3b      	ldrh	r3, [r7, #16]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	b21a      	sxth	r2, r3
 8006888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800688c:	4313      	orrs	r3, r2
 800688e:	b21b      	sxth	r3, r3
 8006890:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006892:	89fb      	ldrh	r3, [r7, #14]
}
 8006894:	4618      	mov	r0, r3
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d005      	beq.n	80068c6 <USBD_StdDevReq+0x26>
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d857      	bhi.n	800696e <USBD_StdDevReq+0xce>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <USBD_StdDevReq+0x42>
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d153      	bne.n	800696e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	32ae      	adds	r2, #174	; 0xae
 80068d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e04a      	b.n	8006978 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b09      	cmp	r3, #9
 80068e8:	d83b      	bhi.n	8006962 <USBD_StdDevReq+0xc2>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBD_StdDevReq+0x50>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006945 	.word	0x08006945
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006963 	.word	0x08006963
 80068fc:	0800694f 	.word	0x0800694f
 8006900:	08006963 	.word	0x08006963
 8006904:	08006923 	.word	0x08006923
 8006908:	08006919 	.word	0x08006919
 800690c:	08006963 	.word	0x08006963
 8006910:	0800693b 	.word	0x0800693b
 8006914:	0800692d 	.word	0x0800692d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa3c 	bl	8006d98 <USBD_GetDescriptor>
          break;
 8006920:	e024      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fbcb 	bl	80070c0 <USBD_SetAddress>
          break;
 800692a:	e01f      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fc0a 	bl	8007148 <USBD_SetConfig>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
          break;
 8006938:	e018      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fcad 	bl	800729c <USBD_GetConfig>
          break;
 8006942:	e013      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fcde 	bl	8007308 <USBD_GetStatus>
          break;
 800694c:	e00e      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fd0d 	bl	8007370 <USBD_SetFeature>
          break;
 8006956:	e009      	b.n	800696c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fd31 	bl	80073c2 <USBD_ClrFeature>
          break;
 8006960:	e004      	b.n	800696c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fd88 	bl	800747a <USBD_CtlError>
          break;
 800696a:	bf00      	nop
      }
      break;
 800696c:	e004      	b.n	8006978 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fd82 	bl	800747a <USBD_CtlError>
      break;
 8006976:	bf00      	nop
  }

  return ret;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d005      	beq.n	80069aa <USBD_StdItfReq+0x26>
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d852      	bhi.n	8006a48 <USBD_StdItfReq+0xc4>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <USBD_StdItfReq+0x26>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d14e      	bne.n	8006a48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d840      	bhi.n	8006a3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	889b      	ldrh	r3, [r3, #4]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d836      	bhi.n	8006a30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	889b      	ldrh	r3, [r3, #4]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fed9 	bl	8006782 <USBD_CoreFindIF>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069d4:	7bbb      	ldrb	r3, [r7, #14]
 80069d6:	2bff      	cmp	r3, #255	; 0xff
 80069d8:	d01d      	beq.n	8006a16 <USBD_StdItfReq+0x92>
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11a      	bne.n	8006a16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80069e0:	7bba      	ldrb	r2, [r7, #14]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32ae      	adds	r2, #174	; 0xae
 80069e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069f0:	7bba      	ldrb	r2, [r7, #14]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069f8:	7bba      	ldrb	r2, [r7, #14]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32ae      	adds	r2, #174	; 0xae
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a0e:	e004      	b.n	8006a1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a14:	e001      	b.n	8006a1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a16:	2303      	movs	r3, #3
 8006a18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	88db      	ldrh	r3, [r3, #6]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d110      	bne.n	8006a44 <USBD_StdItfReq+0xc0>
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fdf1 	bl	8007610 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a2e:	e009      	b.n	8006a44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fd21 	bl	800747a <USBD_CtlError>
          break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fd1c 	bl	800747a <USBD_CtlError>
          break;
 8006a42:	e000      	b.n	8006a46 <USBD_StdItfReq+0xc2>
          break;
 8006a44:	bf00      	nop
      }
      break;
 8006a46:	e004      	b.n	8006a52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fd15 	bl	800747a <USBD_CtlError>
      break;
 8006a50:	bf00      	nop
  }

  return ret;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	889b      	ldrh	r3, [r3, #4]
 8006a6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d007      	beq.n	8006a8c <USBD_StdEPReq+0x30>
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	f200 817f 	bhi.w	8006d80 <USBD_StdEPReq+0x324>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d02a      	beq.n	8006adc <USBD_StdEPReq+0x80>
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	f040 817a 	bne.w	8006d80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fe83 	bl	800679c <USBD_CoreFindEP>
 8006a96:	4603      	mov	r3, r0
 8006a98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a9a:	7b7b      	ldrb	r3, [r7, #13]
 8006a9c:	2bff      	cmp	r3, #255	; 0xff
 8006a9e:	f000 8174 	beq.w	8006d8a <USBD_StdEPReq+0x32e>
 8006aa2:	7b7b      	ldrb	r3, [r7, #13]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 8170 	bne.w	8006d8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006aaa:	7b7a      	ldrb	r2, [r7, #13]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ab2:	7b7a      	ldrb	r2, [r7, #13]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	32ae      	adds	r2, #174	; 0xae
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8163 	beq.w	8006d8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ac4:	7b7a      	ldrb	r2, [r7, #13]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	32ae      	adds	r2, #174	; 0xae
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ada:	e156      	b.n	8006d8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d008      	beq.n	8006af6 <USBD_StdEPReq+0x9a>
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	f300 8145 	bgt.w	8006d74 <USBD_StdEPReq+0x318>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 809b 	beq.w	8006c26 <USBD_StdEPReq+0x1ca>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d03c      	beq.n	8006b6e <USBD_StdEPReq+0x112>
 8006af4:	e13e      	b.n	8006d74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d002      	beq.n	8006b08 <USBD_StdEPReq+0xac>
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d016      	beq.n	8006b34 <USBD_StdEPReq+0xd8>
 8006b06:	e02c      	b.n	8006b62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00d      	beq.n	8006b2a <USBD_StdEPReq+0xce>
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b80      	cmp	r3, #128	; 0x80
 8006b12:	d00a      	beq.n	8006b2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f999 	bl	8007e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f995 	bl	8007e50 <USBD_LL_StallEP>
 8006b26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b28:	e020      	b.n	8006b6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fca4 	bl	800747a <USBD_CtlError>
              break;
 8006b32:	e01b      	b.n	8006b6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10e      	bne.n	8006b5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <USBD_StdEPReq+0xfe>
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d008      	beq.n	8006b5a <USBD_StdEPReq+0xfe>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	88db      	ldrh	r3, [r3, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f97b 	bl	8007e50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fd58 	bl	8007610 <USBD_CtlSendStatus>

              break;
 8006b60:	e004      	b.n	8006b6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc88 	bl	800747a <USBD_CtlError>
              break;
 8006b6a:	bf00      	nop
          }
          break;
 8006b6c:	e107      	b.n	8006d7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d002      	beq.n	8006b80 <USBD_StdEPReq+0x124>
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d016      	beq.n	8006bac <USBD_StdEPReq+0x150>
 8006b7e:	e04b      	b.n	8006c18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00d      	beq.n	8006ba2 <USBD_StdEPReq+0x146>
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d00a      	beq.n	8006ba2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f95d 	bl	8007e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f959 	bl	8007e50 <USBD_LL_StallEP>
 8006b9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ba0:	e040      	b.n	8006c24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc68 	bl	800747a <USBD_CtlError>
              break;
 8006baa:	e03b      	b.n	8006c24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	885b      	ldrh	r3, [r3, #2]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d136      	bne.n	8006c22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 f97a 	bl	8007ebc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fd21 	bl	8007610 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fde2 	bl	800679c <USBD_CoreFindEP>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bdc:	7b7b      	ldrb	r3, [r7, #13]
 8006bde:	2bff      	cmp	r3, #255	; 0xff
 8006be0:	d01f      	beq.n	8006c22 <USBD_StdEPReq+0x1c6>
 8006be2:	7b7b      	ldrb	r3, [r7, #13]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11c      	bne.n	8006c22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006be8:	7b7a      	ldrb	r2, [r7, #13]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006bf0:	7b7a      	ldrb	r2, [r7, #13]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32ae      	adds	r2, #174	; 0xae
 8006bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c00:	7b7a      	ldrb	r2, [r7, #13]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32ae      	adds	r2, #174	; 0xae
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c16:	e004      	b.n	8006c22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fc2d 	bl	800747a <USBD_CtlError>
              break;
 8006c20:	e000      	b.n	8006c24 <USBD_StdEPReq+0x1c8>
              break;
 8006c22:	bf00      	nop
          }
          break;
 8006c24:	e0ab      	b.n	8006d7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d002      	beq.n	8006c38 <USBD_StdEPReq+0x1dc>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d032      	beq.n	8006c9c <USBD_StdEPReq+0x240>
 8006c36:	e097      	b.n	8006d68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <USBD_StdEPReq+0x1f2>
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d004      	beq.n	8006c4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc17 	bl	800747a <USBD_CtlError>
                break;
 8006c4c:	e091      	b.n	8006d72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da0b      	bge.n	8006c6e <USBD_StdEPReq+0x212>
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	3310      	adds	r3, #16
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	e00b      	b.n	8006c86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	3304      	adds	r3, #4
 8006c86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2202      	movs	r2, #2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fc61 	bl	800755c <USBD_CtlSendData>
              break;
 8006c9a:	e06a      	b.n	8006d72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da11      	bge.n	8006cc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	3324      	adds	r3, #36	; 0x24
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d117      	bne.n	8006cee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fbda 	bl	800747a <USBD_CtlError>
                  break;
 8006cc6:	e054      	b.n	8006d72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	f003 020f 	and.w	r2, r3, #15
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fbc7 	bl	800747a <USBD_CtlError>
                  break;
 8006cec:	e041      	b.n	8006d72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da0b      	bge.n	8006d0e <USBD_StdEPReq+0x2b2>
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	3310      	adds	r3, #16
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	e00b      	b.n	8006d26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <USBD_StdEPReq+0x2d8>
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d103      	bne.n	8006d3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e00e      	b.n	8006d5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f8f1 	bl	8007f28 <USBD_LL_IsStallEP>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e002      	b.n	8006d5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fbfb 	bl	800755c <USBD_CtlSendData>
              break;
 8006d66:	e004      	b.n	8006d72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb85 	bl	800747a <USBD_CtlError>
              break;
 8006d70:	bf00      	nop
          }
          break;
 8006d72:	e004      	b.n	8006d7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fb7f 	bl	800747a <USBD_CtlError>
          break;
 8006d7c:	bf00      	nop
      }
      break;
 8006d7e:	e005      	b.n	8006d8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fb79 	bl	800747a <USBD_CtlError>
      break;
 8006d88:	e000      	b.n	8006d8c <USBD_StdEPReq+0x330>
      break;
 8006d8a:	bf00      	nop
  }

  return ret;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b0e      	cmp	r3, #14
 8006dba:	f200 8152 	bhi.w	8007062 <USBD_GetDescriptor+0x2ca>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <USBD_GetDescriptor+0x2c>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006e35 	.word	0x08006e35
 8006dc8:	08006e4d 	.word	0x08006e4d
 8006dcc:	08006e8d 	.word	0x08006e8d
 8006dd0:	08007063 	.word	0x08007063
 8006dd4:	08007063 	.word	0x08007063
 8006dd8:	08007003 	.word	0x08007003
 8006ddc:	0800702f 	.word	0x0800702f
 8006de0:	08007063 	.word	0x08007063
 8006de4:	08007063 	.word	0x08007063
 8006de8:	08007063 	.word	0x08007063
 8006dec:	08007063 	.word	0x08007063
 8006df0:	08007063 	.word	0x08007063
 8006df4:	08007063 	.word	0x08007063
 8006df8:	08007063 	.word	0x08007063
 8006dfc:	08006e01 	.word	0x08006e01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e22:	e126      	b.n	8007072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb27 	bl	800747a <USBD_CtlError>
        err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
      break;
 8006e32:	e11e      	b.n	8007072 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      break;
 8006e4a:	e112      	b.n	8007072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e6e:	e100      	b.n	8007072 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e0f2      	b.n	8007072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	f200 80ac 	bhi.w	8006ff0 <USBD_GetDescriptor+0x258>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <USBD_GetDescriptor+0x108>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f89 	.word	0x08006f89
 8006eb4:	08006fbd 	.word	0x08006fbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e091      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 facb 	bl	800747a <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e089      	b.n	8007000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e077      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fab1 	bl	800747a <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e06f      	b.n	8007000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f42:	e05d      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa97 	bl	800747a <USBD_CtlError>
            err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
          break;
 8006f52:	e055      	b.n	8007000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f76:	e043      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa7d 	bl	800747a <USBD_CtlError>
            err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
          break;
 8006f86:	e03b      	b.n	8007000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006faa:	e029      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa63 	bl	800747a <USBD_CtlError>
            err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fba:	e021      	b.n	8007000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e00f      	b.n	8007000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa49 	bl	800747a <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e007      	b.n	8007000 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa41 	bl	800747a <USBD_CtlError>
          err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ffe:	bf00      	nop
      }
      break;
 8007000:	e037      	b.n	8007072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800701c:	e029      	b.n	8007072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa2a 	bl	800747a <USBD_CtlError>
        err++;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3301      	adds	r3, #1
 800702a:	72fb      	strb	r3, [r7, #11]
      break;
 800702c:	e021      	b.n	8007072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10d      	bne.n	8007052 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	4610      	mov	r0, r2
 8007044:	4798      	blx	r3
 8007046:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	2207      	movs	r2, #7
 800704e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007050:	e00f      	b.n	8007072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa10 	bl	800747a <USBD_CtlError>
        err++;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	3301      	adds	r3, #1
 800705e:	72fb      	strb	r3, [r7, #11]
      break;
 8007060:	e007      	b.n	8007072 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa08 	bl	800747a <USBD_CtlError>
      err++;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	3301      	adds	r3, #1
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	bf00      	nop
  }

  if (err != 0U)
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11e      	bne.n	80070b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	88db      	ldrh	r3, [r3, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007080:	893b      	ldrh	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88da      	ldrh	r2, [r3, #6]
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	4293      	cmp	r3, r2
 800708e:	bf28      	it	cs
 8007090:	4613      	movcs	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	461a      	mov	r2, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa5d 	bl	800755c <USBD_CtlSendData>
 80070a2:	e009      	b.n	80070b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9e7 	bl	800747a <USBD_CtlError>
 80070ac:	e004      	b.n	80070b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 faae 	bl	8007610 <USBD_CtlSendStatus>
 80070b4:	e000      	b.n	80070b8 <USBD_GetDescriptor+0x320>
    return;
 80070b6:	bf00      	nop
  }
}
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d131      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d12d      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	2b7f      	cmp	r3, #127	; 0x7f
 80070e0:	d829      	bhi.n	8007136 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d104      	bne.n	8007104 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9bc 	bl	800747a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	e01d      	b.n	8007140 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ff35 	bl	8007f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa7a 	bl	8007610 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	e009      	b.n	8007140 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	e004      	b.n	8007140 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f99e 	bl	800747a <USBD_CtlError>
  }
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b4e      	ldr	r3, [pc, #312]	; (8007298 <USBD_SetConfig+0x150>)
 800715e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007160:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <USBD_SetConfig+0x150>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d905      	bls.n	8007174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f985 	bl	800747a <USBD_CtlError>
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e08c      	b.n	800728e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d002      	beq.n	8007186 <USBD_SetConfig+0x3e>
 8007180:	2b03      	cmp	r3, #3
 8007182:	d029      	beq.n	80071d8 <USBD_SetConfig+0x90>
 8007184:	e075      	b.n	8007272 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007186:	4b44      	ldr	r3, [pc, #272]	; (8007298 <USBD_SetConfig+0x150>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d020      	beq.n	80071d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <USBD_SetConfig+0x150>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007198:	4b3f      	ldr	r3, [pc, #252]	; (8007298 <USBD_SetConfig+0x150>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe ffb7 	bl	8006112 <USBD_SetClassConfig>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f962 	bl	800747a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071be:	e065      	b.n	800728c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa25 	bl	8007610 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071ce:	e05d      	b.n	800728c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa1d 	bl	8007610 <USBD_CtlSendStatus>
      break;
 80071d6:	e059      	b.n	800728c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071d8:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <USBD_SetConfig+0x150>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d112      	bne.n	8007206 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071e8:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <USBD_SetConfig+0x150>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071f2:	4b29      	ldr	r3, [pc, #164]	; (8007298 <USBD_SetConfig+0x150>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fe ffa6 	bl	800614a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa06 	bl	8007610 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007204:	e042      	b.n	800728c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <USBD_SetConfig+0x150>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d02a      	beq.n	800726a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fe ff94 	bl	800614a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007222:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <USBD_SetConfig+0x150>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <USBD_SetConfig+0x150>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fe ff6d 	bl	8006112 <USBD_SetClassConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f918 	bl	800747a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7fe ff79 	bl	800614a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007260:	e014      	b.n	800728c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9d4 	bl	8007610 <USBD_CtlSendStatus>
      break;
 8007268:	e010      	b.n	800728c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f9d0 	bl	8007610 <USBD_CtlSendStatus>
      break;
 8007270:	e00c      	b.n	800728c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f900 	bl	800747a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <USBD_SetConfig+0x150>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fe ff62 	bl	800614a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]
      break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200001bc 	.word	0x200001bc

0800729c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d004      	beq.n	80072b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f8e2 	bl	800747a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072b6:	e023      	b.n	8007300 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	dc02      	bgt.n	80072ca <USBD_GetConfig+0x2e>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc03      	bgt.n	80072d0 <USBD_GetConfig+0x34>
 80072c8:	e015      	b.n	80072f6 <USBD_GetConfig+0x5a>
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d00b      	beq.n	80072e6 <USBD_GetConfig+0x4a>
 80072ce:	e012      	b.n	80072f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3308      	adds	r3, #8
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f93c 	bl	800755c <USBD_CtlSendData>
        break;
 80072e4:	e00c      	b.n	8007300 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2201      	movs	r2, #1
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f934 	bl	800755c <USBD_CtlSendData>
        break;
 80072f4:	e004      	b.n	8007300 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8be 	bl	800747a <USBD_CtlError>
        break;
 80072fe:	bf00      	nop
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007318:	b2db      	uxtb	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	2b02      	cmp	r3, #2
 800731e:	d81e      	bhi.n	800735e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d004      	beq.n	8007332 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8a5 	bl	800747a <USBD_CtlError>
        break;
 8007330:	e01a      	b.n	8007368 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f043 0202 	orr.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	330c      	adds	r3, #12
 8007352:	2202      	movs	r2, #2
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f900 	bl	800755c <USBD_CtlSendData>
      break;
 800735c:	e004      	b.n	8007368 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f88a 	bl	800747a <USBD_CtlError>
      break;
 8007366:	bf00      	nop
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d107      	bne.n	8007392 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f940 	bl	8007610 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007390:	e013      	b.n	80073ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d10b      	bne.n	80073b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	889b      	ldrh	r3, [r3, #4]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f930 	bl	8007610 <USBD_CtlSendStatus>
}
 80073b0:	e003      	b.n	80073ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f860 	bl	800747a <USBD_CtlError>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d80b      	bhi.n	80073f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	885b      	ldrh	r3, [r3, #2]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10c      	bne.n	80073fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f910 	bl	8007610 <USBD_CtlSendStatus>
      }
      break;
 80073f0:	e004      	b.n	80073fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f840 	bl	800747a <USBD_CtlError>
      break;
 80073fa:	e000      	b.n	80073fe <USBD_ClrFeature+0x3c>
      break;
 80073fc:	bf00      	nop
  }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff fa17 	bl	8006864 <SWAPBYTE>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fa0a 	bl	8006864 <SWAPBYTE>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3301      	adds	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff f9fd 	bl	8006864 <SWAPBYTE>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	80da      	strh	r2, [r3, #6]
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fce2 	bl	8007e50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800748c:	2100      	movs	r1, #0
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fcde 	bl	8007e50 <USBD_LL_StallEP>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d036      	beq.n	8007520 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f000 f836 	bl	8007528 <USBD_GetLen>
 80074bc:	4603      	mov	r3, r0
 80074be:	3301      	adds	r3, #1
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	4413      	add	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	3301      	adds	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	2203      	movs	r2, #3
 80074e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	3301      	adds	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074ec:	e013      	b.n	8007516 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	4413      	add	r3, r2
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
    idx++;
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	3301      	adds	r3, #1
 8007504:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4413      	add	r3, r2
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	3301      	adds	r3, #1
 8007514:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e7      	bne.n	80074ee <USBD_GetString+0x52>
 800751e:	e000      	b.n	8007522 <USBD_GetString+0x86>
    return;
 8007520:	bf00      	nop
  }
}
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007538:	e005      	b.n	8007546 <USBD_GetLen+0x1e>
  {
    len++;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	3301      	adds	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	3301      	adds	r3, #1
 8007544:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f5      	bne.n	800753a <USBD_GetLen+0x12>
  }

  return len;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2202      	movs	r2, #2
 800756c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fd32 	bl	8007fec <USBD_LL_Transmit>

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	2100      	movs	r1, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fd21 	bl	8007fec <USBD_LL_Transmit>

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2203      	movs	r2, #3
 80075c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	2100      	movs	r1, #0
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fd3c 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	2100      	movs	r1, #0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fd2b 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2204      	movs	r2, #4
 800761c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007620:	2300      	movs	r3, #0
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fce0 	bl	8007fec <USBD_LL_Transmit>

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2205      	movs	r2, #5
 8007642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007646:	2300      	movs	r3, #0
 8007648:	2200      	movs	r2, #0
 800764a:	2100      	movs	r1, #0
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fd05 	bl	800805c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007660:	2200      	movs	r2, #0
 8007662:	4912      	ldr	r1, [pc, #72]	; (80076ac <MX_USB_DEVICE_Init+0x50>)
 8007664:	4812      	ldr	r0, [pc, #72]	; (80076b0 <MX_USB_DEVICE_Init+0x54>)
 8007666:	f7fe fcd7 	bl	8006018 <USBD_Init>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007670:	f7f9 f814 	bl	800069c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007674:	490f      	ldr	r1, [pc, #60]	; (80076b4 <MX_USB_DEVICE_Init+0x58>)
 8007676:	480e      	ldr	r0, [pc, #56]	; (80076b0 <MX_USB_DEVICE_Init+0x54>)
 8007678:	f7fe fcfe 	bl	8006078 <USBD_RegisterClass>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007682:	f7f9 f80b 	bl	800069c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007686:	490c      	ldr	r1, [pc, #48]	; (80076b8 <MX_USB_DEVICE_Init+0x5c>)
 8007688:	4809      	ldr	r0, [pc, #36]	; (80076b0 <MX_USB_DEVICE_Init+0x54>)
 800768a:	f7fe fcab 	bl	8005fe4 <USBD_CUSTOM_HID_RegisterInterface>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007694:	f7f9 f802 	bl	800069c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <MX_USB_DEVICE_Init+0x54>)
 800769a:	f7fe fd23 	bl	80060e4 <USBD_Start>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076a4:	f7f8 fffa 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200000b4 	.word	0x200000b4
 80076b0:	200001c0 	.word	0x200001c0
 80076b4:	20000010 	.word	0x20000010
 80076b8:	200000a4 	.word	0x200000a4

080076bc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80076d0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	460a      	mov	r2, r1
 80076e6:	71fb      	strb	r3, [r7, #7]
 80076e8:	4613      	mov	r3, r2
 80076ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80076ec:	4803      	ldr	r0, [pc, #12]	; (80076fc <CUSTOM_HID_OutEvent_FS+0x20>)
 80076ee:	f7fe fc17 	bl	8005f20 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80076f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200001c0 	.word	0x200001c0

08007700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2212      	movs	r2, #18
 8007710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007712:	4b03      	ldr	r3, [pc, #12]	; (8007720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	200000d4 	.word	0x200000d4

08007724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2204      	movs	r2, #4
 8007734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	200000f4 	.word	0x200000f4

08007748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	4907      	ldr	r1, [pc, #28]	; (800777c <USBD_FS_ProductStrDescriptor+0x34>)
 800775e:	4808      	ldr	r0, [pc, #32]	; (8007780 <USBD_FS_ProductStrDescriptor+0x38>)
 8007760:	f7ff fe9c 	bl	800749c <USBD_GetString>
 8007764:	e004      	b.n	8007770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4904      	ldr	r1, [pc, #16]	; (800777c <USBD_FS_ProductStrDescriptor+0x34>)
 800776a:	4805      	ldr	r0, [pc, #20]	; (8007780 <USBD_FS_ProductStrDescriptor+0x38>)
 800776c:	f7ff fe96 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	2000049c 	.word	0x2000049c
 8007780:	08008214 	.word	0x08008214

08007784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	4904      	ldr	r1, [pc, #16]	; (80077a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007794:	4804      	ldr	r0, [pc, #16]	; (80077a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007796:	f7ff fe81 	bl	800749c <USBD_GetString>
  return USBD_StrDesc;
 800779a:	4b02      	ldr	r3, [pc, #8]	; (80077a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	2000049c 	.word	0x2000049c
 80077a8:	08008228 	.word	0x08008228

080077ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	221a      	movs	r2, #26
 80077bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077be:	f000 f855 	bl	800786c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077c2:	4b02      	ldr	r3, [pc, #8]	; (80077cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200000f8 	.word	0x200000f8

080077d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077e6:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077e8:	f7ff fe58 	bl	800749c <USBD_GetString>
 80077ec:	e004      	b.n	80077f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077f4:	f7ff fe52 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000049c 	.word	0x2000049c
 8007808:	0800823c 	.word	0x0800823c

0800780c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	4907      	ldr	r1, [pc, #28]	; (8007840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007822:	4808      	ldr	r0, [pc, #32]	; (8007844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007824:	f7ff fe3a 	bl	800749c <USBD_GetString>
 8007828:	e004      	b.n	8007834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4904      	ldr	r1, [pc, #16]	; (8007840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800782e:	4805      	ldr	r0, [pc, #20]	; (8007844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007830:	f7ff fe34 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	2000049c 	.word	0x2000049c
 8007844:	08008250 	.word	0x08008250

08007848 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	220c      	movs	r2, #12
 8007858:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	200000e8 	.word	0x200000e8

0800786c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <Get_SerialNum+0x44>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <Get_SerialNum+0x48>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <Get_SerialNum+0x4c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007892:	2208      	movs	r2, #8
 8007894:	4909      	ldr	r1, [pc, #36]	; (80078bc <Get_SerialNum+0x50>)
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f814 	bl	80078c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800789c:	2204      	movs	r2, #4
 800789e:	4908      	ldr	r1, [pc, #32]	; (80078c0 <Get_SerialNum+0x54>)
 80078a0:	68b8      	ldr	r0, [r7, #8]
 80078a2:	f000 f80f 	bl	80078c4 <IntToUnicode>
  }
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	1fff7590 	.word	0x1fff7590
 80078b4:	1fff7594 	.word	0x1fff7594
 80078b8:	1fff7598 	.word	0x1fff7598
 80078bc:	200000fa 	.word	0x200000fa
 80078c0:	2000010a 	.word	0x2000010a

080078c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	75fb      	strb	r3, [r7, #23]
 80078da:	e027      	b.n	800792c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	0f1b      	lsrs	r3, r3, #28
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d80b      	bhi.n	80078fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0f1b      	lsrs	r3, r3, #28
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4619      	mov	r1, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	440b      	add	r3, r1
 80078f4:	3230      	adds	r2, #48	; 0x30
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e00a      	b.n	8007912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	0f1b      	lsrs	r3, r3, #28
 8007900:	b2da      	uxtb	r2, r3
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4619      	mov	r1, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	440b      	add	r3, r1
 800790c:	3237      	adds	r2, #55	; 0x37
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	3301      	adds	r3, #1
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	3301      	adds	r3, #1
 800792a:	75fb      	strb	r3, [r7, #23]
 800792c:	7dfa      	ldrb	r2, [r7, #23]
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d3d3      	bcc.n	80078dc <IntToUnicode+0x18>
  }
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0ac      	sub	sp, #176	; 0xb0
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800795c:	f107 0314 	add.w	r3, r7, #20
 8007960:	2288      	movs	r2, #136	; 0x88
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fc1d 	bl	80081a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007972:	d173      	bne.n	8007a5c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007978:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800797a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800797e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007982:	2301      	movs	r3, #1
 8007984:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800798a:	2318      	movs	r3, #24
 800798c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800798e:	2307      	movs	r3, #7
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007992:	2302      	movs	r3, #2
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007996:	2302      	movs	r3, #2
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800799a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800799e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fb fb27 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80079b0:	f7f8 fe74 	bl	800069c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 80079b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b8:	4a2a      	ldr	r2, [pc, #168]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079c0:	4b28      	ldr	r3, [pc, #160]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 80079c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80079d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d4:	2302      	movs	r3, #2
 80079d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e0:	2303      	movs	r3, #3
 80079e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079e6:	230a      	movs	r3, #10
 80079e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80079f0:	4619      	mov	r1, r3
 80079f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079f6:	f7f9 f929 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079fa:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a06:	4b17      	ldr	r3, [pc, #92]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d114      	bne.n	8007a48 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	4a10      	ldr	r2, [pc, #64]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a28:	6593      	str	r3, [r2, #88]	; 0x58
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007a36:	f7fa fccf 	bl	80023d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <HAL_PCD_MspInit+0x120>)
 8007a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6593      	str	r3, [r2, #88]	; 0x58
 8007a46:	e001      	b.n	8007a4c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007a48:	f7fa fcc6 	bl	80023d8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2043      	movs	r0, #67	; 0x43
 8007a52:	f7f9 f8c4 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a56:	2043      	movs	r0, #67	; 0x43
 8007a58:	f7f9 f8dd 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	37b0      	adds	r7, #176	; 0xb0
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40021000 	.word	0x40021000

08007a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fe fb7d 	bl	800617e <USBD_LL_SetupStage>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7fe fbb7 	bl	8006228 <USBD_LL_DataOutStage>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	3348      	adds	r3, #72	; 0x48
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f7fe fc50 	bl	800638e <USBD_LL_DataInStage>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fd8a 	bl	800661e <USBD_LL_SOF>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d001      	beq.n	8007b2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b26:	f7f8 fdb9 	bl	800069c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b30:	7bfa      	ldrb	r2, [r7, #15]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fd2e 	bl	8006596 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fcd6 	bl	80064f2 <USBD_LL_Reset>
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fd1d 	bl	80065b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a03      	ldr	r2, [pc, #12]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b8a:	f043 0306 	orr.w	r3, r3, #6
 8007b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d007      	beq.n	8007bd4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <HAL_PCD_ResumeCallback+0x4c>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	4a07      	ldr	r2, [pc, #28]	; (8007be8 <HAL_PCD_ResumeCallback+0x4c>)
 8007bca:	f023 0306 	bic.w	r3, r3, #6
 8007bce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007bd0:	f000 fae2 	bl	8008198 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fd07 	bl	80065ee <USBD_LL_Resume>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed00 	.word	0xe000ed00

08007bec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fd5d 	bl	80066c2 <USBD_LL_IsoOUTIncomplete>
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fd19 	bl	800665e <USBD_LL_IsoINIncomplete>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fd6f 	bl	8006726 <USBD_LL_DevConnected>
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fd6c 	bl	800673c <USBD_LL_DevDisconnected>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d13c      	bne.n	8007cf6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c7c:	4a20      	ldr	r2, [pc, #128]	; (8007d00 <USBD_LL_Init+0x94>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <USBD_LL_Init+0x94>)
 8007c88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c8c:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <USBD_LL_Init+0x94>)
 8007c8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c94:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <USBD_LL_Init+0x94>)
 8007c96:	2206      	movs	r2, #6
 8007c98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c9a:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <USBD_LL_Init+0x94>)
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ca0:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <USBD_LL_Init+0x94>)
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ca6:	4b16      	ldr	r3, [pc, #88]	; (8007d00 <USBD_LL_Init+0x94>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cbe:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cca:	480d      	ldr	r0, [pc, #52]	; (8007d00 <USBD_LL_Init+0x94>)
 8007ccc:	f7f9 f980 	bl	8000fd0 <HAL_PCD_Init>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cd6:	f7f8 fce1 	bl	800069c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cda:	2180      	movs	r1, #128	; 0x80
 8007cdc:	4808      	ldr	r0, [pc, #32]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cde:	f7fa fad2 	bl	8002286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ce2:	2240      	movs	r2, #64	; 0x40
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4806      	ldr	r0, [pc, #24]	; (8007d00 <USBD_LL_Init+0x94>)
 8007ce8:	f7fa fa86 	bl	80021f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cec:	2280      	movs	r2, #128	; 0x80
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4803      	ldr	r0, [pc, #12]	; (8007d00 <USBD_LL_Init+0x94>)
 8007cf2:	f7fa fa81 	bl	80021f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	2000069c 	.word	0x2000069c

08007d04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7f9 fa7c 	bl	8001218 <HAL_PCD_Start>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d816      	bhi.n	8007d58 <USBD_LL_Start+0x54>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <USBD_LL_Start+0x2c>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d47 	.word	0x08007d47
 8007d38:	08007d4d 	.word	0x08007d4d
 8007d3c:	08007d53 	.word	0x08007d53
    case HAL_OK :
      usb_status = USBD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
    break;
 8007d44:	e00b      	b.n	8007d5e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4a:	e008      	b.n	8007d5e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	e005      	b.n	8007d5e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	73fb      	strb	r3, [r7, #15]
    break;
 8007d56:	e002      	b.n	8007d5e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	bf00      	nop
  }
  return usb_status;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	70fb      	strb	r3, [r7, #3]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70bb      	strb	r3, [r7, #2]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d90:	78bb      	ldrb	r3, [r7, #2]
 8007d92:	883a      	ldrh	r2, [r7, #0]
 8007d94:	78f9      	ldrb	r1, [r7, #3]
 8007d96:	f7f9 ff26 	bl	8001be6 <HAL_PCD_EP_Open>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d817      	bhi.n	8007dd4 <USBD_LL_OpenEP+0x6c>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBD_LL_OpenEP+0x44>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dc3 	.word	0x08007dc3
 8007db4:	08007dc9 	.word	0x08007dc9
 8007db8:	08007dcf 	.word	0x08007dcf
    case HAL_OK :
      usb_status = USBD_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	e00b      	b.n	8007dda <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc6:	e008      	b.n	8007dda <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
    break;
 8007dcc:	e005      	b.n	8007dda <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd2:	e002      	b.n	8007dda <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd8:	bf00      	nop
  }
  return usb_status;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7f9 ff57 	bl	8001cb6 <HAL_PCD_EP_Close>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d816      	bhi.n	8007e40 <USBD_LL_CloseEP+0x5c>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <USBD_LL_CloseEP+0x34>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e2f 	.word	0x08007e2f
 8007e20:	08007e35 	.word	0x08007e35
 8007e24:	08007e3b 	.word	0x08007e3b
    case HAL_OK :
      usb_status = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e2c:	e00b      	b.n	8007e46 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	73fb      	strb	r3, [r7, #15]
    break;
 8007e32:	e008      	b.n	8007e46 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
    break;
 8007e38:	e005      	b.n	8007e46 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3e:	e002      	b.n	8007e46 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	73fb      	strb	r3, [r7, #15]
    break;
 8007e44:	bf00      	nop
  }
  return usb_status;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7f9 ffce 	bl	8001e10 <HAL_PCD_EP_SetStall>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d816      	bhi.n	8007eac <USBD_LL_StallEP+0x5c>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <USBD_LL_StallEP+0x34>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007e9b 	.word	0x08007e9b
 8007e8c:	08007ea1 	.word	0x08007ea1
 8007e90:	08007ea7 	.word	0x08007ea7
    case HAL_OK :
      usb_status = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
    break;
 8007e98:	e00b      	b.n	8007eb2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9e:	e008      	b.n	8007eb2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	e005      	b.n	8007eb2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eaa:	e002      	b.n	8007eb2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	bf00      	nop
  }
  return usb_status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f9 fffa 	bl	8001ed4 <HAL_PCD_EP_ClrStall>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d816      	bhi.n	8007f18 <USBD_LL_ClearStallEP+0x5c>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <USBD_LL_ClearStallEP+0x34>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f07 	.word	0x08007f07
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f13 	.word	0x08007f13
    case HAL_OK :
      usb_status = USBD_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]
    break;
 8007f04:	e00b      	b.n	8007f1e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f06:	2303      	movs	r3, #3
 8007f08:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0a:	e008      	b.n	8007f1e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f10:	e005      	b.n	8007f1e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
    break;
 8007f16:	e002      	b.n	8007f1e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1c:	bf00      	nop
  }
  return usb_status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da0b      	bge.n	8007f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	333e      	adds	r3, #62	; 0x3e
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	e00b      	b.n	8007f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f62:	68f9      	ldr	r1, [r7, #12]
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f9 fdfc 	bl	8001b9c <HAL_PCD_SetAddress>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d816      	bhi.n	8007fdc <USBD_LL_SetUSBAddress+0x5c>
 8007fae:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <USBD_LL_SetUSBAddress+0x34>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007fc5 	.word	0x08007fc5
 8007fb8:	08007fcb 	.word	0x08007fcb
 8007fbc:	08007fd1 	.word	0x08007fd1
 8007fc0:	08007fd7 	.word	0x08007fd7
    case HAL_OK :
      usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	e00b      	b.n	8007fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fce:	e008      	b.n	8007fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd4:	e005      	b.n	8007fe2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fda:	e002      	b.n	8007fe2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe0:	bf00      	nop
  }
  return usb_status;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800800a:	7af9      	ldrb	r1, [r7, #11]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	f7f9 fecd 	bl	8001dae <HAL_PCD_EP_Transmit>
 8008014:	4603      	mov	r3, r0
 8008016:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008018:	7dbb      	ldrb	r3, [r7, #22]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d816      	bhi.n	800804c <USBD_LL_Transmit+0x60>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <USBD_LL_Transmit+0x38>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008035 	.word	0x08008035
 8008028:	0800803b 	.word	0x0800803b
 800802c:	08008041 	.word	0x08008041
 8008030:	08008047 	.word	0x08008047
    case HAL_OK :
      usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
    break;
 8008038:	e00b      	b.n	8008052 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	75fb      	strb	r3, [r7, #23]
    break;
 800803e:	e008      	b.n	8008052 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
    break;
 8008044:	e005      	b.n	8008052 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
    break;
 800804a:	e002      	b.n	8008052 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	75fb      	strb	r3, [r7, #23]
    break;
 8008050:	bf00      	nop
  }
  return usb_status;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	460b      	mov	r3, r1
 800806a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800807a:	7af9      	ldrb	r1, [r7, #11]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	f7f9 fe63 	bl	8001d4a <HAL_PCD_EP_Receive>
 8008084:	4603      	mov	r3, r0
 8008086:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008088:	7dbb      	ldrb	r3, [r7, #22]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d816      	bhi.n	80080bc <USBD_LL_PrepareReceive+0x60>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_LL_PrepareReceive+0x38>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ab 	.word	0x080080ab
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b7 	.word	0x080080b7
    case HAL_OK :
      usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
    break;
 80080a8:	e00b      	b.n	80080c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	75fb      	strb	r3, [r7, #23]
    break;
 80080ae:	e008      	b.n	80080c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]
    break;
 80080b4:	e005      	b.n	80080c2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	75fb      	strb	r3, [r7, #23]
    break;
 80080ba:	e002      	b.n	80080c2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	75fb      	strb	r3, [r7, #23]
    break;
 80080c0:	bf00      	nop
  }
  return usb_status;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_PCDEx_LPM_Callback+0x18>
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d01f      	beq.n	8008122 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80080e2:	e03b      	b.n	800815c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80080ec:	f000 f854 	bl	8008198 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080f0:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <HAL_PCDEx_LPM_Callback+0x98>)
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_PCDEx_LPM_Callback+0x98>)
 80080f6:	f023 0306 	bic.w	r3, r3, #6
 80080fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fa67 	bl	80065ee <USBD_LL_Resume>
    break;
 8008120:	e01c      	b.n	800815c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008134:	f043 0301 	orr.w	r3, r3, #1
 8008138:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe fa38 	bl	80065b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_PCDEx_LPM_Callback+0x98>)
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	4a04      	ldr	r2, [pc, #16]	; (8008164 <HAL_PCDEx_LPM_Callback+0x98>)
 8008154:	f043 0306 	orr.w	r3, r3, #6
 8008158:	6113      	str	r3, [r2, #16]
    break;
 800815a:	bf00      	nop
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	e000ed00 	.word	0xe000ed00

08008168 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008170:	4b03      	ldr	r3, [pc, #12]	; (8008180 <USBD_static_malloc+0x18>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000ba8 	.word	0x20000ba8

08008184 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800819c:	f7f8 fa1c 	bl	80005d8 <SystemClock_Config>
}
 80081a0:	bf00      	nop
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <memset>:
 80081a4:	4402      	add	r2, r0
 80081a6:	4603      	mov	r3, r0
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d100      	bne.n	80081ae <memset+0xa>
 80081ac:	4770      	bx	lr
 80081ae:	f803 1b01 	strb.w	r1, [r3], #1
 80081b2:	e7f9      	b.n	80081a8 <memset+0x4>

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	; (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	; (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	; (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	; (80081f8 <__libc_init_array+0x44>)
 80081c8:	f000 f818 	bl	80081fc <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	080082b8 	.word	0x080082b8
 80081f0:	080082b8 	.word	0x080082b8
 80081f4:	080082b8 	.word	0x080082b8
 80081f8:	080082bc 	.word	0x080082bc

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	bf00      	nop
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
