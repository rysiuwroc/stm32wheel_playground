
button_press_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f40  08007f40  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f48  08007f48  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08007f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000012c  0800807c  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800807c  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001335c  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f1  00000000  00000000  000334fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  000366f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf7  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284af  00000000  00000000  000382bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d16  00000000  00000000  0006076e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb042  00000000  00000000  00075484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ff8  00000000  00000000  001604c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001644c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e98 	.word	0x08007e98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08007e98 	.word	0x08007e98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_GPIO_Init+0xf4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Green_LED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f248 0120 	movw	r1, #32800	; 0x8020
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fd4c 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4619      	mov	r1, r3
 800055e:	4817      	ldr	r0, [pc, #92]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000560:	f000 fb94 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Green_LED_Pin;
 8000564:	f248 0320 	movw	r3, #32800	; 0x8020
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f000 fb84 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Yellow_Button_Pin;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Yellow_Button_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	4808      	ldr	r0, [pc, #32]	; (80005bc <MX_GPIO_Init+0xf8>)
 800059c:	f000 fb76 	bl	8000c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2100      	movs	r1, #0
 80005a4:	2028      	movs	r0, #40	; 0x28
 80005a6:	f000 fb3a 	bl	8000c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005aa:	2028      	movs	r0, #40	; 0x28
 80005ac:	f000 fb53 	bl	8000c56 <HAL_NVIC_EnableIRQ>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800

080005c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80005ca:	f000 fa1d 	bl	8000a08 <HAL_GetTick>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_GPIO_EXTI_Callback+0x44>)
 80005d2:	6013      	str	r3, [r2, #0]
	if(GPIO_Pin==B1_Pin)
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005da:	d104      	bne.n	80005e6 <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005dc:	2120      	movs	r1, #32
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f000 fd15 	bl	8001010 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin==Yellow_Button_Pin)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ec:	d105      	bne.n	80005fa <HAL_GPIO_EXTI_Callback+0x3a>
	{
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 fd0b 	bl	8001010 <HAL_GPIO_TogglePin>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000148 	.word	0x20000148

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 f98c 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f807 	bl	8000622 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff ff56 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8d0 	bl	80007bc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800061c:	f006 fe98 	bl	8007350 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x18>

08000622 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b096      	sub	sp, #88	; 0x58
 8000626:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2244      	movs	r2, #68	; 0x44
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f007 fc05 	bl	8007e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000648:	f001 feb2 	bl	80023b0 <HAL_PWREx_ControlVoltageScaling>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000652:	f000 f838 	bl	80006c6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000656:	2310      	movs	r3, #16
 8000658:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000662:	2360      	movs	r3, #96	; 0x60
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066a:	2301      	movs	r3, #1
 800066c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000672:	2310      	movs	r3, #16
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fef8 	bl	800247c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000692:	f000 f818 	bl	80006c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fac0 	bl	8002c34 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ba:	f000 f804 	bl	80006c6 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	; 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ca:	b672      	cpsid	i
}
 80006cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ce:	e7fe      	b.n	80006ce <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6613      	str	r3, [r2, #96]	; 0x60
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6593      	str	r3, [r2, #88]	; 0x58
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fa7e 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f93c 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Yellow_Button_Pin);
 8000770:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000774:	f000 fc66 	bl	8001044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000778:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800077c:	f000 fc62 	bl	8001044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <OTG_FS_IRQHandler+0x10>)
 800078a:	f000 fdc6 	bl	800131a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200006b8 	.word	0x200006b8

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f003 f8f8 	bl	80039f4 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f7ff ff5c 	bl	80006c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000014c 	.word	0x2000014c
 8000818:	40004400 	.word	0x40004400

0800081c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0ac      	sub	sp, #176	; 0xb0
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2288      	movs	r2, #136	; 0x88
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f007 faff 	bl	8007e40 <memset>
  if(uartHandle->Instance==USART2)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_UART_MspInit+0xb0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d13b      	bne.n	80008c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fc0f 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000864:	f7ff ff2f 	bl	80006c6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 800086e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0xb4>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000898:	230c      	movs	r3, #12
 800089a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b0:	2307      	movs	r3, #7
 80008b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f000 f9e4 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008c4:	bf00      	nop
 80008c6:	37b0      	adds	r7, #176	; 0xb0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40021000 	.word	0x40021000

080008d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800090c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff ff5e 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f007 faa5 	bl	8007e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000906:	f7ff fe7f 	bl	8000608 <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800090c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000918:	08007f50 	.word	0x08007f50
  ldr r2, =_sbss
 800091c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000920:	20000bd8 	.word	0x20000bd8

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_Init+0x3c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_Init+0x3c>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093e:	2003      	movs	r0, #3
 8000940:	f000 f962 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f80f 	bl	8000968 <HAL_InitTick>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	e001      	b.n	800095a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000956:	f7ff febb 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800095a:	79fb      	ldrb	r3, [r7, #7]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_InitTick+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d023      	beq.n	80009c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_InitTick+0x70>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_InitTick+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f96d 	bl	8000c72 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10f      	bne.n	80009be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d809      	bhi.n	80009b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f937 	bl	8000c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_InitTick+0x74>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e007      	b.n	80009c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e004      	b.n	80009c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e001      	b.n	80009c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200001d4 	.word	0x200001d4

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200001d4 	.word	0x200001d4

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_Delay+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffde 	bl	8000a08 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff29 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff3e 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff8e 	bl	8000b5c <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff31 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffa2 	bl	8000bc4 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e17f      	b.n	8000f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8171 	beq.w	8000f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d118      	bne.n	8000d6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	6939      	ldr	r1, [r7, #16]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80ac 	beq.w	8000f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HAL_GPIO_Init+0x330>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a5e      	ldr	r2, [pc, #376]	; (8000fbc <HAL_GPIO_Init+0x330>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <HAL_GPIO_Init+0x330>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e56:	4a5a      	ldr	r2, [pc, #360]	; (8000fc0 <HAL_GPIO_Init+0x334>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x242>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <HAL_GPIO_Init+0x338>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x23e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <HAL_GPIO_Init+0x33c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x23a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4d      	ldr	r2, [pc, #308]	; (8000fcc <HAL_GPIO_Init+0x340>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x236>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_GPIO_Init+0x344>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x232>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <HAL_GPIO_Init+0x348>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x22e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <HAL_GPIO_Init+0x34c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x22a>
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e00c      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00a      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e008      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x244>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee0:	4937      	ldr	r1, [pc, #220]	; (8000fc0 <HAL_GPIO_Init+0x334>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f12:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_GPIO_Init+0x350>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f47f ae78 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000c00 	.word	0x48000c00
 8000fd0:	48001000 	.word	0x48001000
 8000fd4:	48001400 	.word	0x48001400
 8000fd8:	48001800 	.word	0x48001800
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4013      	ands	r3, r2
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43d9      	mvns	r1, r3
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	400b      	ands	r3, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff faac 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b08f      	sub	sp, #60	; 0x3c
 8001078:	af0a      	add	r7, sp, #40	; 0x28
 800107a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e116      	b.n	80012b4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f006 fa9d 	bl	80075e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fa8a 	bl	80045de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	687e      	ldr	r6, [r7, #4]
 80010d2:	466d      	mov	r5, sp
 80010d4:	f106 0410 	add.w	r4, r6, #16
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e8:	1d33      	adds	r3, r6, #4
 80010ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f003 f99c 	bl	800442a <USB_CoreInit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0d7      	b.n	80012b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fa78 	bl	8004600 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e04a      	b.n	80011ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	333d      	adds	r3, #61	; 0x3d
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	333c      	adds	r3, #60	; 0x3c
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	b298      	uxth	r0, r3
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3356      	adds	r3, #86	; 0x56
 8001152:	4602      	mov	r2, r0
 8001154:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3340      	adds	r3, #64	; 0x40
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	3344      	adds	r3, #68	; 0x44
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3348      	adds	r3, #72	; 0x48
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	334c      	adds	r3, #76	; 0x4c
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3af      	bcc.n	8001116 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e044      	b.n	8001246 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	3301      	adds	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3b5      	bcc.n	80011bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	687e      	ldr	r6, [r7, #4]
 8001258:	466d      	mov	r5, sp
 800125a:	f106 0410 	add.w	r4, r6, #16
 800125e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800126a:	e885 0003 	stmia.w	r5, {r0, r1}
 800126e:	1d33      	adds	r3, r6, #4
 8001270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f003 fa10 	bl	8004698 <USB_DevInit>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e014      	b.n	80012b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f001 f852 	bl	800234c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f9be 	bl	800562e <USB_DevDisconnect>

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_PCD_Start+0x1c>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e01c      	b.n	8001312 <HAL_PCD_Start+0x56>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f95f 	bl	80045bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f972 	bl	80055ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b08d      	sub	sp, #52	; 0x34
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fa30 	bl	8005796 <USB_GetMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 847e 	bne.w	8001c3a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f004 f994 	bl	8005670 <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8474 	beq.w	8001c38 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f004 f981 	bl	8005670 <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d107      	bne.n	8001388 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f002 0202 	and.w	r2, r2, #2
 8001386:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f96f 	bl	8005670 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b10      	cmp	r3, #16
 800139a:	d161      	bne.n	8001460 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0210 	bic.w	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 020f 	and.w	r2, r3, #15
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	0c5b      	lsrs	r3, r3, #17
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d124      	bne.n	8001422 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d035      	beq.n	8001450 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	6a38      	ldr	r0, [r7, #32]
 80013f8:	f003 ffa6 	bl	8005348 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	441a      	add	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	e016      	b.n	8001450 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	0c5b      	lsrs	r3, r3, #17
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	2b06      	cmp	r3, #6
 800142c:	d110      	bne.n	8001450 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f003 ff85 	bl	8005348 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	441a      	add	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0210 	orr.w	r2, r2, #16
 800145e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f903 	bl	8005670 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001474:	f040 80a7 	bne.w	80015c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f004 f908 	bl	8005696 <USB_ReadDevAllOutEpInterrupt>
 8001486:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001488:	e099      	b.n	80015be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 808e 	beq.w	80015b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 f92c 	bl	80056fe <USB_ReadDevOutEPInterrupt>
 80014a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fe66 	bl	8002198 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fea2 	bl	8002234 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2310      	movs	r3, #16
 800150a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d030      	beq.n	8001578 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b80      	cmp	r3, #128	; 0x80
 8001520:	d109      	bne.n	8001536 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001534:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f006 f991 	bl	8007888 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2302      	movs	r3, #2
 8001576:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	2320      	movs	r3, #32
 8001592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015aa:	461a      	mov	r2, r3
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f af62 	bne.w	800148a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 f850 	bl	8005670 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015da:	f040 80a4 	bne.w	8001726 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 f871 	bl	80056ca <USB_ReadDevAllInEpInterrupt>
 80015e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015ee:	e096      	b.n	800171e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 808b 	beq.w	8001712 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f897 	bl	800573a <USB_ReadDevInEPInterrupt>
 800160c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	2201      	movs	r2, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	69f9      	ldr	r1, [r7, #28]
 8001634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001638:	4013      	ands	r3, r2
 800163a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2301      	movs	r3, #1
 800164c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f006 f882 	bl	800775e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	015a      	lsls	r2, r3, #5
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4413      	add	r3, r2
 800166c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001670:	461a      	mov	r2, r3
 8001672:	2308      	movs	r3, #8
 8001674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	2310      	movs	r3, #16
 8001690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	015a      	lsls	r2, r3, #5
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a8:	461a      	mov	r2, r3
 80016aa:	2340      	movs	r3, #64	; 0x40
 80016ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ba:	6a38      	ldr	r0, [r7, #32]
 80016bc:	f003 f92e 	bl	800491c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	3338      	adds	r3, #56	; 0x38
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2200      	movs	r2, #0
 80016e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 f8df 	bl	80078ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	2302      	movs	r3, #2
 80016fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800170a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fcba 	bl	8002086 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f af65 	bne.w	80015f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 ffa0 	bl	8005670 <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800173a:	d122      	bne.n	8001782 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f006 faff 	bl	8007d68 <HAL_PCDEx_LPM_Callback>
 800176a:	e002      	b.n	8001772 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f006 f863 	bl	8007838 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 ff72 	bl	8005670 <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001796:	d112      	bne.n	80017be <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f006 f81f 	bl	80077ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 ff54 	bl	8005670 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017d2:	d121      	bne.n	8001818 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017e2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d111      	bne.n	8001812 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	f003 020f 	and.w	r2, r3, #15
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001808:	2101      	movs	r1, #1
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f006 faac 	bl	8007d68 <HAL_PCDEx_LPM_Callback>
 8001810:	e002      	b.n	8001818 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f005 ffea 	bl	80077ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 ff27 	bl	8005670 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182c:	f040 80b5 	bne.w	800199a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2110      	movs	r1, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f003 f866 	bl	800491c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001854:	e046      	b.n	80018e4 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001862:	461a      	mov	r2, r3
 8001864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001868:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187a:	0151      	lsls	r1, r2, #5
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	440a      	add	r2, r1
 8001880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001896:	461a      	mov	r2, r3
 8001898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800189c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ae:	0151      	lsls	r1, r2, #5
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	440a      	add	r2, r1
 80018b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	0151      	lsls	r1, r2, #5
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	440a      	add	r2, r1
 80018d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3b3      	bcc.n	8001856 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001900:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191a:	f043 030b 	orr.w	r3, r3, #11
 800191e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001930:	f043 030b 	orr.w	r3, r3, #11
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	e015      	b.n	8001964 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800194a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800194e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195e:	f043 030b 	orr.w	r3, r3, #11
 8001962:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001972:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001976:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f003 ff37 	bl	80057f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fe66 	bl	8005670 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d124      	bne.n	80019fa <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fefc 	bl	80057b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f829 	bl	8004a16 <USB_GetDevSpeed>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	f001 fabc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 80019d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4620      	mov	r0, r4
 80019e0:	f002 fd50 	bl	8004484 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 fee2 	bl	80077ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fe36 	bl	8005670 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d10a      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f005 febf 	bl	8007792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f002 0208 	and.w	r2, r2, #8
 8001a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fe21 	bl	8005670 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b80      	cmp	r3, #128	; 0x80
 8001a36:	d122      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e014      	b.n	8001a74 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fadb 	bl	8002024 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	3301      	adds	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3e5      	bcc.n	8001a4a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fdf4 	bl	8005670 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a92:	d13b      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e02b      	b.n	8001af2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3340      	adds	r3, #64	; 0x40
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d115      	bne.n	8001aec <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da12      	bge.n	8001aec <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333f      	adds	r3, #63	; 0x3f
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa9c 	bl	8002024 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3301      	adds	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3ce      	bcc.n	8001a9a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fdad 	bl	8005670 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b20:	d155      	bne.n	8001bce <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e045      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d12e      	bne.n	8001bae <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da2b      	bge.n	8001bae <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b62:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d121      	bne.n	8001bae <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6053      	str	r3, [r2, #4]
            break;
 8001bac:	e007      	b.n	8001bbe <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3b4      	bcc.n	8001b28 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fd4c 	bl	8005670 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d10a      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f005 fe73 	bl	80078d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fd36 	bl	8005670 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d115      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f005 fe63 	bl	80078ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e000      	b.n	8001c3a <HAL_PCD_IRQHandler+0x920>
      return;
 8001c38:	bf00      	nop
    }
  }
}
 8001c3a:	3734      	adds	r7, #52	; 0x34
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_SetAddress+0x1a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e013      	b.n	8001c82 <HAL_PCD_SetAddress+0x42>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fc94 	bl	80055a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	4608      	mov	r0, r1
 8001c94:	4611      	mov	r1, r2
 8001c96:	461a      	mov	r2, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	70fb      	strb	r3, [r7, #3]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	803b      	strh	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da0f      	bge.n	8001cd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3338      	adds	r3, #56	; 0x38
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	705a      	strb	r2, [r3, #1]
 8001cce:	e00f      	b.n	8001cf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cfc:	883a      	ldrh	r2, [r7, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	78ba      	ldrb	r2, [r7, #2]
 8001d06:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d1a:	78bb      	ldrb	r3, [r7, #2]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_EP_Open+0xaa>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00e      	b.n	8001d52 <HAL_PCD_EP_Open+0xc8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fe86 	bl	8004a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d50:	7afb      	ldrb	r3, [r7, #11]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da0f      	bge.n	8001d8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	3338      	adds	r3, #56	; 0x38
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
 8001d8c:	e00f      	b.n	8001dae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_EP_Close+0x6e>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e00e      	b.n	8001de6 <HAL_PCD_EP_Close+0x8c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fec4 	bl	8004b64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6979      	ldr	r1, [r7, #20]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 ff6a 	bl	8004d1c <USB_EPStartXfer>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6979      	ldr	r1, [r7, #20]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 ff39 	bl	8004d1c <USB_EPStartXfer>

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d901      	bls.n	8001ed2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e04e      	b.n	8001f70 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da0f      	bge.n	8001efa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3338      	adds	r3, #56	; 0x38
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	705a      	strb	r2, [r3, #1]
 8001ef8:	e00d      	b.n	8001f16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_EP_SetStall+0x82>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e01c      	b.n	8001f70 <HAL_PCD_EP_SetStall+0xbc>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fa57 	bl	80053f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f003 fc49 	bl	80057f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d901      	bls.n	8001f96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e042      	b.n	800201c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da0f      	bge.n	8001fbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3338      	adds	r3, #56	; 0x38
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	705a      	strb	r2, [r3, #1]
 8001fbc:	e00f      	b.n	8001fde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_ClrStall+0x86>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_ClrStall+0xa4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f003 fa61 	bl	80054d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0c      	bge.n	8002052 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e00c      	b.n	800206c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f884 	bl	8005180 <USB_EPStopXfer>
 8002078:	4603      	mov	r3, r0
 800207a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800207c:	7afb      	ldrb	r3, [r7, #11]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b088      	sub	sp, #32
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3338      	adds	r3, #56	; 0x38
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d901      	bls.n	80020be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d902      	bls.n	80020da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3303      	adds	r3, #3
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e2:	e026      	b.n	8002132 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d902      	bls.n	8002100 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3303      	adds	r3, #3
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68d9      	ldr	r1, [r3, #12]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	b29b      	uxth	r3, r3
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	f003 f8dd 	bl	80052d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	441a      	add	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	441a      	add	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	429a      	cmp	r2, r3
 8002146:	d809      	bhi.n	800215c <PCD_WriteEmptyTxFifo+0xd6>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002150:	429a      	cmp	r2, r3
 8002152:	d203      	bcs.n	800215c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1c3      	bne.n	80020e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	d811      	bhi.n	800218c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	2201      	movs	r2, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	43db      	mvns	r3, r3
 8002182:	6939      	ldr	r1, [r7, #16]
 8002184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002188:	4013      	ands	r3, r2
 800218a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	3304      	adds	r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <PCD_EP_OutXfrComplete_int+0x98>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d124      	bne.n	8002218 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	e01a      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	461a      	mov	r2, r3
 8002206:	2320      	movs	r3, #32
 8002208:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f005 fa89 	bl	8007728 <HAL_PCD_DataOutStageCallback>
 8002216:	e005      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f005 fa82 	bl	8007728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	4f54310a 	.word	0x4f54310a

08002234 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <PCD_EP_OutSetupPacket_int+0x64>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d90e      	bls.n	8002288 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002286:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f005 fa3b 	bl	8007704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	4f54300a 	.word	0x4f54300a

0800229c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	4613      	mov	r3, r2
 80022aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	0419      	lsls	r1, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
 80022c8:	e028      	b.n	800231c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e00d      	b.n	80022fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	3b01      	subs	r3, #1
 8002300:	429a      	cmp	r2, r3
 8002302:	d3ec      	bcc.n	80022de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002304:	883b      	ldrh	r3, [r7, #0]
 8002306:	0418      	lsls	r0, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b01      	subs	r3, #1
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	4302      	orrs	r2, r0
 8002314:	3340      	adds	r3, #64	; 0x40
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	f043 0303 	orr.w	r3, r3, #3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_PWREx_GetVoltageRange+0x18>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40007000 	.word	0x40007000

080023b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023be:	d130      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023cc:	d038      	beq.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2232      	movs	r2, #50	; 0x32
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9b      	lsrs	r3, r3, #18
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f4:	e002      	b.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d102      	bne.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x60>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f2      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d110      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e00f      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d007      	beq.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6053      	str	r3, [r2, #4]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e3ca      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248e:	4b97      	ldr	r3, [pc, #604]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002498:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80e4 	beq.w	8002678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	f040 808b 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8087 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3a2      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_RCC_OscConfig+0x7c>
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f6:	e005      	b.n	8002504 <HAL_RCC_OscConfig+0x88>
 80024f8:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002504:	4293      	cmp	r3, r2
 8002506:	d223      	bcs.n	8002550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fd55 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e383      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251c:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	496d      	ldr	r1, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4968      	ldr	r1, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e025      	b.n	800259c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4960      	ldr	r1, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	495b      	ldr	r1, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fd15 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e343      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259c:	f000 fc4a 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b52      	ldr	r3, [pc, #328]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	4950      	ldr	r1, [pc, #320]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a4e      	ldr	r2, [pc, #312]	; (80026f4 <HAL_RCC_OscConfig+0x278>)
 80025ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025bc:	4b4e      	ldr	r3, [pc, #312]	; (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe f9d1 	bl	8000968 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d052      	beq.n	8002676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	e327      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a42      	ldr	r2, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fa0e 	bl	8000a08 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f0:	f7fe fa0a 	bl	8000a08 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e310      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800260e:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a36      	ldr	r2, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4931      	ldr	r1, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	492c      	ldr	r1, [pc, #176]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	e01a      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a29      	ldr	r2, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264e:	f7fe f9db 	bl	8000a08 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002656:	f7fe f9d7 	bl	8000a08 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e2dd      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x1da>
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d074      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x21a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d10e      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d064      	beq.n	800276c <HAL_RCC_OscConfig+0x2f0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d160      	bne.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e2ba      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x24a>
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e026      	b.n	8002714 <HAL_RCC_OscConfig+0x298>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ce:	d115      	bne.n	80026fc <HAL_RCC_OscConfig+0x280>
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x298>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08007ef8 	.word	0x08007ef8
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004
 80026fc:	4ba0      	ldr	r3, [pc, #640]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a9f      	ldr	r2, [pc, #636]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b9d      	ldr	r3, [pc, #628]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a9c      	ldr	r2, [pc, #624]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe f974 	bl	8000a08 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe f970 	bl	8000a08 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e276      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4b92      	ldr	r3, [pc, #584]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2a8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe f960 	bl	8000a08 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe f95c 	bl	8000a08 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e262      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x2d0>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d060      	beq.n	800283c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x310>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d119      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x328>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e23f      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4973      	ldr	r1, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b8:	e040      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d023      	beq.n	800280a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe f91b 	bl	8000a08 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe f917 	bl	8000a08 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e21d      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b62      	ldr	r3, [pc, #392]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	495f      	ldr	r1, [pc, #380]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5c      	ldr	r2, [pc, #368]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe f8f7 	bl	8000a08 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe f8f3 	bl	8000a08 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1f9      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe f8d2 	bl	8000a08 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe f8ce 	bl	8000a08 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1d4      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800287c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCC_OscConfig+0x3ec>
 8002888:	e01b      	b.n	80028c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe f8b5 	bl	8000a08 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe f8b1 	bl	8000a08 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1b7      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b4:	4b32      	ldr	r3, [pc, #200]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a6 	beq.w	8002a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a26      	ldr	r2, [pc, #152]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x508>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d118      	bne.n	800293a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCC_OscConfig+0x508>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x508>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7fe f878 	bl	8000a08 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe f874 	bl	8000a08 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e17a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_RCC_OscConfig+0x508>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_RCC_OscConfig+0x4d8>
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002952:	e029      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d115      	bne.n	8002988 <HAL_RCC_OscConfig+0x50c>
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_RCC_OscConfig+0x504>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	4b9c      	ldr	r3, [pc, #624]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	4a9b      	ldr	r2, [pc, #620]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002998:	4b98      	ldr	r3, [pc, #608]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	4a97      	ldr	r2, [pc, #604]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe f82a 	bl	8000a08 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe f826 	bl	8000a08 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e12a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ed      	beq.n	80029b8 <HAL_RCC_OscConfig+0x53c>
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe f813 	bl	8000a08 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe f80f 	bl	8000a08 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e113      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fc:	4b7f      	ldr	r3, [pc, #508]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ed      	bne.n	80029e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b7a      	ldr	r3, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a79      	ldr	r2, [pc, #484]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80fe 	beq.w	8002c22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 80d0 	bne.w	8002bd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a30:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d130      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d127      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d11f      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a70:	2a07      	cmp	r2, #7
 8002a72:	bf14      	ite	ne
 8002a74:	2201      	movne	r2, #1
 8002a76:	2200      	moveq	r2, #0
 8002a78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d06e      	beq.n	8002b84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d069      	beq.n	8002b80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0ad      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad4:	f7fd ff98 	bl	8000a08 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fd ff94 	bl	8000a08 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e09a      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afa:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <HAL_RCC_OscConfig+0x784>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b14:	0212      	lsls	r2, r2, #8
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0552      	lsls	r2, r2, #21
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b28:	0852      	lsrs	r2, r2, #1
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0652      	lsls	r2, r2, #25
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b34:	0912      	lsrs	r2, r2, #4
 8002b36:	0452      	lsls	r2, r2, #17
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	4930      	ldr	r1, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b40:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b58:	f7fd ff56 	bl	8000a08 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fd ff52 	bl	8000a08 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e058      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7e:	e050      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e04f      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d148      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba8:	f7fd ff2e 	bl	8000a08 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fd ff2a 	bl	8000a08 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e030      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x734>
 8002bce:	e028      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_RCC_OscConfig+0x780>)
 8002bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fd ff11 	bl	8000a08 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	e00c      	b.n	8002c04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fd ff0d 	bl	8000a08 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d905      	bls.n	8002c04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e013      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ec      	bne.n	8002bea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4905      	ldr	r1, [pc, #20]	; (8002c2c <HAL_RCC_OscConfig+0x7b0>)
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x7b4>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
 8002c1c:	e001      	b.n	8002c22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	feeefffc 	.word	0xfeeefffc

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0e7      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b75      	ldr	r3, [pc, #468]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4970      	ldr	r1, [pc, #448]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0cf      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d908      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4960      	ldr	r1, [pc, #384]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04c      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d121      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0a6      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09a      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cea:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e08e      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e086      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4943      	ldr	r1, [pc, #268]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1c:	f7fd fe74 	bl	8000a08 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fd fe70 	bl	8000a08 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e06e      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d208      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	492b      	ldr	r1, [pc, #172]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d210      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	4923      	ldr	r1, [pc, #140]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e036      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4918      	ldr	r1, [pc, #96]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4910      	ldr	r1, [pc, #64]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002de8:	f000 f824 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	490b      	ldr	r1, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1f4>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1f8>)
 8002e06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1fc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fdab 	bl	8000968 <HAL_InitTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e16:	7afb      	ldrb	r3, [r7, #11]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08007ef8 	.word	0x08007ef8
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d121      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d11e      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e68:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e84:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e90:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e004      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d134      	bne.n	8002f2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0xa6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002edc:	617b      	str	r3, [r7, #20]
      break;
 8002ede:	e005      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ee2:	617b      	str	r3, [r7, #20]
      break;
 8002ee4:	e002      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	617b      	str	r3, [r7, #20]
      break;
 8002eea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	fb03 f202 	mul.w	r2, r3, r2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	0e5b      	lsrs	r3, r3, #25
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08007f10 	.word	0x08007f10
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000000 	.word	0x20000000

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08007f08 	.word	0x08007f08

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f94:	f7ff ffda 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08007f08 	.word	0x08007f08

08002fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fd4:	f7ff f9de 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 8002fd8:	6178      	str	r0, [r7, #20]
 8002fda:	e014      	b.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a24      	ldr	r2, [pc, #144]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ff4:	f7ff f9ce 	bl	8002394 <HAL_PWREx_GetVoltageRange>
 8002ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300c:	d10b      	bne.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d919      	bls.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2ba0      	cmp	r3, #160	; 0xa0
 8003018:	d902      	bls.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800301a:	2302      	movs	r3, #2
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e013      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003020:	2301      	movs	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	e010      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d902      	bls.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800302c:	2303      	movs	r3, #3
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e00a      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d102      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003038:	2302      	movs	r3, #2
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e004      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d101      	bne.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003044:	2301      	movs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	4909      	ldr	r1, [pc, #36]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	40022000 	.word	0x40022000

0800307c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003084:	2300      	movs	r3, #0
 8003086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003088:	2300      	movs	r3, #0
 800308a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d041      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a0:	d02a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a6:	d824      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b2:	d81e      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d010      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030be:	e018      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030c0:	4b86      	ldr	r3, [pc, #536]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a85      	ldr	r2, [pc, #532]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030cc:	e015      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fabb 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030de:	e00c      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3320      	adds	r3, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fba6 	bl	8003838 <RCCEx_PLLSAI2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	74fb      	strb	r3, [r7, #19]
      break;
 80030f6:	e000      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003100:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310e:	4973      	ldr	r1, [pc, #460]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003116:	e001      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d041      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800312c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003130:	d02a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003132:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003136:	d824      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800313e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003142:	d81e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d010      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314e:	e018      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003150:	4b62      	ldr	r3, [pc, #392]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a61      	ldr	r2, [pc, #388]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800315c:	e015      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fa73 	bl	8003650 <RCCEx_PLLSAI1_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800316e:	e00c      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3320      	adds	r3, #32
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fb5e 	bl	8003838 <RCCEx_PLLSAI2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003180:	e003      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	74fb      	strb	r3, [r7, #19]
      break;
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003190:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800319e:	494f      	ldr	r1, [pc, #316]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031a6:	e001      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a0 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031de:	6593      	str	r3, [r2, #88]	; 0x58
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031fc:	f7fd fc04 	bl	8000a08 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003202:	e009      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fd fc00 	bl	8000a08 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d902      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	74fb      	strb	r3, [r7, #19]
        break;
 8003216:	e005      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d15c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01f      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	d019      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd fbbf 	bl	8000a08 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328c:	e00b      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fd fbbb 	bl	8000a08 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d902      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	74fb      	strb	r3, [r7, #19]
            break;
 80032a4:	e006      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ec      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	4904      	ldr	r1, [pc, #16]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032d2:	e009      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e8:	7c7b      	ldrb	r3, [r7, #17]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	4b9e      	ldr	r3, [pc, #632]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4a9d      	ldr	r2, [pc, #628]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003306:	4b98      	ldr	r3, [pc, #608]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f023 0203 	bic.w	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4994      	ldr	r1, [pc, #592]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 020c 	bic.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	498c      	ldr	r1, [pc, #560]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800334a:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	4983      	ldr	r1, [pc, #524]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336c:	4b7e      	ldr	r3, [pc, #504]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	497b      	ldr	r1, [pc, #492]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338e:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	4972      	ldr	r1, [pc, #456]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	496a      	ldr	r1, [pc, #424]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	4961      	ldr	r1, [pc, #388]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033f4:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	4959      	ldr	r1, [pc, #356]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003416:	4b54      	ldr	r3, [pc, #336]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	4950      	ldr	r1, [pc, #320]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003438:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	4948      	ldr	r1, [pc, #288]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	493f      	ldr	r1, [pc, #252]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d028      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348a:	4937      	ldr	r1, [pc, #220]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d106      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a31      	ldr	r2, [pc, #196]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e011      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b2:	d10c      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f8c8 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	491f      	ldr	r1, [pc, #124]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d106      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003504:	60d3      	str	r3, [r2, #12]
 8003506:	e011      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003510:	d10c      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	2101      	movs	r1, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f899 	bl	8003650 <RCCEx_PLLSAI1_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02b      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	4908      	ldr	r1, [pc, #32]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003556:	d109      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a02      	ldr	r2, [pc, #8]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003562:	60d3      	str	r3, [r2, #12]
 8003564:	e014      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003574:	d10c      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f867 	bl	8003650 <RCCEx_PLLSAI1_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d02f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035aa:	4928      	ldr	r1, [pc, #160]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f844 	bl	8003650 <RCCEx_PLLSAI1_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d014      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	74bb      	strb	r3, [r7, #18]
 80035d6:	e011      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3320      	adds	r3, #32
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f925 	bl	8003838 <RCCEx_PLLSAI2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003616:	490d      	ldr	r1, [pc, #52]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363a:	4904      	ldr	r1, [pc, #16]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003642:	7cbb      	ldrb	r3, [r7, #18]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000

08003650 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365e:	4b75      	ldr	r3, [pc, #468]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d018      	beq.n	800369c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800366a:	4b72      	ldr	r3, [pc, #456]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
       ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003682:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
       ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d047      	beq.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e044      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d018      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x86>
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d825      	bhi.n	80036f4 <RCCEx_PLLSAI1_Config+0xa4>
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <RCCEx_PLLSAI1_Config+0x62>
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d009      	beq.n	80036c4 <RCCEx_PLLSAI1_Config+0x74>
 80036b0:	e020      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036b2:	4b60      	ldr	r3, [pc, #384]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c2:	e01a      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036c4:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e013      	b.n	80036fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036d6:	4b57      	ldr	r3, [pc, #348]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036e2:	4b54      	ldr	r3, [pc, #336]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036f2:	e006      	b.n	8003702 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e004      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003702:	bf00      	nop
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800370a:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	430b      	orrs	r3, r1
 8003720:	4944      	ldr	r1, [pc, #272]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d17d      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a40      	ldr	r2, [pc, #256]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003738:	f7fd f966 	bl	8000a08 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003740:	f7fd f962 	bl	8000a08 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
        break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003754:	4b37      	ldr	r3, [pc, #220]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ef      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d160      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376c:	4b31      	ldr	r3, [pc, #196]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
 800377c:	0211      	lsls	r1, r2, #8
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68d2      	ldr	r2, [r2, #12]
 8003782:	0912      	lsrs	r2, r2, #4
 8003784:	0452      	lsls	r2, r2, #17
 8003786:	430a      	orrs	r2, r1
 8003788:	492a      	ldr	r1, [pc, #168]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e027      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d112      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800379e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	0211      	lsls	r1, r2, #8
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6912      	ldr	r2, [r2, #16]
 80037ac:	0852      	lsrs	r2, r2, #1
 80037ae:	3a01      	subs	r2, #1
 80037b0:	0552      	lsls	r2, r2, #21
 80037b2:	430a      	orrs	r2, r1
 80037b4:	491f      	ldr	r1, [pc, #124]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	610b      	str	r3, [r1, #16]
 80037ba:	e011      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6952      	ldr	r2, [r2, #20]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0652      	lsls	r2, r2, #25
 80037d8:	430a      	orrs	r2, r1
 80037da:	4916      	ldr	r1, [pc, #88]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd f90c 	bl	8000a08 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fd f908 	bl	8000a08 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
          break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003846:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d018      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0203 	and.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d10d      	bne.n	800387e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
       ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800386a:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
       ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d047      	beq.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e044      	b.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d018      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x86>
 800388c:	2b03      	cmp	r3, #3
 800388e:	d825      	bhi.n	80038dc <RCCEx_PLLSAI2_Config+0xa4>
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <RCCEx_PLLSAI2_Config+0x62>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d009      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x74>
 8003898:	e020      	b.n	80038dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389a:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038aa:	e01a      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e013      	b.n	80038e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038be:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038da:	e006      	b.n	80038ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e004      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	430b      	orrs	r3, r1
 8003908:	4939      	ldr	r1, [pc, #228]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d167      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fd f872 	bl	8000a08 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003926:	e009      	b.n	800393c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003928:	f7fd f86e 	bl	8000a08 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d902      	bls.n	800393c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	73fb      	strb	r3, [r7, #15]
        break;
 800393a:	e005      	b.n	8003948 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ef      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d14a      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d111      	bne.n	8003978 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800395c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	0211      	lsls	r1, r2, #8
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	0912      	lsrs	r2, r2, #4
 800396c:	0452      	lsls	r2, r2, #17
 800396e:	430a      	orrs	r2, r1
 8003970:	491f      	ldr	r1, [pc, #124]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	614b      	str	r3, [r1, #20]
 8003976:	e011      	b.n	800399c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	0211      	lsls	r1, r2, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6912      	ldr	r2, [r2, #16]
 800398e:	0852      	lsrs	r2, r2, #1
 8003990:	3a01      	subs	r2, #1
 8003992:	0652      	lsls	r2, r2, #25
 8003994:	430a      	orrs	r2, r1
 8003996:	4916      	ldr	r1, [pc, #88]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd f82e 	bl	8000a08 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fd f82a 	bl	8000a08 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
          break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e040      	b.n	8003a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fc ff00 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fae0 	bl	8004000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f825 	bl	8003a90 <UART_SetConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e01b      	b.n	8003a88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fb5f 	bl	8004144 <UART_CheckIdleState>
 8003a86:	4603      	mov	r3, r0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a94:	b08a      	sub	sp, #40	; 0x28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4ba4      	ldr	r3, [pc, #656]	; (8003d50 <UART_SetConfig+0x2c0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a99      	ldr	r2, [pc, #612]	; (8003d54 <UART_SetConfig+0x2c4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	4313      	orrs	r3, r2
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a90      	ldr	r2, [pc, #576]	; (8003d58 <UART_SetConfig+0x2c8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d126      	bne.n	8003b68 <UART_SetConfig+0xd8>
 8003b1a:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d81b      	bhi.n	8003b60 <UART_SetConfig+0xd0>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0xa0>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b59 	.word	0x08003b59
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e116      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e112      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003b50:	2304      	movs	r3, #4
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e10e      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e10a      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003b60:	2310      	movs	r3, #16
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e106      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7c      	ldr	r2, [pc, #496]	; (8003d60 <UART_SetConfig+0x2d0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d138      	bne.n	8003be4 <UART_SetConfig+0x154>
 8003b72:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d82d      	bhi.n	8003bdc <UART_SetConfig+0x14c>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0xf8>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003bdd 	.word	0x08003bdd
 8003b90:	08003bdd 	.word	0x08003bdd
 8003b94:	08003bdd 	.word	0x08003bdd
 8003b98:	08003bcd 	.word	0x08003bcd
 8003b9c:	08003bdd 	.word	0x08003bdd
 8003ba0:	08003bdd 	.word	0x08003bdd
 8003ba4:	08003bdd 	.word	0x08003bdd
 8003ba8:	08003bc5 	.word	0x08003bc5
 8003bac:	08003bdd 	.word	0x08003bdd
 8003bb0:	08003bdd 	.word	0x08003bdd
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e0d8      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bca:	e0d4      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd2:	e0d0      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e0cc      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e0c8      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <UART_SetConfig+0x2d4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d125      	bne.n	8003c3a <UART_SetConfig+0x1aa>
 8003bee:	4b5b      	ldr	r3, [pc, #364]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d016      	beq.n	8003c2a <UART_SetConfig+0x19a>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d818      	bhi.n	8003c32 <UART_SetConfig+0x1a2>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d00a      	beq.n	8003c1a <UART_SetConfig+0x18a>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d814      	bhi.n	8003c32 <UART_SetConfig+0x1a2>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <UART_SetConfig+0x182>
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d008      	beq.n	8003c22 <UART_SetConfig+0x192>
 8003c10:	e00f      	b.n	8003c32 <UART_SetConfig+0x1a2>
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c18:	e0ad      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c20:	e0a9      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c22:	2304      	movs	r3, #4
 8003c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c28:	e0a5      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c30:	e0a1      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c32:	2310      	movs	r3, #16
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c38:	e09d      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <UART_SetConfig+0x2d8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d125      	bne.n	8003c90 <UART_SetConfig+0x200>
 8003c44:	4b45      	ldr	r3, [pc, #276]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c50:	d016      	beq.n	8003c80 <UART_SetConfig+0x1f0>
 8003c52:	2bc0      	cmp	r3, #192	; 0xc0
 8003c54:	d818      	bhi.n	8003c88 <UART_SetConfig+0x1f8>
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d00a      	beq.n	8003c70 <UART_SetConfig+0x1e0>
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d814      	bhi.n	8003c88 <UART_SetConfig+0x1f8>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <UART_SetConfig+0x1d8>
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d008      	beq.n	8003c78 <UART_SetConfig+0x1e8>
 8003c66:	e00f      	b.n	8003c88 <UART_SetConfig+0x1f8>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e082      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e07e      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e07a      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e076      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e072      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <UART_SetConfig+0x2dc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d12a      	bne.n	8003cf0 <UART_SetConfig+0x260>
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca8:	d01a      	beq.n	8003ce0 <UART_SetConfig+0x250>
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cae:	d81b      	bhi.n	8003ce8 <UART_SetConfig+0x258>
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d00c      	beq.n	8003cd0 <UART_SetConfig+0x240>
 8003cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cba:	d815      	bhi.n	8003ce8 <UART_SetConfig+0x258>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <UART_SetConfig+0x238>
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d008      	beq.n	8003cd8 <UART_SetConfig+0x248>
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x258>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e052      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e04e      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e04a      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e046      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e042      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <UART_SetConfig+0x2c4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d13a      	bne.n	8003d70 <UART_SetConfig+0x2e0>
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d08:	d01a      	beq.n	8003d40 <UART_SetConfig+0x2b0>
 8003d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0e:	d81b      	bhi.n	8003d48 <UART_SetConfig+0x2b8>
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d14:	d00c      	beq.n	8003d30 <UART_SetConfig+0x2a0>
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1a:	d815      	bhi.n	8003d48 <UART_SetConfig+0x2b8>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x298>
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d008      	beq.n	8003d38 <UART_SetConfig+0x2a8>
 8003d26:	e00f      	b.n	8003d48 <UART_SetConfig+0x2b8>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e022      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e01e      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e01a      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e016      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e012      	b.n	8003d76 <UART_SetConfig+0x2e6>
 8003d50:	efff69f3 	.word	0xefff69f3
 8003d54:	40008000 	.word	0x40008000
 8003d58:	40013800 	.word	0x40013800
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40004800 	.word	0x40004800
 8003d68:	40004c00 	.word	0x40004c00
 8003d6c:	40005000 	.word	0x40005000
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a9f      	ldr	r2, [pc, #636]	; (8003ff8 <UART_SetConfig+0x568>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d17a      	bne.n	8003e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d824      	bhi.n	8003dd2 <UART_SetConfig+0x342>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x300>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dc3 	.word	0x08003dc3
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003dd3 	.word	0x08003dd3
 8003db0:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7ff f8d6 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003db8:	61f8      	str	r0, [r7, #28]
        break;
 8003dba:	e010      	b.n	8003dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dbc:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <UART_SetConfig+0x56c>)
 8003dbe:	61fb      	str	r3, [r7, #28]
        break;
 8003dc0:	e00d      	b.n	8003dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc2:	f7ff f837 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8003dc6:	61f8      	str	r0, [r7, #28]
        break;
 8003dc8:	e009      	b.n	8003dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dce:	61fb      	str	r3, [r7, #28]
        break;
 8003dd0:	e005      	b.n	8003dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80fb 	beq.w	8003fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d305      	bcc.n	8003e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d903      	bls.n	8003e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e08:	e0e8      	b.n	8003fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	461c      	mov	r4, r3
 8003e10:	4615      	mov	r5, r2
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	022b      	lsls	r3, r5, #8
 8003e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e20:	0222      	lsls	r2, r4, #8
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	6849      	ldr	r1, [r1, #4]
 8003e26:	0849      	lsrs	r1, r1, #1
 8003e28:	2000      	movs	r0, #0
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	4681      	mov	r9, r0
 8003e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8003e32:	eb43 0b09 	adc.w	fp, r3, r9
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e44:	4650      	mov	r0, sl
 8003e46:	4659      	mov	r1, fp
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5a:	d308      	bcc.n	8003e6e <UART_SetConfig+0x3de>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e62:	d204      	bcs.n	8003e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	e0b6      	b.n	8003fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e74:	e0b2      	b.n	8003fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d15e      	bne.n	8003f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d828      	bhi.n	8003eda <UART_SetConfig+0x44a>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <UART_SetConfig+0x400>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	08003edb 	.word	0x08003edb
 8003ea0:	08003ecb 	.word	0x08003ecb
 8003ea4:	08003edb 	.word	0x08003edb
 8003ea8:	08003edb 	.word	0x08003edb
 8003eac:	08003edb 	.word	0x08003edb
 8003eb0:	08003ed3 	.word	0x08003ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7ff f856 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	61f8      	str	r0, [r7, #28]
        break;
 8003eba:	e014      	b.n	8003ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7ff f868 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	61f8      	str	r0, [r7, #28]
        break;
 8003ec2:	e010      	b.n	8003ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <UART_SetConfig+0x56c>)
 8003ec6:	61fb      	str	r3, [r7, #28]
        break;
 8003ec8:	e00d      	b.n	8003ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eca:	f7fe ffb3 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8003ece:	61f8      	str	r0, [r7, #28]
        break;
 8003ed0:	e009      	b.n	8003ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed6:	61fb      	str	r3, [r7, #28]
        break;
 8003ed8:	e005      	b.n	8003ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d077      	beq.n	8003fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005a      	lsls	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d916      	bls.n	8003f36 <UART_SetConfig+0x4a6>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d212      	bcs.n	8003f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f023 030f 	bic.w	r3, r3, #15
 8003f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	8afa      	ldrh	r2, [r7, #22]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	e052      	b.n	8003fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f3c:	e04e      	b.n	8003fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d827      	bhi.n	8003f96 <UART_SetConfig+0x506>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x4bc>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe fff8 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003f74:	61f8      	str	r0, [r7, #28]
        break;
 8003f76:	e014      	b.n	8003fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7ff f80a 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	61f8      	str	r0, [r7, #28]
        break;
 8003f7e:	e010      	b.n	8003fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <UART_SetConfig+0x56c>)
 8003f82:	61fb      	str	r3, [r7, #28]
        break;
 8003f84:	e00d      	b.n	8003fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f86:	f7fe ff55 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8003f8a:	61f8      	str	r0, [r7, #28]
        break;
 8003f8c:	e009      	b.n	8003fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61fb      	str	r3, [r7, #28]
        break;
 8003f94:	e005      	b.n	8003fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d019      	beq.n	8003fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	085a      	lsrs	r2, r3, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	d909      	bls.n	8003fd6 <UART_SetConfig+0x546>
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d205      	bcs.n	8003fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	e002      	b.n	8003fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	; 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40008000 	.word	0x40008000
 8003ffc:	00f42400 	.word	0x00f42400

08004000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d10a      	bne.n	8004116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b098      	sub	sp, #96	; 0x60
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004154:	f7fc fc58 	bl	8000a08 <HAL_GetTick>
 8004158:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d12e      	bne.n	80041c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f88c 	bl	8004294 <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d021      	beq.n	80041c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004196:	653b      	str	r3, [r7, #80]	; 0x50
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e062      	b.n	800428c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d149      	bne.n	8004268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f856 	bl	8004294 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d03c      	beq.n	8004268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	623b      	str	r3, [r7, #32]
   return(result);
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420c:	633b      	str	r3, [r7, #48]	; 0x30
 800420e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004240:	61fa      	str	r2, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e011      	b.n	800428c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3758      	adds	r7, #88	; 0x58
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a4:	e049      	b.n	800433a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d045      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fc fbab 	bl	8000a08 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e048      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d031      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d110      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f838 	bl	8004362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2208      	movs	r2, #8
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e029      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004314:	d111      	bne.n	800433a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800431e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f81e 	bl	8004362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e00f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	429a      	cmp	r2, r3
 8004356:	d0a6      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004362:	b480      	push	{r7}
 8004364:	b095      	sub	sp, #84	; 0x54
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
 800438a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d118      	bne.n	800440a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0310 	bic.w	r3, r3, #16
 80043ec:	647b      	str	r3, [r7, #68]	; 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e6      	bne.n	80043d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800441e:	bf00      	nop
 8004420:	3754      	adds	r7, #84	; 0x54
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800442a:	b084      	sub	sp, #16
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	f107 001c 	add.w	r0, r7, #28
 8004438:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 fa1d 	bl	8005888 <USB_CoreReset>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
 8004464:	e005      	b.n	8004472 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800447e:	b004      	add	sp, #16
 8004480:	4770      	bx	lr
	...

08004484 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d165      	bne.n	8004564 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a3e      	ldr	r2, [pc, #248]	; (8004594 <USB_SetTurnaroundTime+0x110>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d906      	bls.n	80044ae <USB_SetTurnaroundTime+0x2a>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a3d      	ldr	r2, [pc, #244]	; (8004598 <USB_SetTurnaroundTime+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d202      	bcs.n	80044ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044a8:	230f      	movs	r3, #15
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e05c      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4a39      	ldr	r2, [pc, #228]	; (8004598 <USB_SetTurnaroundTime+0x114>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d306      	bcc.n	80044c4 <USB_SetTurnaroundTime+0x40>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a38      	ldr	r2, [pc, #224]	; (800459c <USB_SetTurnaroundTime+0x118>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d202      	bcs.n	80044c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044be:	230e      	movs	r3, #14
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e051      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a35      	ldr	r2, [pc, #212]	; (800459c <USB_SetTurnaroundTime+0x118>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d306      	bcc.n	80044da <USB_SetTurnaroundTime+0x56>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <USB_SetTurnaroundTime+0x11c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d202      	bcs.n	80044da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044d4:	230d      	movs	r3, #13
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e046      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4a30      	ldr	r2, [pc, #192]	; (80045a0 <USB_SetTurnaroundTime+0x11c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d306      	bcc.n	80044f0 <USB_SetTurnaroundTime+0x6c>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <USB_SetTurnaroundTime+0x120>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d802      	bhi.n	80044f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ea:	230c      	movs	r3, #12
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e03b      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <USB_SetTurnaroundTime+0x120>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d906      	bls.n	8004506 <USB_SetTurnaroundTime+0x82>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <USB_SetTurnaroundTime+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d802      	bhi.n	8004506 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004500:	230b      	movs	r3, #11
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e030      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <USB_SetTurnaroundTime+0x124>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d906      	bls.n	800451c <USB_SetTurnaroundTime+0x98>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <USB_SetTurnaroundTime+0x128>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d802      	bhi.n	800451c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004516:	230a      	movs	r3, #10
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e025      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <USB_SetTurnaroundTime+0x128>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d906      	bls.n	8004532 <USB_SetTurnaroundTime+0xae>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <USB_SetTurnaroundTime+0x12c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d202      	bcs.n	8004532 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800452c:	2309      	movs	r3, #9
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e01a      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <USB_SetTurnaroundTime+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d306      	bcc.n	8004548 <USB_SetTurnaroundTime+0xc4>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <USB_SetTurnaroundTime+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d802      	bhi.n	8004548 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004542:	2308      	movs	r3, #8
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e00f      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <USB_SetTurnaroundTime+0x130>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d906      	bls.n	800455e <USB_SetTurnaroundTime+0xda>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <USB_SetTurnaroundTime+0x134>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d202      	bcs.n	800455e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004558:	2307      	movs	r3, #7
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e004      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800455e:	2306      	movs	r3, #6
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e001      	b.n	8004568 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004564:	2309      	movs	r3, #9
 8004566:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	00d8acbf 	.word	0x00d8acbf
 8004598:	00e4e1c0 	.word	0x00e4e1c0
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	01067380 	.word	0x01067380
 80045a4:	011a499f 	.word	0x011a499f
 80045a8:	01312cff 	.word	0x01312cff
 80045ac:	014ca43f 	.word	0x014ca43f
 80045b0:	016e3600 	.word	0x016e3600
 80045b4:	01a6ab1f 	.word	0x01a6ab1f
 80045b8:	01e84800 	.word	0x01e84800

080045bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d115      	bne.n	800464e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800462e:	2001      	movs	r0, #1
 8004630:	f7fc f9f6 	bl	8000a20 <HAL_Delay>
      ms++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3301      	adds	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f001 f8ab 	bl	8005796 <USB_GetMode>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d01e      	beq.n	8004684 <USB_SetCurrentMode+0x84>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b31      	cmp	r3, #49	; 0x31
 800464a:	d9f0      	bls.n	800462e <USB_SetCurrentMode+0x2e>
 800464c:	e01a      	b.n	8004684 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d115      	bne.n	8004680 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004660:	2001      	movs	r0, #1
 8004662:	f7fc f9dd 	bl	8000a20 <HAL_Delay>
      ms++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 f892 	bl	8005796 <USB_GetMode>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <USB_SetCurrentMode+0x84>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b31      	cmp	r3, #49	; 0x31
 800467c:	d9f0      	bls.n	8004660 <USB_SetCurrentMode+0x60>
 800467e:	e001      	b.n	8004684 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e005      	b.n	8004690 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b32      	cmp	r3, #50	; 0x32
 8004688:	d101      	bne.n	800468e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004698:	b084      	sub	sp, #16
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	e009      	b.n	80046cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3340      	adds	r3, #64	; 0x40
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3301      	adds	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0e      	cmp	r3, #14
 80046d0:	d9f2      	bls.n	80046b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11c      	bne.n	8004712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e6:	f043 0302 	orr.w	r3, r3, #2
 80046ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800472a:	2103      	movs	r1, #3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f959 	bl	80049e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004732:	2110      	movs	r1, #16
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8f1 	bl	800491c <USB_FlushTxFifo>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f91d 	bl	8004984 <USB_FlushRxFifo>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	461a      	mov	r2, r3
 8004774:	2300      	movs	r3, #0
 8004776:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	e043      	b.n	8004806 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d118      	bne.n	80047c8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	461a      	mov	r2, r3
 80047aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e013      	b.n	80047da <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e008      	b.n	80047da <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3b7      	bcc.n	800477e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e043      	b.n	800489c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482a:	d118      	bne.n	800485e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e013      	b.n	8004870 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e008      	b.n	8004870 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004894:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3b7      	bcc.n	8004814 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f043 0210 	orr.w	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <USB_DevInit+0x280>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 0208 	orr.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004912:	b004      	add	sp, #16
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	803c3800 	.word	0x803c3800

0800491c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <USB_FlushTxFifo+0x64>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e01b      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	daf2      	bge.n	800492a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <USB_FlushTxFifo+0x64>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	d0f0      	beq.n	8004954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00030d40 	.word	0x00030d40

08004984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e018      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <USB_FlushRxFifo+0x5c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e006      	b.n	80049d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d0f0      	beq.n	80049b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	00030d40 	.word	0x00030d40

080049e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0306 	and.w	r3, r3, #6
 8004a2e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d002      	beq.n	8004a3c <USB_GetDevSpeed+0x26>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d102      	bne.n	8004a42 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	75fb      	strb	r3, [r7, #23]
 8004a40:	e001      	b.n	8004a46 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004a42:	230f      	movs	r3, #15
 8004a44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d13a      	bne.n	8004ae6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	68f9      	ldr	r1, [r7, #12]
 8004a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d155      	bne.n	8004b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	791b      	ldrb	r3, [r3, #4]
 8004ac2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	059b      	lsls	r3, r3, #22
 8004aca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004acc:	4313      	orrs	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e036      	b.n	8004b54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11a      	bne.n	8004b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	791b      	ldrb	r3, [r3, #4]
 8004b38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d161      	bne.n	8004c44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b96:	d11f      	bne.n	8004bd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	0159      	lsls	r1, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4b35      	ldr	r3, [pc, #212]	; (8004d14 <USB_DeactivateEndpoint+0x1b0>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
 8004c42:	e060      	b.n	8004d06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c5a:	d11f      	bne.n	8004c9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	0159      	lsls	r1, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <USB_DeactivateEndpoint+0x1b4>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	ec337800 	.word	0xec337800
 8004d18:	eff37800 	.word	0xeff37800

08004d1c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 8128 	bne.w	8004f8a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d132      	bne.n	8004da8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	0cdb      	lsrs	r3, r3, #19
 8004da2:	04db      	lsls	r3, r3, #19
 8004da4:	6113      	str	r3, [r2, #16]
 8004da6:	e092      	b.n	8004ece <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc2:	0cdb      	lsrs	r3, r3, #19
 8004dc4:	04db      	lsls	r3, r3, #19
 8004dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11a      	bne.n	8004e28 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d903      	bls.n	8004e06 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e24:	6113      	str	r3, [r2, #16]
 8004e26:	e01b      	b.n	8004e60 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6919      	ldr	r1, [r3, #16]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	440b      	add	r3, r1
 8004e40:	1e59      	subs	r1, r3, #1
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e4a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e4c:	4b8d      	ldr	r3, [pc, #564]	; (8005084 <USB_EPStartXfer+0x368>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	6939      	ldr	r1, [r7, #16]
 8004e52:	0148      	lsls	r0, r1, #5
 8004e54:	6979      	ldr	r1, [r7, #20]
 8004e56:	4401      	add	r1, r0
 8004e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e76:	6939      	ldr	r1, [r7, #16]
 8004e78:	0148      	lsls	r0, r1, #5
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	4401      	add	r1, r0
 8004e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d11f      	bne.n	8004ece <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ecc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	791b      	ldrb	r3, [r3, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d015      	beq.n	8004f22 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8139 	beq.w	8005172 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2101      	movs	r1, #1
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3
 8004f16:	6979      	ldr	r1, [r7, #20]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	634b      	str	r3, [r1, #52]	; 0x34
 8004f20:	e127      	b.n	8005172 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d110      	bne.n	8004f54 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e00f      	b.n	8004f74 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68d9      	ldr	r1, [r3, #12]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9a6 	bl	80052d4 <USB_WritePacket>
 8004f88:	e0f3      	b.n	8005172 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	0cdb      	lsrs	r3, r3, #19
 8004fa6:	04db      	lsls	r3, r3, #19
 8004fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fcc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d12f      	bne.n	8005034 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005002:	6939      	ldr	r1, [r7, #16]
 8005004:	0148      	lsls	r0, r1, #5
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	4401      	add	r1, r0
 800500a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005030:	6113      	str	r3, [r2, #16]
 8005032:	e061      	b.n	80050f8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d125      	bne.n	8005088 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	0148      	lsls	r0, r1, #5
 8005056:	6979      	ldr	r1, [r7, #20]
 8005058:	4401      	add	r1, r0
 800505a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800505e:	4313      	orrs	r3, r2
 8005060:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005080:	6113      	str	r3, [r2, #16]
 8005082:	e039      	b.n	80050f8 <USB_EPStartXfer+0x3dc>
 8005084:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4413      	add	r3, r2
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	89fa      	ldrh	r2, [r7, #14]
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	04d9      	lsls	r1, r3, #19
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <USB_EPStartXfer+0x460>)
 80050c0:	400b      	ands	r3, r1
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	0148      	lsls	r0, r1, #5
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	4401      	add	r1, r0
 80050ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d128      	bne.n	8005152 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e00f      	b.n	8005152 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005150:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	1ff80000 	.word	0x1ff80000

08005180 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d14a      	bne.n	8005234 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b6:	f040 8086 	bne.w	80052c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005200:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f242 7210 	movw	r2, #10000	; 0x2710
 800520e:	4293      	cmp	r3, r2
 8005210:	d902      	bls.n	8005218 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
          break;
 8005216:	e056      	b.n	80052c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005230:	d0e7      	beq.n	8005202 <USB_EPStopXfer+0x82>
 8005232:	e048      	b.n	80052c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524c:	d13b      	bne.n	80052c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005270:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005294:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f242 7210 	movw	r2, #10000	; 0x2710
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d902      	bls.n	80052ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
          break;
 80052aa:	e00c      	b.n	80052c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d0e7      	beq.n	8005296 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	460b      	mov	r3, r1
 80052e4:	71fb      	strb	r3, [r7, #7]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e018      	b.n	8005332 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	031a      	lsls	r2, r3, #12
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	461a      	mov	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	3301      	adds	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d3e2      	bcc.n	8005300 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3724      	adds	r7, #36	; 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005348:	b480      	push	{r7}
 800534a:	b08b      	sub	sp, #44	; 0x2c
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	b29b      	uxth	r3, r3
 8005364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e014      	b.n	800539e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	3301      	adds	r3, #1
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	3301      	adds	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	3301      	adds	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	3301      	adds	r3, #1
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3e6      	bcc.n	8005374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053a6:	8bfb      	ldrh	r3, [r7, #30]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	461a      	mov	r2, r3
 80053b8:	f107 0310 	add.w	r3, r7, #16
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	701a      	strb	r2, [r3, #0]
      i++;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3301      	adds	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053e4:	8bfb      	ldrh	r3, [r7, #30]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ea      	bne.n	80053c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	372c      	adds	r7, #44	; 0x2c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d12c      	bne.n	800546e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db12      	blt.n	800544c <USB_EPSetStall+0x54>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00f      	beq.n	800544c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005446:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800544a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e02b      	b.n	80054c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	db12      	blt.n	80054a6 <USB_EPSetStall+0xae>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d128      	bne.n	8005542 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800550e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d003      	beq.n	8005520 <USB_EPClearStall+0x4c>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d138      	bne.n	8005592 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e027      	b.n	8005592 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005560:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d003      	beq.n	8005572 <USB_EPClearStall+0x9e>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d10f      	bne.n	8005592 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561a:	f023 0302 	bic.w	r3, r3, #2
 800561e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	0c1b      	lsrs	r3, r3, #16
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	b29b      	uxth	r3, r3
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800572c:	68bb      	ldr	r3, [r7, #8]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	01db      	lsls	r3, r3, #7
 800576c:	b2db      	uxtb	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005788:	68bb      	ldr	r3, [r7, #8]
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0301 	and.w	r3, r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	333c      	adds	r3, #60	; 0x3c
 800580a:	3304      	adds	r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <USB_EP0_OutStart+0x8c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d90a      	bls.n	800582e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005828:	d101      	bne.n	800582e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e024      	b.n	8005878 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800584c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585c:	f043 0318 	orr.w	r3, r3, #24
 8005860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005874:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	4f54300a 	.word	0x4f54300a

08005888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a13      	ldr	r2, [pc, #76]	; (80058ec <USB_CoreReset+0x64>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e01b      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	daf2      	bge.n	8005894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <USB_CoreReset+0x64>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e006      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d0f0      	beq.n	80058be <USB_CoreReset+0x36>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	00030d40 	.word	0x00030d40

080058f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80058fc:	2010      	movs	r0, #16
 80058fe:	f002 fa81 	bl	8007e04 <USBD_static_malloc>
 8005902:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	32b0      	adds	r2, #176	; 0xb0
 8005914:	2100      	movs	r1, #0
 8005916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800591a:	2302      	movs	r3, #2
 800591c:	e048      	b.n	80059b0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	32b0      	adds	r2, #176	; 0xb0
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	32b0      	adds	r2, #176	; 0xb0
 8005938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	7c1b      	ldrb	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <USBD_HID_Init+0xc8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3326      	adds	r3, #38	; 0x26
 8005960:	2207      	movs	r2, #7
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e00c      	b.n	8005980 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <USBD_HID_Init+0xc8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3326      	adds	r3, #38	; 0x26
 800597c:	220a      	movs	r2, #10
 800597e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <USBD_HID_Init+0xc8>)
 8005982:	7819      	ldrb	r1, [r3, #0]
 8005984:	2304      	movs	r3, #4
 8005986:	2203      	movs	r2, #3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f002 f83b 	bl	8007a04 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <USBD_HID_Init+0xc8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	2201      	movs	r2, #1
 80059a6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	200000ca 	.word	0x200000ca

080059bc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80059c8:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <USBD_HID_DeInit+0x8c>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f002 f856 	bl	8007a80 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <USBD_HID_DeInit+0x8c>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3324      	adds	r3, #36	; 0x24
 80059ea:	2200      	movs	r2, #0
 80059ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <USBD_HID_DeInit+0x8c>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3326      	adds	r3, #38	; 0x26
 8005a04:	2200      	movs	r2, #0
 8005a06:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32b0      	adds	r2, #176	; 0xb0
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	32b0      	adds	r2, #176	; 0xb0
 8005a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 f9f9 	bl	8007e20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	32b0      	adds	r2, #176	; 0xb0
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200000ca 	.word	0x200000ca

08005a4c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	32b0      	adds	r2, #176	; 0xb0
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0e8      	b.n	8005c4a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d046      	beq.n	8005b12 <USBD_HID_Setup+0xc6>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	f040 80d8 	bne.w	8005c3a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	3b02      	subs	r3, #2
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d836      	bhi.n	8005b02 <USBD_HID_Setup+0xb6>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <USBD_HID_Setup+0x50>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005af3 	.word	0x08005af3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005b03 	.word	0x08005b03
 8005aa8:	08005b03 	.word	0x08005b03
 8005aac:	08005b03 	.word	0x08005b03
 8005ab0:	08005b03 	.word	0x08005b03
 8005ab4:	08005b03 	.word	0x08005b03
 8005ab8:	08005b03 	.word	0x08005b03
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ac5 	.word	0x08005ac5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	885b      	ldrh	r3, [r3, #2]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]
          break;
 8005ad0:	e01e      	b.n	8005b10 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fbd5 	bl	8007288 <USBD_CtlSendData>
          break;
 8005ade:	e017      	b.n	8005b10 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	885b      	ldrh	r3, [r3, #2]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	605a      	str	r2, [r3, #4]
          break;
 8005af0:	e00e      	b.n	8005b10 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2201      	movs	r2, #1
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fbc4 	bl	8007288 <USBD_CtlSendData>
          break;
 8005b00:	e006      	b.n	8005b10 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fb4e 	bl	80071a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b0e:	bf00      	nop
      }
      break;
 8005b10:	e09a      	b.n	8005c48 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b0b      	cmp	r3, #11
 8005b18:	f200 8086 	bhi.w	8005c28 <USBD_HID_Setup+0x1dc>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <USBD_HID_Setup+0xd8>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005c37 	.word	0x08005c37
 8005b2c:	08005c29 	.word	0x08005c29
 8005b30:	08005c29 	.word	0x08005c29
 8005b34:	08005c29 	.word	0x08005c29
 8005b38:	08005c29 	.word	0x08005c29
 8005b3c:	08005b7f 	.word	0x08005b7f
 8005b40:	08005c29 	.word	0x08005c29
 8005b44:	08005c29 	.word	0x08005c29
 8005b48:	08005c29 	.word	0x08005c29
 8005b4c:	08005bd7 	.word	0x08005bd7
 8005b50:	08005c01 	.word	0x08005c01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d107      	bne.n	8005b70 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b60:	f107 030a 	add.w	r3, r7, #10
 8005b64:	2202      	movs	r2, #2
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fb8d 	bl	8007288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b6e:	e063      	b.n	8005c38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fb17 	bl	80071a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	75fb      	strb	r3, [r7, #23]
          break;
 8005b7c:	e05c      	b.n	8005c38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	885b      	ldrh	r3, [r3, #2]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b22      	cmp	r3, #34	; 0x22
 8005b88:	d108      	bne.n	8005b9c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	88db      	ldrh	r3, [r3, #6]
 8005b8e:	2b4a      	cmp	r3, #74	; 0x4a
 8005b90:	bf28      	it	cs
 8005b92:	234a      	movcs	r3, #74	; 0x4a
 8005b94:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005b96:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <USBD_HID_Setup+0x208>)
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e015      	b.n	8005bc8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	885b      	ldrh	r3, [r3, #2]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b21      	cmp	r3, #33	; 0x21
 8005ba6:	d108      	bne.n	8005bba <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005ba8:	4b2b      	ldr	r3, [pc, #172]	; (8005c58 <USBD_HID_Setup+0x20c>)
 8005baa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	88db      	ldrh	r3, [r3, #6]
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	bf28      	it	cs
 8005bb4:	2309      	movcs	r3, #9
 8005bb6:	82bb      	strh	r3, [r7, #20]
 8005bb8:	e006      	b.n	8005bc8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 faf2 	bl	80071a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	75fb      	strb	r3, [r7, #23]
            break;
 8005bc6:	e037      	b.n	8005c38 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bc8:	8abb      	ldrh	r3, [r7, #20]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fb5a 	bl	8007288 <USBD_CtlSendData>
          break;
 8005bd4:	e030      	b.n	8005c38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d107      	bne.n	8005bf2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3308      	adds	r3, #8
 8005be6:	2201      	movs	r2, #1
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fb4c 	bl	8007288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bf0:	e022      	b.n	8005c38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fad6 	bl	80071a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfe:	e01b      	b.n	8005c38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d106      	bne.n	8005c1a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c18:	e00e      	b.n	8005c38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fac2 	bl	80071a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c22:	2303      	movs	r3, #3
 8005c24:	75fb      	strb	r3, [r7, #23]
          break;
 8005c26:	e007      	b.n	8005c38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fabb 	bl	80071a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c30:	2303      	movs	r3, #3
 8005c32:	75fb      	strb	r3, [r7, #23]
          break;
 8005c34:	e000      	b.n	8005c38 <USBD_HID_Setup+0x1ec>
          break;
 8005c36:	bf00      	nop
      }
      break;
 8005c38:	e006      	b.n	8005c48 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fab2 	bl	80071a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c42:	2303      	movs	r3, #3
 8005c44:	75fb      	strb	r3, [r7, #23]
      break;
 8005c46:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000080 	.word	0x20000080
 8005c58:	20000068 	.word	0x20000068

08005c5c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c64:	2181      	movs	r1, #129	; 0x81
 8005c66:	4809      	ldr	r0, [pc, #36]	; (8005c8c <USBD_HID_GetFSCfgDesc+0x30>)
 8005c68:	f000 fc3b 	bl	80064e2 <USBD_GetEpDesc>
 8005c6c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	220a      	movs	r2, #10
 8005c78:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2222      	movs	r2, #34	; 0x22
 8005c7e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000044 	.word	0x20000044

08005c90 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c98:	2181      	movs	r1, #129	; 0x81
 8005c9a:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <USBD_HID_GetHSCfgDesc+0x30>)
 8005c9c:	f000 fc21 	bl	80064e2 <USBD_GetEpDesc>
 8005ca0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2207      	movs	r2, #7
 8005cac:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2222      	movs	r2, #34	; 0x22
 8005cb2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005cb4:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000044 	.word	0x20000044

08005cc4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ccc:	2181      	movs	r1, #129	; 0x81
 8005cce:	4809      	ldr	r0, [pc, #36]	; (8005cf4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005cd0:	f000 fc07 	bl	80064e2 <USBD_GetEpDesc>
 8005cd4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	220a      	movs	r2, #10
 8005ce0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2222      	movs	r2, #34	; 0x22
 8005ce6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ce8:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000044 	.word	0x20000044

08005cf8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32b0      	adds	r2, #176	; 0xb0
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	2200      	movs	r2, #0
 8005d14:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	220a      	movs	r2, #10
 8005d30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005d32:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000074 	.word	0x20000074

08005d44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e01f      	b.n	8005d9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	79fa      	ldrb	r2, [r7, #7]
 8005d8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 fdb9 	bl	8007908 <USBD_LL_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e025      	b.n	8005e08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32ae      	adds	r2, #174	; 0xae
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32ae      	adds	r2, #174	; 0xae
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f107 020e 	add.w	r2, r7, #14
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	4602      	mov	r2, r0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fdc1 	bl	80079a0 <USBD_LL_Start>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f938 	bl	8007132 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d01a      	beq.n	8005f1c <USBD_LL_SetupStage+0x72>
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d822      	bhi.n	8005f30 <USBD_LL_SetupStage+0x86>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <USBD_LL_SetupStage+0x4a>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <USBD_LL_SetupStage+0x5e>
 8005ef2:	e01d      	b.n	8005f30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fb65 	bl	80065cc <USBD_StdDevReq>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
      break;
 8005f06:	e020      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fbcd 	bl	80066b0 <USBD_StdItfReq>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1a:	e016      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc2f 	bl	8006788 <USBD_StdEPReq>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2e:	e00c      	b.n	8005f4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fdd4 	bl	8007aec <USBD_LL_StallEP>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
      break;
 8005f48:	bf00      	nop
  }

  return ret;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d16e      	bne.n	800604a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	f040 8098 	bne.w	80060b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d913      	bls.n	8005fb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	bf28      	it	cs
 8005fa6:	4613      	movcs	r3, r2
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f001 f997 	bl	80072e0 <USBD_CtlContinueRx>
 8005fb2:	e07d      	b.n	80060b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d014      	beq.n	8005fec <USBD_LL_DataOutStage+0x98>
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d81d      	bhi.n	8006002 <USBD_LL_DataOutStage+0xae>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <USBD_LL_DataOutStage+0x7c>
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d003      	beq.n	8005fd6 <USBD_LL_DataOutStage+0x82>
 8005fce:	e018      	b.n	8006002 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd4:	e018      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fa64 	bl	80064ae <USBD_CoreFindIF>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75bb      	strb	r3, [r7, #22]
            break;
 8005fea:	e00d      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa66 	bl	80064c8 <USBD_CoreFindEP>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75bb      	strb	r3, [r7, #22]
            break;
 8006000:	e002      	b.n	8006008 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	75bb      	strb	r3, [r7, #22]
            break;
 8006006:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006008:	7dbb      	ldrb	r3, [r7, #22]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b03      	cmp	r3, #3
 8006018:	d113      	bne.n	8006042 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800601a:	7dba      	ldrb	r2, [r7, #22]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	32ae      	adds	r2, #174	; 0xae
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800602a:	7dba      	ldrb	r2, [r7, #22]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006032:	7dba      	ldrb	r2, [r7, #22]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	32ae      	adds	r2, #174	; 0xae
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 f95d 	bl	8007302 <USBD_CtlSendStatus>
 8006048:	e032      	b.n	80060b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fa37 	bl	80064c8 <USBD_CoreFindEP>
 800605a:	4603      	mov	r3, r0
 800605c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605e:	7dbb      	ldrb	r3, [r7, #22]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d025      	beq.n	80060b0 <USBD_LL_DataOutStage+0x15c>
 8006064:	7dbb      	ldrb	r3, [r7, #22]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d122      	bne.n	80060b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b03      	cmp	r3, #3
 8006074:	d117      	bne.n	80060a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006076:	7dba      	ldrb	r2, [r7, #22]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32ae      	adds	r2, #174	; 0xae
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00f      	beq.n	80060a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006086:	7dba      	ldrb	r2, [r7, #22]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800608e:	7dba      	ldrb	r2, [r7, #22]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	7afa      	ldrb	r2, [r7, #11]
 800609c:	4611      	mov	r1, r2
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	e000      	b.n	80060b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	460b      	mov	r3, r1
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d16f      	bne.n	80061ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3314      	adds	r3, #20
 80060d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d15a      	bne.n	8006194 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d914      	bls.n	8006114 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f001 f8dc 	bl	80072be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006106:	2300      	movs	r3, #0
 8006108:	2200      	movs	r2, #0
 800610a:	2100      	movs	r1, #0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f001 fdf3 	bl	8007cf8 <USBD_LL_PrepareReceive>
 8006112:	e03f      	b.n	8006194 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d11c      	bne.n	800615a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006128:	429a      	cmp	r2, r3
 800612a:	d316      	bcc.n	800615a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006136:	429a      	cmp	r2, r3
 8006138:	d20f      	bcs.n	800615a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800613a:	2200      	movs	r2, #0
 800613c:	2100      	movs	r1, #0
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f001 f8bd 	bl	80072be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800614c:	2300      	movs	r3, #0
 800614e:	2200      	movs	r2, #0
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f001 fdd0 	bl	8007cf8 <USBD_LL_PrepareReceive>
 8006158:	e01c      	b.n	8006194 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d10f      	bne.n	8006186 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f001 fcaf 	bl	8007aec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f001 f8ca 	bl	8007328 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d03a      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fe42 	bl	8005e28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061ac:	e032      	b.n	8006214 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061ae:	7afb      	ldrb	r3, [r7, #11]
 80061b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f985 	bl	80064c8 <USBD_CoreFindEP>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2bff      	cmp	r3, #255	; 0xff
 80061c6:	d025      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d122      	bne.n	8006214 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d11c      	bne.n	8006214 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	32ae      	adds	r2, #174	; 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061ea:	7dfa      	ldrb	r2, [r7, #23]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061f2:	7dfa      	ldrb	r2, [r7, #23]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	32ae      	adds	r2, #174	; 0xae
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	7afa      	ldrb	r2, [r7, #11]
 8006200:	4611      	mov	r1, r2
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800620a:	7dbb      	ldrb	r3, [r7, #22]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006210:	7dbb      	ldrb	r3, [r7, #22]
 8006212:	e000      	b.n	8006216 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d014      	beq.n	8006284 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00e      	beq.n	8006284 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6852      	ldr	r2, [r2, #4]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	4611      	mov	r1, r2
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006280:	2303      	movs	r3, #3
 8006282:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006284:	2340      	movs	r3, #64	; 0x40
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fbba 	bl	8007a04 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	2200      	movs	r2, #0
 80062a4:	2180      	movs	r1, #128	; 0x80
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fbac 	bl	8007a04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	621a      	str	r2, [r3, #32]

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d006      	beq.n	8006304 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b04      	cmp	r3, #4
 800632c:	d106      	bne.n	800633c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006334:	b2da      	uxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d110      	bne.n	8006380 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	32ae      	adds	r2, #174	; 0xae
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e01c      	b.n	80063e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d115      	bne.n	80063e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	; 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32ae      	adds	r2, #174	; 0xae
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	4611      	mov	r1, r2
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	32ae      	adds	r2, #174	; 0xae
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800640c:	2303      	movs	r3, #3
 800640e:	e01c      	b.n	800644a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b03      	cmp	r3, #3
 800641a:	d115      	bne.n	8006448 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	; 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	32ae      	adds	r2, #174	; 0xae
 800643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	4611      	mov	r1, r2
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6852      	ldr	r2, [r2, #4]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	4611      	mov	r1, r2
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	429a      	cmp	r2, r3
 8006508:	d920      	bls.n	800654c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006512:	e013      	b.n	800653c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006514:	f107 030a 	add.w	r3, r7, #10
 8006518:	4619      	mov	r1, r3
 800651a:	6978      	ldr	r0, [r7, #20]
 800651c:	f000 f81b 	bl	8006556 <USBD_GetNextDesc>
 8006520:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b05      	cmp	r3, #5
 8006528:	d108      	bne.n	800653c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	789b      	ldrb	r3, [r3, #2]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	429a      	cmp	r2, r3
 8006536:	d008      	beq.n	800654a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	885b      	ldrh	r3, [r3, #2]
 8006540:	b29a      	uxth	r2, r3
 8006542:	897b      	ldrh	r3, [r7, #10]
 8006544:	429a      	cmp	r2, r3
 8006546:	d8e5      	bhi.n	8006514 <USBD_GetEpDesc+0x32>
 8006548:	e000      	b.n	800654c <USBD_GetEpDesc+0x6a>
          break;
 800654a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800654c:	693b      	ldr	r3, [r7, #16]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	4413      	add	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	3301      	adds	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065ae:	8a3b      	ldrh	r3, [r7, #16]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	b21a      	sxth	r2, r3
 80065b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b21b      	sxth	r3, r3
 80065bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065be:	89fb      	ldrh	r3, [r7, #14]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d005      	beq.n	80065f2 <USBD_StdDevReq+0x26>
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d857      	bhi.n	800669a <USBD_StdDevReq+0xce>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00f      	beq.n	800660e <USBD_StdDevReq+0x42>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d153      	bne.n	800669a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32ae      	adds	r2, #174	; 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e04a      	b.n	80066a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b09      	cmp	r3, #9
 8006614:	d83b      	bhi.n	800668e <USBD_StdDevReq+0xc2>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USBD_StdDevReq+0x50>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006671 	.word	0x08006671
 8006620:	08006685 	.word	0x08006685
 8006624:	0800668f 	.word	0x0800668f
 8006628:	0800667b 	.word	0x0800667b
 800662c:	0800668f 	.word	0x0800668f
 8006630:	0800664f 	.word	0x0800664f
 8006634:	08006645 	.word	0x08006645
 8006638:	0800668f 	.word	0x0800668f
 800663c:	08006667 	.word	0x08006667
 8006640:	08006659 	.word	0x08006659
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa3c 	bl	8006ac4 <USBD_GetDescriptor>
          break;
 800664c:	e024      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fbcb 	bl	8006dec <USBD_SetAddress>
          break;
 8006656:	e01f      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fc0a 	bl	8006e74 <USBD_SetConfig>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
          break;
 8006664:	e018      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fcad 	bl	8006fc8 <USBD_GetConfig>
          break;
 800666e:	e013      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fcde 	bl	8007034 <USBD_GetStatus>
          break;
 8006678:	e00e      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fd0d 	bl	800709c <USBD_SetFeature>
          break;
 8006682:	e009      	b.n	8006698 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fd31 	bl	80070ee <USBD_ClrFeature>
          break;
 800668c:	e004      	b.n	8006698 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fd88 	bl	80071a6 <USBD_CtlError>
          break;
 8006696:	bf00      	nop
      }
      break;
 8006698:	e004      	b.n	80066a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fd82 	bl	80071a6 <USBD_CtlError>
      break;
 80066a2:	bf00      	nop
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d005      	beq.n	80066d6 <USBD_StdItfReq+0x26>
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d852      	bhi.n	8006774 <USBD_StdItfReq+0xc4>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <USBD_StdItfReq+0x26>
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d14e      	bne.n	8006774 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d840      	bhi.n	8006766 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	889b      	ldrh	r3, [r3, #4]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d836      	bhi.n	800675c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	889b      	ldrh	r3, [r3, #4]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fed9 	bl	80064ae <USBD_CoreFindIF>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2bff      	cmp	r3, #255	; 0xff
 8006704:	d01d      	beq.n	8006742 <USBD_StdItfReq+0x92>
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11a      	bne.n	8006742 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800670c:	7bba      	ldrb	r2, [r7, #14]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	; 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800671c:	7bba      	ldrb	r2, [r7, #14]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006724:	7bba      	ldrb	r2, [r7, #14]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	32ae      	adds	r2, #174	; 0xae
 800672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800673a:	e004      	b.n	8006746 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006740:	e001      	b.n	8006746 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006742:	2303      	movs	r3, #3
 8006744:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	88db      	ldrh	r3, [r3, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d110      	bne.n	8006770 <USBD_StdItfReq+0xc0>
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10d      	bne.n	8006770 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fdd4 	bl	8007302 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800675a:	e009      	b.n	8006770 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fd21 	bl	80071a6 <USBD_CtlError>
          break;
 8006764:	e004      	b.n	8006770 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd1c 	bl	80071a6 <USBD_CtlError>
          break;
 800676e:	e000      	b.n	8006772 <USBD_StdItfReq+0xc2>
          break;
 8006770:	bf00      	nop
      }
      break;
 8006772:	e004      	b.n	800677e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fd15 	bl	80071a6 <USBD_CtlError>
      break;
 800677c:	bf00      	nop
  }

  return ret;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	889b      	ldrh	r3, [r3, #4]
 800679a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d007      	beq.n	80067b8 <USBD_StdEPReq+0x30>
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	f200 817f 	bhi.w	8006aac <USBD_StdEPReq+0x324>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02a      	beq.n	8006808 <USBD_StdEPReq+0x80>
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f040 817a 	bne.w	8006aac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fe83 	bl	80064c8 <USBD_CoreFindEP>
 80067c2:	4603      	mov	r3, r0
 80067c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c6:	7b7b      	ldrb	r3, [r7, #13]
 80067c8:	2bff      	cmp	r3, #255	; 0xff
 80067ca:	f000 8174 	beq.w	8006ab6 <USBD_StdEPReq+0x32e>
 80067ce:	7b7b      	ldrb	r3, [r7, #13]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f040 8170 	bne.w	8006ab6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067d6:	7b7a      	ldrb	r2, [r7, #13]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067de:	7b7a      	ldrb	r2, [r7, #13]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	32ae      	adds	r2, #174	; 0xae
 80067e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8163 	beq.w	8006ab6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067f0:	7b7a      	ldrb	r2, [r7, #13]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32ae      	adds	r2, #174	; 0xae
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006806:	e156      	b.n	8006ab6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d008      	beq.n	8006822 <USBD_StdEPReq+0x9a>
 8006810:	2b03      	cmp	r3, #3
 8006812:	f300 8145 	bgt.w	8006aa0 <USBD_StdEPReq+0x318>
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 809b 	beq.w	8006952 <USBD_StdEPReq+0x1ca>
 800681c:	2b01      	cmp	r3, #1
 800681e:	d03c      	beq.n	800689a <USBD_StdEPReq+0x112>
 8006820:	e13e      	b.n	8006aa0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d002      	beq.n	8006834 <USBD_StdEPReq+0xac>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d016      	beq.n	8006860 <USBD_StdEPReq+0xd8>
 8006832:	e02c      	b.n	800688e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <USBD_StdEPReq+0xce>
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d00a      	beq.n	8006856 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f951 	bl	8007aec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 f94d 	bl	8007aec <USBD_LL_StallEP>
 8006852:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006854:	e020      	b.n	8006898 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fca4 	bl	80071a6 <USBD_CtlError>
              break;
 800685e:	e01b      	b.n	8006898 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	885b      	ldrh	r3, [r3, #2]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10e      	bne.n	8006886 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <USBD_StdEPReq+0xfe>
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d008      	beq.n	8006886 <USBD_StdEPReq+0xfe>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f933 	bl	8007aec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fd3b 	bl	8007302 <USBD_CtlSendStatus>

              break;
 800688c:	e004      	b.n	8006898 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fc88 	bl	80071a6 <USBD_CtlError>
              break;
 8006896:	bf00      	nop
          }
          break;
 8006898:	e107      	b.n	8006aaa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d002      	beq.n	80068ac <USBD_StdEPReq+0x124>
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d016      	beq.n	80068d8 <USBD_StdEPReq+0x150>
 80068aa:	e04b      	b.n	8006944 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <USBD_StdEPReq+0x146>
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d00a      	beq.n	80068ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f915 	bl	8007aec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f911 	bl	8007aec <USBD_LL_StallEP>
 80068ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068cc:	e040      	b.n	8006950 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fc68 	bl	80071a6 <USBD_CtlError>
              break;
 80068d6:	e03b      	b.n	8006950 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	885b      	ldrh	r3, [r3, #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d136      	bne.n	800694e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 f932 	bl	8007b58 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fd04 	bl	8007302 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fde2 	bl	80064c8 <USBD_CoreFindEP>
 8006904:	4603      	mov	r3, r0
 8006906:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006908:	7b7b      	ldrb	r3, [r7, #13]
 800690a:	2bff      	cmp	r3, #255	; 0xff
 800690c:	d01f      	beq.n	800694e <USBD_StdEPReq+0x1c6>
 800690e:	7b7b      	ldrb	r3, [r7, #13]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11c      	bne.n	800694e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006914:	7b7a      	ldrb	r2, [r7, #13]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800691c:	7b7a      	ldrb	r2, [r7, #13]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	; 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800692c:	7b7a      	ldrb	r2, [r7, #13]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	32ae      	adds	r2, #174	; 0xae
 8006932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006942:	e004      	b.n	800694e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fc2d 	bl	80071a6 <USBD_CtlError>
              break;
 800694c:	e000      	b.n	8006950 <USBD_StdEPReq+0x1c8>
              break;
 800694e:	bf00      	nop
          }
          break;
 8006950:	e0ab      	b.n	8006aaa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d002      	beq.n	8006964 <USBD_StdEPReq+0x1dc>
 800695e:	2b03      	cmp	r3, #3
 8006960:	d032      	beq.n	80069c8 <USBD_StdEPReq+0x240>
 8006962:	e097      	b.n	8006a94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <USBD_StdEPReq+0x1f2>
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d004      	beq.n	800697a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fc17 	bl	80071a6 <USBD_CtlError>
                break;
 8006978:	e091      	b.n	8006a9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800697e:	2b00      	cmp	r3, #0
 8006980:	da0b      	bge.n	800699a <USBD_StdEPReq+0x212>
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	3310      	adds	r3, #16
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	3304      	adds	r3, #4
 8006998:	e00b      	b.n	80069b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4413      	add	r3, r2
 80069b0:	3304      	adds	r3, #4
 80069b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2202      	movs	r2, #2
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc61 	bl	8007288 <USBD_CtlSendData>
              break;
 80069c6:	e06a      	b.n	8006a9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da11      	bge.n	80069f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	3324      	adds	r3, #36	; 0x24
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d117      	bne.n	8006a1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fbda 	bl	80071a6 <USBD_CtlError>
                  break;
 80069f2:	e054      	b.n	8006a9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	f003 020f 	and.w	r2, r3, #15
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fbc7 	bl	80071a6 <USBD_CtlError>
                  break;
 8006a18:	e041      	b.n	8006a9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da0b      	bge.n	8006a3a <USBD_StdEPReq+0x2b2>
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	3310      	adds	r3, #16
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	3304      	adds	r3, #4
 8006a38:	e00b      	b.n	8006a52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	3304      	adds	r3, #4
 8006a52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <USBD_StdEPReq+0x2d8>
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d103      	bne.n	8006a68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e00e      	b.n	8006a86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f8a9 	bl	8007bc4 <USBD_LL_IsStallEP>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e002      	b.n	8006a86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fbfb 	bl	8007288 <USBD_CtlSendData>
              break;
 8006a92:	e004      	b.n	8006a9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb85 	bl	80071a6 <USBD_CtlError>
              break;
 8006a9c:	bf00      	nop
          }
          break;
 8006a9e:	e004      	b.n	8006aaa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fb7f 	bl	80071a6 <USBD_CtlError>
          break;
 8006aa8:	bf00      	nop
      }
      break;
 8006aaa:	e005      	b.n	8006ab8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fb79 	bl	80071a6 <USBD_CtlError>
      break;
 8006ab4:	e000      	b.n	8006ab8 <USBD_StdEPReq+0x330>
      break;
 8006ab6:	bf00      	nop
  }

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	885b      	ldrh	r3, [r3, #2]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	2b0e      	cmp	r3, #14
 8006ae6:	f200 8152 	bhi.w	8006d8e <USBD_GetDescriptor+0x2ca>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <USBD_GetDescriptor+0x2c>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b61 	.word	0x08006b61
 8006af4:	08006b79 	.word	0x08006b79
 8006af8:	08006bb9 	.word	0x08006bb9
 8006afc:	08006d8f 	.word	0x08006d8f
 8006b00:	08006d8f 	.word	0x08006d8f
 8006b04:	08006d2f 	.word	0x08006d2f
 8006b08:	08006d5b 	.word	0x08006d5b
 8006b0c:	08006d8f 	.word	0x08006d8f
 8006b10:	08006d8f 	.word	0x08006d8f
 8006b14:	08006d8f 	.word	0x08006d8f
 8006b18:	08006d8f 	.word	0x08006d8f
 8006b1c:	08006d8f 	.word	0x08006d8f
 8006b20:	08006d8f 	.word	0x08006d8f
 8006b24:	08006d8f 	.word	0x08006d8f
 8006b28:	08006b2d 	.word	0x08006b2d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	7c12      	ldrb	r2, [r2, #16]
 8006b44:	f107 0108 	add.w	r1, r7, #8
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b4e:	e126      	b.n	8006d9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fb27 	bl	80071a6 <USBD_CtlError>
        err++;
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b5e:	e11e      	b.n	8006d9e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7c12      	ldrb	r2, [r2, #16]
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
      break;
 8006b76:	e112      	b.n	8006d9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7c1b      	ldrb	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10d      	bne.n	8006b9c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f107 0208 	add.w	r2, r7, #8
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b9a:	e100      	b.n	8006d9e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f107 0208 	add.w	r2, r7, #8
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
      break;
 8006bb6:	e0f2      	b.n	8006d9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	885b      	ldrh	r3, [r3, #2]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	f200 80ac 	bhi.w	8006d1c <USBD_GetDescriptor+0x258>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_GetDescriptor+0x108>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c4d 	.word	0x08006c4d
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006cb5 	.word	0x08006cb5
 8006be0:	08006ce9 	.word	0x08006ce9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7c12      	ldrb	r2, [r2, #16]
 8006bfc:	f107 0108 	add.w	r1, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c06:	e091      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 facb 	bl	80071a6 <USBD_CtlError>
            err++;
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	3301      	adds	r3, #1
 8006c14:	72fb      	strb	r3, [r7, #11]
          break;
 8006c16:	e089      	b.n	8006d2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7c12      	ldrb	r2, [r2, #16]
 8006c30:	f107 0108 	add.w	r1, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3a:	e077      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fab1 	bl	80071a6 <USBD_CtlError>
            err++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4a:	e06f      	b.n	8006d2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	7c12      	ldrb	r2, [r2, #16]
 8006c64:	f107 0108 	add.w	r1, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6e:	e05d      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa97 	bl	80071a6 <USBD_CtlError>
            err++;
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7e:	e055      	b.n	8006d2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	7c12      	ldrb	r2, [r2, #16]
 8006c98:	f107 0108 	add.w	r1, r7, #8
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
 8006ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca2:	e043      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa7d 	bl	80071a6 <USBD_CtlError>
            err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb2:	e03b      	b.n	8006d2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	7c12      	ldrb	r2, [r2, #16]
 8006ccc:	f107 0108 	add.w	r1, r7, #8
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
 8006cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd6:	e029      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa63 	bl	80071a6 <USBD_CtlError>
            err++;
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce6:	e021      	b.n	8006d2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	7c12      	ldrb	r2, [r2, #16]
 8006d00:	f107 0108 	add.w	r1, r7, #8
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0a:	e00f      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa49 	bl	80071a6 <USBD_CtlError>
            err++;
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	3301      	adds	r3, #1
 8006d18:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1a:	e007      	b.n	8006d2c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa41 	bl	80071a6 <USBD_CtlError>
          err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d2a:	bf00      	nop
      }
      break;
 8006d2c:	e037      	b.n	8006d9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7c1b      	ldrb	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d109      	bne.n	8006d4a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	f107 0208 	add.w	r2, r7, #8
 8006d42:	4610      	mov	r0, r2
 8006d44:	4798      	blx	r3
 8006d46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d48:	e029      	b.n	8006d9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa2a 	bl	80071a6 <USBD_CtlError>
        err++;
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	3301      	adds	r3, #1
 8006d56:	72fb      	strb	r3, [r7, #11]
      break;
 8006d58:	e021      	b.n	8006d9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7c1b      	ldrb	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f107 0208 	add.w	r2, r7, #8
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4798      	blx	r3
 8006d72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	2207      	movs	r2, #7
 8006d7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d7c:	e00f      	b.n	8006d9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa10 	bl	80071a6 <USBD_CtlError>
        err++;
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d8c:	e007      	b.n	8006d9e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa08 	bl	80071a6 <USBD_CtlError>
      err++;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d9c:	bf00      	nop
  }

  if (err != 0U)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11e      	bne.n	8006de2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d016      	beq.n	8006dda <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006dac:	893b      	ldrh	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00e      	beq.n	8006dd0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88da      	ldrh	r2, [r3, #6]
 8006db6:	893b      	ldrh	r3, [r7, #8]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	bf28      	it	cs
 8006dbc:	4613      	movcs	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dc2:	893b      	ldrh	r3, [r7, #8]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa5d 	bl	8007288 <USBD_CtlSendData>
 8006dce:	e009      	b.n	8006de4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9e7 	bl	80071a6 <USBD_CtlError>
 8006dd8:	e004      	b.n	8006de4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa91 	bl	8007302 <USBD_CtlSendStatus>
 8006de0:	e000      	b.n	8006de4 <USBD_GetDescriptor+0x320>
    return;
 8006de2:	bf00      	nop
  }
}
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d131      	bne.n	8006e62 <USBD_SetAddress+0x76>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d12d      	bne.n	8006e62 <USBD_SetAddress+0x76>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0c:	d829      	bhi.n	8006e62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d104      	bne.n	8006e30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9bc 	bl	80071a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2e:	e01d      	b.n	8006e6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 feed 	bl	8007c1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa5d 	bl	8007302 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	e009      	b.n	8006e6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e60:	e004      	b.n	8006e6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f99e 	bl	80071a6 <USBD_CtlError>
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	4b4e      	ldr	r3, [pc, #312]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006e8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e8c:	4b4d      	ldr	r3, [pc, #308]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d905      	bls.n	8006ea0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f985 	bl	80071a6 <USBD_CtlError>
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e08c      	b.n	8006fba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d002      	beq.n	8006eb2 <USBD_SetConfig+0x3e>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d029      	beq.n	8006f04 <USBD_SetConfig+0x90>
 8006eb0:	e075      	b.n	8006f9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006eb2:	4b44      	ldr	r3, [pc, #272]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006eba:	4b42      	ldr	r3, [pc, #264]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ec4:	4b3f      	ldr	r3, [pc, #252]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fe ffb7 	bl	8005e3e <USBD_SetClassConfig>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f962 	bl	80071a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eea:	e065      	b.n	8006fb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa08 	bl	8007302 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006efa:	e05d      	b.n	8006fb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa00 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006f02:	e059      	b.n	8006fb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f04:	4b2f      	ldr	r3, [pc, #188]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d112      	bne.n	8006f32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f14:	4b2b      	ldr	r3, [pc, #172]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f1e:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fe ffa6 	bl	8005e76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f9e9 	bl	8007302 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f30:	e042      	b.n	8006fb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d02a      	beq.n	8006f96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fe ff94 	bl	8005e76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f58:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe ff6d 	bl	8005e3e <USBD_SetClassConfig>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00f      	beq.n	8006f8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f918 	bl	80071a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fe ff79 	bl	8005e76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f8c:	e014      	b.n	8006fb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9b7 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006f94:	e010      	b.n	8006fb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9b3 	bl	8007302 <USBD_CtlSendStatus>
      break;
 8006f9c:	e00c      	b.n	8006fb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f900 	bl	80071a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <USBD_SetConfig+0x150>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe ff62 	bl	8005e76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb6:	bf00      	nop
  }

  return ret;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200001d8 	.word	0x200001d8

08006fc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88db      	ldrh	r3, [r3, #6]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d004      	beq.n	8006fe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8e2 	bl	80071a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fe2:	e023      	b.n	800702c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	dc02      	bgt.n	8006ff6 <USBD_GetConfig+0x2e>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	dc03      	bgt.n	8006ffc <USBD_GetConfig+0x34>
 8006ff4:	e015      	b.n	8007022 <USBD_GetConfig+0x5a>
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d00b      	beq.n	8007012 <USBD_GetConfig+0x4a>
 8006ffa:	e012      	b.n	8007022 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3308      	adds	r3, #8
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f93c 	bl	8007288 <USBD_CtlSendData>
        break;
 8007010:	e00c      	b.n	800702c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	2201      	movs	r2, #1
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f934 	bl	8007288 <USBD_CtlSendData>
        break;
 8007020:	e004      	b.n	800702c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8be 	bl	80071a6 <USBD_CtlError>
        break;
 800702a:	bf00      	nop
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007044:	b2db      	uxtb	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	2b02      	cmp	r3, #2
 800704a:	d81e      	bhi.n	800708a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	88db      	ldrh	r3, [r3, #6]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d004      	beq.n	800705e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8a5 	bl	80071a6 <USBD_CtlError>
        break;
 800705c:	e01a      	b.n	8007094 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f043 0202 	orr.w	r2, r3, #2
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	330c      	adds	r3, #12
 800707e:	2202      	movs	r2, #2
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f900 	bl	8007288 <USBD_CtlSendData>
      break;
 8007088:	e004      	b.n	8007094 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f88a 	bl	80071a6 <USBD_CtlError>
      break;
 8007092:	bf00      	nop
  }
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d107      	bne.n	80070be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f923 	bl	8007302 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80070bc:	e013      	b.n	80070e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	885b      	ldrh	r3, [r3, #2]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d10b      	bne.n	80070de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	889b      	ldrh	r3, [r3, #4]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f913 	bl	8007302 <USBD_CtlSendStatus>
}
 80070dc:	e003      	b.n	80070e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f860 	bl	80071a6 <USBD_CtlError>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	2b02      	cmp	r3, #2
 8007104:	d80b      	bhi.n	800711e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10c      	bne.n	8007128 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f8f3 	bl	8007302 <USBD_CtlSendStatus>
      }
      break;
 800711c:	e004      	b.n	8007128 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f840 	bl	80071a6 <USBD_CtlError>
      break;
 8007126:	e000      	b.n	800712a <USBD_ClrFeature+0x3c>
      break;
 8007128:	bf00      	nop
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fa17 	bl	8006590 <SWAPBYTE>
 8007162:	4603      	mov	r3, r0
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff fa0a 	bl	8006590 <SWAPBYTE>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3301      	adds	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff f9fd 	bl	8006590 <SWAPBYTE>
 8007196:	4603      	mov	r3, r0
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	80da      	strh	r2, [r3, #6]
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fc9a 	bl	8007aec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fc96 	bl	8007aec <USBD_LL_StallEP>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d036      	beq.n	800724c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071e2:	6938      	ldr	r0, [r7, #16]
 80071e4:	f000 f836 	bl	8007254 <USBD_GetLen>
 80071e8:	4603      	mov	r3, r0
 80071ea:	3301      	adds	r3, #1
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	4413      	add	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	701a      	strb	r2, [r3, #0]
  idx++;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	3301      	adds	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	2203      	movs	r2, #3
 8007210:	701a      	strb	r2, [r3, #0]
  idx++;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	3301      	adds	r3, #1
 8007216:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007218:	e013      	b.n	8007242 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4413      	add	r3, r2
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	613b      	str	r3, [r7, #16]
    idx++;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	3301      	adds	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	4413      	add	r3, r2
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
    idx++;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	3301      	adds	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e7      	bne.n	800721a <USBD_GetString+0x52>
 800724a:	e000      	b.n	800724e <USBD_GetString+0x86>
    return;
 800724c:	bf00      	nop
  }
}
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007264:	e005      	b.n	8007272 <USBD_GetLen+0x1e>
  {
    len++;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	3301      	adds	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3301      	adds	r3, #1
 8007270:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f5      	bne.n	8007266 <USBD_GetLen+0x12>
  }

  return len;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2202      	movs	r2, #2
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	2100      	movs	r1, #0
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fcea 	bl	8007c88 <USBD_LL_Transmit>

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	2100      	movs	r1, #0
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fcd9 	bl	8007c88 <USBD_LL_Transmit>

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	2100      	movs	r1, #0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fd00 	bl	8007cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fcb5 	bl	8007c88 <USBD_LL_Transmit>

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2205      	movs	r2, #5
 8007334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007338:	2300      	movs	r3, #0
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fcda 	bl	8007cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007354:	2200      	movs	r2, #0
 8007356:	490e      	ldr	r1, [pc, #56]	; (8007390 <MX_USB_DEVICE_Init+0x40>)
 8007358:	480e      	ldr	r0, [pc, #56]	; (8007394 <MX_USB_DEVICE_Init+0x44>)
 800735a:	f7fe fcf3 	bl	8005d44 <USBD_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007364:	f7f9 f9af 	bl	80006c6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007368:	490b      	ldr	r1, [pc, #44]	; (8007398 <MX_USB_DEVICE_Init+0x48>)
 800736a:	480a      	ldr	r0, [pc, #40]	; (8007394 <MX_USB_DEVICE_Init+0x44>)
 800736c:	f7fe fd1a 	bl	8005da4 <USBD_RegisterClass>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007376:	f7f9 f9a6 	bl	80006c6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800737a:	4806      	ldr	r0, [pc, #24]	; (8007394 <MX_USB_DEVICE_Init+0x44>)
 800737c:	f7fe fd48 	bl	8005e10 <USBD_Start>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007386:	f7f9 f99e 	bl	80006c6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800738a:	bf00      	nop
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	200000cc 	.word	0x200000cc
 8007394:	200001dc 	.word	0x200001dc
 8007398:	2000000c 	.word	0x2000000c

0800739c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2212      	movs	r2, #18
 80073ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	200000ec 	.word	0x200000ec

080073c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2204      	movs	r2, #4
 80073d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	2000010c 	.word	0x2000010c

080073e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4907      	ldr	r1, [pc, #28]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <USBD_FS_ProductStrDescriptor+0x38>)
 80073fc:	f7ff fee4 	bl	80071c8 <USBD_GetString>
 8007400:	e004      	b.n	800740c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <USBD_FS_ProductStrDescriptor+0x38>)
 8007408:	f7ff fede 	bl	80071c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200004b8 	.word	0x200004b8
 800741c:	08007eb0 	.word	0x08007eb0

08007420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	4904      	ldr	r1, [pc, #16]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007430:	4804      	ldr	r0, [pc, #16]	; (8007444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007432:	f7ff fec9 	bl	80071c8 <USBD_GetString>
  return USBD_StrDesc;
 8007436:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200004b8 	.word	0x200004b8
 8007444:	08007ec8 	.word	0x08007ec8

08007448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	221a      	movs	r2, #26
 8007458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800745a:	f000 f855 	bl	8007508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800745e:	4b02      	ldr	r3, [pc, #8]	; (8007468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000110 	.word	0x20000110

0800746c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4907      	ldr	r1, [pc, #28]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007482:	4808      	ldr	r0, [pc, #32]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007484:	f7ff fea0 	bl	80071c8 <USBD_GetString>
 8007488:	e004      	b.n	8007494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	4904      	ldr	r1, [pc, #16]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800748e:	4805      	ldr	r0, [pc, #20]	; (80074a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007490:	f7ff fe9a 	bl	80071c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200004b8 	.word	0x200004b8
 80074a4:	08007edc 	.word	0x08007edc

080074a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074be:	4808      	ldr	r0, [pc, #32]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c0:	f7ff fe82 	bl	80071c8 <USBD_GetString>
 80074c4:	e004      	b.n	80074d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074cc:	f7ff fe7c 	bl	80071c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200004b8 	.word	0x200004b8
 80074e0:	08007ee8 	.word	0x08007ee8

080074e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	220c      	movs	r2, #12
 80074f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80074f6:	4b03      	ldr	r3, [pc, #12]	; (8007504 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	20000100 	.word	0x20000100

08007508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <Get_SerialNum+0x44>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <Get_SerialNum+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <Get_SerialNum+0x4c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800752e:	2208      	movs	r2, #8
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <Get_SerialNum+0x50>)
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f814 	bl	8007560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007538:	2204      	movs	r2, #4
 800753a:	4908      	ldr	r1, [pc, #32]	; (800755c <Get_SerialNum+0x54>)
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f000 f80f 	bl	8007560 <IntToUnicode>
  }
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	1fff7590 	.word	0x1fff7590
 8007550:	1fff7594 	.word	0x1fff7594
 8007554:	1fff7598 	.word	0x1fff7598
 8007558:	20000112 	.word	0x20000112
 800755c:	20000122 	.word	0x20000122

08007560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
 8007576:	e027      	b.n	80075c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	2b09      	cmp	r3, #9
 800757e:	d80b      	bhi.n	8007598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0f1b      	lsrs	r3, r3, #28
 8007584:	b2da      	uxtb	r2, r3
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4619      	mov	r1, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	440b      	add	r3, r1
 8007590:	3230      	adds	r2, #48	; 0x30
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e00a      	b.n	80075ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0f1b      	lsrs	r3, r3, #28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	440b      	add	r3, r1
 80075a8:	3237      	adds	r2, #55	; 0x37
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	3301      	adds	r3, #1
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	3301      	adds	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	7dfa      	ldrb	r2, [r7, #23]
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d3d3      	bcc.n	8007578 <IntToUnicode+0x18>
  }
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b0ac      	sub	sp, #176	; 0xb0
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	2288      	movs	r2, #136	; 0x88
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fc1d 	bl	8007e40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800760e:	d173      	bne.n	80076f8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007614:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007616:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800761a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800761e:	2301      	movs	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8007626:	2318      	movs	r3, #24
 8007628:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800762a:	2307      	movs	r3, #7
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800762e:	2302      	movs	r3, #2
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007632:	2302      	movs	r3, #2
 8007634:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800763a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4618      	mov	r0, r3
 8007642:	f7fb fd1b 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800764c:	f7f9 f83b 	bl	80006c6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <HAL_PCD_MspInit+0x120>)
 8007652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007654:	4a2a      	ldr	r2, [pc, #168]	; (8007700 <HAL_PCD_MspInit+0x120>)
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <HAL_PCD_MspInit+0x120>)
 800765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007668:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800766c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007670:	2302      	movs	r3, #2
 8007672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007676:	2300      	movs	r3, #0
 8007678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767c:	2303      	movs	r3, #3
 800767e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007682:	230a      	movs	r3, #10
 8007684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007688:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800768c:	4619      	mov	r1, r3
 800768e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007692:	f7f9 fafb 	bl	8000c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007696:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <HAL_PCD_MspInit+0x120>)
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_PCD_MspInit+0x120>)
 800769c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d114      	bne.n	80076e4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	4a10      	ldr	r2, [pc, #64]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c4:	6593      	str	r3, [r2, #88]	; 0x58
 80076c6:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ce:	60bb      	str	r3, [r7, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80076d2:	f7fa fec3 	bl	800245c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d6:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076da:	4a09      	ldr	r2, [pc, #36]	; (8007700 <HAL_PCD_MspInit+0x120>)
 80076dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e0:	6593      	str	r3, [r2, #88]	; 0x58
 80076e2:	e001      	b.n	80076e8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80076e4:	f7fa feba 	bl	800245c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076e8:	2200      	movs	r2, #0
 80076ea:	2100      	movs	r1, #0
 80076ec:	2043      	movs	r0, #67	; 0x43
 80076ee:	f7f9 fa96 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076f2:	2043      	movs	r0, #67	; 0x43
 80076f4:	f7f9 faaf 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076f8:	bf00      	nop
 80076fa:	37b0      	adds	r7, #176	; 0xb0
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40021000 	.word	0x40021000

08007704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f7fe fbc5 	bl	8005eaa <USBD_LL_SetupStage>
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	4619      	mov	r1, r3
 8007752:	f7fe fbff 	bl	8005f54 <USBD_LL_DataOutStage>
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	3348      	adds	r3, #72	; 0x48
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	4619      	mov	r1, r3
 8007786:	f7fe fc98 	bl	80060ba <USBD_LL_DataInStage>
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fdd2 	bl	800634a <USBD_LL_SOF>
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077b6:	2301      	movs	r3, #1
 80077b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d001      	beq.n	80077c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077c2:	f7f8 ff80 	bl	80006c6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077cc:	7bfa      	ldrb	r2, [r7, #15]
 80077ce:	4611      	mov	r1, r2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fd76 	bl	80062c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fd1e 	bl	800621e <USBD_LL_Reset>
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6812      	ldr	r2, [r2, #0]
 8007802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fd65 	bl	80062e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <HAL_PCD_SuspendCallback+0x48>)
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	4a03      	ldr	r2, [pc, #12]	; (8007834 <HAL_PCD_SuspendCallback+0x48>)
 8007826:	f043 0306 	orr.w	r3, r3, #6
 800782a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	e000ed00 	.word	0xe000ed00

08007838 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007860:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_PCD_ResumeCallback+0x4c>)
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4a07      	ldr	r2, [pc, #28]	; (8007884 <HAL_PCD_ResumeCallback+0x4c>)
 8007866:	f023 0306 	bic.w	r3, r3, #6
 800786a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800786c:	f000 fae2 	bl	8007e34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fd4f 	bl	800631a <USBD_LL_Resume>
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	e000ed00 	.word	0xe000ed00

08007888 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fda5 	bl	80063ee <USBD_LL_IsoOUTIncomplete>
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fd61 	bl	800638a <USBD_LL_IsoINIncomplete>
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fdb7 	bl	8006452 <USBD_LL_DevConnected>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fdb4 	bl	8006468 <USBD_LL_DevDisconnected>
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d13c      	bne.n	8007992 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007918:	4a20      	ldr	r2, [pc, #128]	; (800799c <USBD_LL_Init+0x94>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <USBD_LL_Init+0x94>)
 8007924:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007928:	4b1c      	ldr	r3, [pc, #112]	; (800799c <USBD_LL_Init+0x94>)
 800792a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800792e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <USBD_LL_Init+0x94>)
 8007932:	2206      	movs	r2, #6
 8007934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007936:	4b19      	ldr	r3, [pc, #100]	; (800799c <USBD_LL_Init+0x94>)
 8007938:	2202      	movs	r2, #2
 800793a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800793c:	4b17      	ldr	r3, [pc, #92]	; (800799c <USBD_LL_Init+0x94>)
 800793e:	2202      	movs	r2, #2
 8007940:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <USBD_LL_Init+0x94>)
 8007944:	2200      	movs	r2, #0
 8007946:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007948:	4b14      	ldr	r3, [pc, #80]	; (800799c <USBD_LL_Init+0x94>)
 800794a:	2200      	movs	r2, #0
 800794c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <USBD_LL_Init+0x94>)
 8007950:	2200      	movs	r2, #0
 8007952:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007954:	4b11      	ldr	r3, [pc, #68]	; (800799c <USBD_LL_Init+0x94>)
 8007956:	2200      	movs	r2, #0
 8007958:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <USBD_LL_Init+0x94>)
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007960:	4b0e      	ldr	r3, [pc, #56]	; (800799c <USBD_LL_Init+0x94>)
 8007962:	2200      	movs	r2, #0
 8007964:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007966:	480d      	ldr	r0, [pc, #52]	; (800799c <USBD_LL_Init+0x94>)
 8007968:	f7f9 fb84 	bl	8001074 <HAL_PCD_Init>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007972:	f7f8 fea8 	bl	80006c6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007976:	2180      	movs	r1, #128	; 0x80
 8007978:	4808      	ldr	r0, [pc, #32]	; (800799c <USBD_LL_Init+0x94>)
 800797a:	f7fa fcd6 	bl	800232a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800797e:	2240      	movs	r2, #64	; 0x40
 8007980:	2100      	movs	r1, #0
 8007982:	4806      	ldr	r0, [pc, #24]	; (800799c <USBD_LL_Init+0x94>)
 8007984:	f7fa fc8a 	bl	800229c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007988:	2280      	movs	r2, #128	; 0x80
 800798a:	2101      	movs	r1, #1
 800798c:	4803      	ldr	r0, [pc, #12]	; (800799c <USBD_LL_Init+0x94>)
 800798e:	f7fa fc85 	bl	800229c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200006b8 	.word	0x200006b8

080079a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7f9 fc80 	bl	80012bc <HAL_PCD_Start>
 80079bc:	4603      	mov	r3, r0
 80079be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d816      	bhi.n	80079f4 <USBD_LL_Start+0x54>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBD_LL_Start+0x2c>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079e3 	.word	0x080079e3
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079ef 	.word	0x080079ef
    case HAL_OK :
      usb_status = USBD_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
    break;
 80079e0:	e00b      	b.n	80079fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
    break;
 80079e6:	e008      	b.n	80079fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e005      	b.n	80079fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e002      	b.n	80079fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80079f4:	2303      	movs	r3, #3
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	bf00      	nop
  }
  return usb_status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	70fb      	strb	r3, [r7, #3]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70bb      	strb	r3, [r7, #2]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a2c:	78bb      	ldrb	r3, [r7, #2]
 8007a2e:	883a      	ldrh	r2, [r7, #0]
 8007a30:	78f9      	ldrb	r1, [r7, #3]
 8007a32:	f7fa f92a 	bl	8001c8a <HAL_PCD_EP_Open>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d817      	bhi.n	8007a70 <USBD_LL_OpenEP+0x6c>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USBD_LL_OpenEP+0x44>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a5f 	.word	0x08007a5f
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a6b 	.word	0x08007a6b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5c:	e00b      	b.n	8007a76 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	73fb      	strb	r3, [r7, #15]
    break;
 8007a62:	e008      	b.n	8007a76 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
    break;
 8007a68:	e005      	b.n	8007a76 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6e:	e002      	b.n	8007a76 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	bf00      	nop
  }
  return usb_status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fa f95b 	bl	8001d5a <HAL_PCD_EP_Close>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d816      	bhi.n	8007adc <USBD_LL_CloseEP+0x5c>
 8007aae:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <USBD_LL_CloseEP+0x34>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007ac5 	.word	0x08007ac5
 8007ab8:	08007acb 	.word	0x08007acb
 8007abc:	08007ad1 	.word	0x08007ad1
 8007ac0:	08007ad7 	.word	0x08007ad7
    case HAL_OK :
      usb_status = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac8:	e00b      	b.n	8007ae2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aca:	2303      	movs	r3, #3
 8007acc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ace:	e008      	b.n	8007ae2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad4:	e005      	b.n	8007ae2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8007ada:	e002      	b.n	8007ae2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae0:	bf00      	nop
  }
  return usb_status;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa f9d2 	bl	8001eb4 <HAL_PCD_EP_SetStall>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d816      	bhi.n	8007b48 <USBD_LL_StallEP+0x5c>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <USBD_LL_StallEP+0x34>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b31 	.word	0x08007b31
 8007b24:	08007b37 	.word	0x08007b37
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b43 	.word	0x08007b43
    case HAL_OK :
      usb_status = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
    break;
 8007b34:	e00b      	b.n	8007b4e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b36:	2303      	movs	r3, #3
 8007b38:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3a:	e008      	b.n	8007b4e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b40:	e005      	b.n	8007b4e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	73fb      	strb	r3, [r7, #15]
    break;
 8007b46:	e002      	b.n	8007b4e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4c:	bf00      	nop
  }
  return usb_status;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fa f9fe 	bl	8001f78 <HAL_PCD_EP_ClrStall>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d816      	bhi.n	8007bb4 <USBD_LL_ClearStallEP+0x5c>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBD_LL_ClearStallEP+0x34>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007ba3 	.word	0x08007ba3
 8007b94:	08007ba9 	.word	0x08007ba9
 8007b98:	08007baf 	.word	0x08007baf
    case HAL_OK :
      usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba0:	e00b      	b.n	8007bba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba6:	e008      	b.n	8007bba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73fb      	strb	r3, [r7, #15]
    break;
 8007bac:	e005      	b.n	8007bba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb2:	e002      	b.n	8007bba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb8:	bf00      	nop
  }
  return usb_status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0b      	bge.n	8007bf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	333e      	adds	r3, #62	; 0x3e
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	e00b      	b.n	8007c10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fa f800 	bl	8001c40 <HAL_PCD_SetAddress>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d816      	bhi.n	8007c78 <USBD_LL_SetUSBAddress+0x5c>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <USBD_LL_SetUSBAddress+0x34>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007c67 	.word	0x08007c67
 8007c58:	08007c6d 	.word	0x08007c6d
 8007c5c:	08007c73 	.word	0x08007c73
    case HAL_OK :
      usb_status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
    break;
 8007c64:	e00b      	b.n	8007c7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c66:	2303      	movs	r3, #3
 8007c68:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6a:	e008      	b.n	8007c7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c70:	e005      	b.n	8007c7e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
    break;
 8007c76:	e002      	b.n	8007c7e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7c:	bf00      	nop
  }
  return usb_status;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	460b      	mov	r3, r1
 8007c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ca6:	7af9      	ldrb	r1, [r7, #11]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f7fa f8d1 	bl	8001e52 <HAL_PCD_EP_Transmit>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007cb4:	7dbb      	ldrb	r3, [r7, #22]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d816      	bhi.n	8007ce8 <USBD_LL_Transmit+0x60>
 8007cba:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBD_LL_Transmit+0x38>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cd7 	.word	0x08007cd7
 8007cc8:	08007cdd 	.word	0x08007cdd
 8007ccc:	08007ce3 	.word	0x08007ce3
    case HAL_OK :
      usb_status = USBD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]
    break;
 8007cd4:	e00b      	b.n	8007cee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	75fb      	strb	r3, [r7, #23]
    break;
 8007cda:	e008      	b.n	8007cee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
    break;
 8007ce0:	e005      	b.n	8007cee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ce6:	e002      	b.n	8007cee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	75fb      	strb	r3, [r7, #23]
    break;
 8007cec:	bf00      	nop
  }
  return usb_status;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	460b      	mov	r3, r1
 8007d06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d16:	7af9      	ldrb	r1, [r7, #11]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	f7fa f867 	bl	8001dee <HAL_PCD_EP_Receive>
 8007d20:	4603      	mov	r3, r0
 8007d22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d24:	7dbb      	ldrb	r3, [r7, #22]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d816      	bhi.n	8007d58 <USBD_LL_PrepareReceive+0x60>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <USBD_LL_PrepareReceive+0x38>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d47 	.word	0x08007d47
 8007d38:	08007d4d 	.word	0x08007d4d
 8007d3c:	08007d53 	.word	0x08007d53
    case HAL_OK :
      usb_status = USBD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]
    break;
 8007d44:	e00b      	b.n	8007d5e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	75fb      	strb	r3, [r7, #23]
    break;
 8007d4a:	e008      	b.n	8007d5e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d50:	e005      	b.n	8007d5e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	75fb      	strb	r3, [r7, #23]
    break;
 8007d56:	e002      	b.n	8007d5e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d5c:	bf00      	nop
  }
  return usb_status;
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_PCDEx_LPM_Callback+0x18>
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d01f      	beq.n	8007dbe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007d7e:	e03b      	b.n	8007df8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d88:	f000 f854 	bl	8007e34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d8c:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x98>)
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x98>)
 8007d92:	f023 0306 	bic.w	r3, r3, #6
 8007d96:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe faaf 	bl	800631a <USBD_LL_Resume>
    break;
 8007dbc:	e01c      	b.n	8007df8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fa80 	bl	80062e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x98>)
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <HAL_PCDEx_LPM_Callback+0x98>)
 8007df0:	f043 0306 	orr.w	r3, r3, #6
 8007df4:	6113      	str	r3, [r2, #16]
    break;
 8007df6:	bf00      	nop
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e0c:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <USBD_static_malloc+0x18>)
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000bc4 	.word	0x20000bc4

08007e20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]

}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007e38:	f7f8 fbf3 	bl	8000622 <SystemClock_Config>
}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <memset>:
 8007e40:	4402      	add	r2, r0
 8007e42:	4603      	mov	r3, r0
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d100      	bne.n	8007e4a <memset+0xa>
 8007e48:	4770      	bx	lr
 8007e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4e:	e7f9      	b.n	8007e44 <memset+0x4>

08007e50 <__libc_init_array>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	4d0d      	ldr	r5, [pc, #52]	; (8007e88 <__libc_init_array+0x38>)
 8007e54:	4c0d      	ldr	r4, [pc, #52]	; (8007e8c <__libc_init_array+0x3c>)
 8007e56:	1b64      	subs	r4, r4, r5
 8007e58:	10a4      	asrs	r4, r4, #2
 8007e5a:	2600      	movs	r6, #0
 8007e5c:	42a6      	cmp	r6, r4
 8007e5e:	d109      	bne.n	8007e74 <__libc_init_array+0x24>
 8007e60:	4d0b      	ldr	r5, [pc, #44]	; (8007e90 <__libc_init_array+0x40>)
 8007e62:	4c0c      	ldr	r4, [pc, #48]	; (8007e94 <__libc_init_array+0x44>)
 8007e64:	f000 f818 	bl	8007e98 <_init>
 8007e68:	1b64      	subs	r4, r4, r5
 8007e6a:	10a4      	asrs	r4, r4, #2
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	42a6      	cmp	r6, r4
 8007e70:	d105      	bne.n	8007e7e <__libc_init_array+0x2e>
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e78:	4798      	blx	r3
 8007e7a:	3601      	adds	r6, #1
 8007e7c:	e7ee      	b.n	8007e5c <__libc_init_array+0xc>
 8007e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e82:	4798      	blx	r3
 8007e84:	3601      	adds	r6, #1
 8007e86:	e7f2      	b.n	8007e6e <__libc_init_array+0x1e>
 8007e88:	08007f48 	.word	0x08007f48
 8007e8c:	08007f48 	.word	0x08007f48
 8007e90:	08007f48 	.word	0x08007f48
 8007e94:	08007f4c 	.word	0x08007f4c

08007e98 <_init>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr

08007ea4 <_fini>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr
